
FlashBlaster SAMC21 XPL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001488  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000300  20000000  00001488  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000046c  20000300  00001788  00020300  2**2
                  ALLOC
  3 .stack        00002004  2000076c  00001bf4  00020300  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00020300  2**0
                  CONTENTS, READONLY
  5 .comment      00000059  00000000  00000000  00020328  2**0
                  CONTENTS, READONLY
  6 .debug_info   0001bdb6  00000000  00000000  00020381  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002973  00000000  00000000  0003c137  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000b60d  00000000  00000000  0003eaaa  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000009c0  00000000  00000000  0004a0b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000e88  00000000  00000000  0004aa77  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001e767  00000000  00000000  0004b8ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00010b06  00000000  00000000  0006a066  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0009909b  00000000  00000000  0007ab6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001968  00000000  00000000  00113c08  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	70 27 00 20 2d 01 00 00 29 01 00 00 29 01 00 00     p'. -...)...)...
	...
      2c:	29 01 00 00 00 00 00 00 00 00 00 00 29 01 00 00     )...........)...
      3c:	29 01 00 00 29 01 00 00 29 01 00 00 a1 08 00 00     )...)...).......
      4c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      5c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      6c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      7c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      8c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      9c:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...
      ac:	29 01 00 00 29 01 00 00 29 01 00 00 29 01 00 00     )...)...)...)...

000000bc <__do_global_dtors_aux>:
      bc:	b510      	push	{r4, lr}
      be:	4c06      	ldr	r4, [pc, #24]	; (d8 <__do_global_dtors_aux+0x1c>)
      c0:	7823      	ldrb	r3, [r4, #0]
      c2:	2b00      	cmp	r3, #0
      c4:	d107      	bne.n	d6 <__do_global_dtors_aux+0x1a>
      c6:	4b05      	ldr	r3, [pc, #20]	; (dc <__do_global_dtors_aux+0x20>)
      c8:	2b00      	cmp	r3, #0
      ca:	d002      	beq.n	d2 <__do_global_dtors_aux+0x16>
      cc:	4804      	ldr	r0, [pc, #16]	; (e0 <__do_global_dtors_aux+0x24>)
      ce:	e000      	b.n	d2 <__do_global_dtors_aux+0x16>
      d0:	bf00      	nop
      d2:	2301      	movs	r3, #1
      d4:	7023      	strb	r3, [r4, #0]
      d6:	bd10      	pop	{r4, pc}
      d8:	20000300 	.word	0x20000300
      dc:	00000000 	.word	0x00000000
      e0:	00001488 	.word	0x00001488

000000e4 <frame_dummy>:
      e4:	4b08      	ldr	r3, [pc, #32]	; (108 <frame_dummy+0x24>)
      e6:	b510      	push	{r4, lr}
      e8:	2b00      	cmp	r3, #0
      ea:	d003      	beq.n	f4 <frame_dummy+0x10>
      ec:	4907      	ldr	r1, [pc, #28]	; (10c <frame_dummy+0x28>)
      ee:	4808      	ldr	r0, [pc, #32]	; (110 <frame_dummy+0x2c>)
      f0:	e000      	b.n	f4 <frame_dummy+0x10>
      f2:	bf00      	nop
      f4:	4807      	ldr	r0, [pc, #28]	; (114 <frame_dummy+0x30>)
      f6:	6803      	ldr	r3, [r0, #0]
      f8:	2b00      	cmp	r3, #0
      fa:	d100      	bne.n	fe <frame_dummy+0x1a>
      fc:	bd10      	pop	{r4, pc}
      fe:	4b06      	ldr	r3, [pc, #24]	; (118 <frame_dummy+0x34>)
     100:	2b00      	cmp	r3, #0
     102:	d0fb      	beq.n	fc <frame_dummy+0x18>
     104:	4798      	blx	r3
     106:	e7f9      	b.n	fc <frame_dummy+0x18>
     108:	00000000 	.word	0x00000000
     10c:	20000304 	.word	0x20000304
     110:	00001488 	.word	0x00001488
     114:	00001488 	.word	0x00001488
     118:	00000000 	.word	0x00000000

0000011c <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     11c:	b510      	push	{r4, lr}
	system_init();
     11e:	4b01      	ldr	r3, [pc, #4]	; (124 <atmel_start_init+0x8>)
     120:	4798      	blx	r3
}
     122:	bd10      	pop	{r4, pc}
     124:	000002dd 	.word	0x000002dd

00000128 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     128:	e7fe      	b.n	128 <Dummy_Handler>
	...

0000012c <Reset_Handler>:
{
     12c:	b510      	push	{r4, lr}
        if (pSrc != pDest) {
     12e:	4a17      	ldr	r2, [pc, #92]	; (18c <Reset_Handler+0x60>)
     130:	4b17      	ldr	r3, [pc, #92]	; (190 <Reset_Handler+0x64>)
     132:	429a      	cmp	r2, r3
     134:	d011      	beq.n	15a <Reset_Handler+0x2e>
                for (; pDest < &_erelocate;) {
     136:	001a      	movs	r2, r3
     138:	4b16      	ldr	r3, [pc, #88]	; (194 <Reset_Handler+0x68>)
     13a:	429a      	cmp	r2, r3
     13c:	d20d      	bcs.n	15a <Reset_Handler+0x2e>
     13e:	4a16      	ldr	r2, [pc, #88]	; (198 <Reset_Handler+0x6c>)
     140:	3303      	adds	r3, #3
     142:	1a9b      	subs	r3, r3, r2
     144:	089b      	lsrs	r3, r3, #2
     146:	3301      	adds	r3, #1
     148:	009b      	lsls	r3, r3, #2
     14a:	2200      	movs	r2, #0
                        *pDest++ = *pSrc++;
     14c:	4810      	ldr	r0, [pc, #64]	; (190 <Reset_Handler+0x64>)
     14e:	490f      	ldr	r1, [pc, #60]	; (18c <Reset_Handler+0x60>)
     150:	588c      	ldr	r4, [r1, r2]
     152:	5084      	str	r4, [r0, r2]
     154:	3204      	adds	r2, #4
                for (; pDest < &_erelocate;) {
     156:	429a      	cmp	r2, r3
     158:	d1fa      	bne.n	150 <Reset_Handler+0x24>
        for (pDest = &_szero; pDest < &_ezero;) {
     15a:	4a10      	ldr	r2, [pc, #64]	; (19c <Reset_Handler+0x70>)
     15c:	4b10      	ldr	r3, [pc, #64]	; (1a0 <Reset_Handler+0x74>)
     15e:	429a      	cmp	r2, r3
     160:	d20a      	bcs.n	178 <Reset_Handler+0x4c>
     162:	43d3      	mvns	r3, r2
     164:	490e      	ldr	r1, [pc, #56]	; (1a0 <Reset_Handler+0x74>)
     166:	185b      	adds	r3, r3, r1
     168:	2103      	movs	r1, #3
     16a:	438b      	bics	r3, r1
     16c:	3304      	adds	r3, #4
     16e:	189b      	adds	r3, r3, r2
                *pDest++ = 0;
     170:	2100      	movs	r1, #0
     172:	c202      	stmia	r2!, {r1}
        for (pDest = &_szero; pDest < &_ezero;) {
     174:	4293      	cmp	r3, r2
     176:	d1fc      	bne.n	172 <Reset_Handler+0x46>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     178:	4a0a      	ldr	r2, [pc, #40]	; (1a4 <Reset_Handler+0x78>)
     17a:	21ff      	movs	r1, #255	; 0xff
     17c:	4b0a      	ldr	r3, [pc, #40]	; (1a8 <Reset_Handler+0x7c>)
     17e:	438b      	bics	r3, r1
     180:	6093      	str	r3, [r2, #8]
        __libc_init_array();
     182:	4b0a      	ldr	r3, [pc, #40]	; (1ac <Reset_Handler+0x80>)
     184:	4798      	blx	r3
        main();
     186:	4b0a      	ldr	r3, [pc, #40]	; (1b0 <Reset_Handler+0x84>)
     188:	4798      	blx	r3
     18a:	e7fe      	b.n	18a <Reset_Handler+0x5e>
     18c:	00001488 	.word	0x00001488
     190:	20000000 	.word	0x20000000
     194:	20000300 	.word	0x20000300
     198:	20000004 	.word	0x20000004
     19c:	20000300 	.word	0x20000300
     1a0:	2000076c 	.word	0x2000076c
     1a4:	e000ed00 	.word	0xe000ed00
     1a8:	00000000 	.word	0x00000000
     1ac:	000012f1 	.word	0x000012f1
     1b0:	000010c1 	.word	0x000010c1

000001b4 <I2C_0_PORT_init>:
	hri_mclk_set_APBAMASK_RTC_bit(MCLK);
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
}

void I2C_0_PORT_init(void)
{
     1b4:	b570      	push	{r4, r5, r6, lr}
}

static inline void hri_port_clear_PINCFG_PULLEN_bit(const void *const hw, uint8_t submodule_index, uint8_t index)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     1b6:	2382      	movs	r3, #130	; 0x82
     1b8:	05db      	lsls	r3, r3, #23
     1ba:	2048      	movs	r0, #72	; 0x48
     1bc:	5c19      	ldrb	r1, [r3, r0]
     1be:	2204      	movs	r2, #4
     1c0:	4391      	bics	r1, r2
     1c2:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     1c4:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     1c6:	2501      	movs	r5, #1
     1c8:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     1ca:	2401      	movs	r4, #1
     1cc:	4321      	orrs	r1, r4
     1ce:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     1d0:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     1d2:	3814      	subs	r0, #20
     1d4:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     1d6:	260f      	movs	r6, #15
     1d8:	43b1      	bics	r1, r6
	tmp |= PORT_PMUX_PMUXE(data);
     1da:	3e0d      	subs	r6, #13
     1dc:	4331      	orrs	r1, r6
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     1de:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     1e0:	2149      	movs	r1, #73	; 0x49
     1e2:	5c5e      	ldrb	r6, [r3, r1]
     1e4:	4396      	bics	r6, r2
     1e6:	545e      	strb	r6, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     1e8:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     1ea:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     1ec:	4322      	orrs	r2, r4
     1ee:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     1f0:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     1f2:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     1f4:	393a      	subs	r1, #58	; 0x3a
     1f6:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     1f8:	3111      	adds	r1, #17
     1fa:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     1fc:	541a      	strb	r2, [r3, r0]
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA09, PINMUX_PA09C_SERCOM0_PAD1);
}
     1fe:	bd70      	pop	{r4, r5, r6, pc}

00000200 <I2C_0_CLOCK_init>:
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     200:	4b06      	ldr	r3, [pc, #24]	; (21c <I2C_0_CLOCK_init+0x1c>)
     202:	2140      	movs	r1, #64	; 0x40
     204:	22cc      	movs	r2, #204	; 0xcc
     206:	5099      	str	r1, [r3, r2]
     208:	3103      	adds	r1, #3
     20a:	3a04      	subs	r2, #4
     20c:	5099      	str	r1, [r3, r2]
}

static inline void hri_mclk_set_APBCMASK_SERCOM0_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM0;
     20e:	4a04      	ldr	r2, [pc, #16]	; (220 <I2C_0_CLOCK_init+0x20>)
     210:	69d3      	ldr	r3, [r2, #28]
     212:	3941      	subs	r1, #65	; 0x41
     214:	430b      	orrs	r3, r1
     216:	61d3      	str	r3, [r2, #28]
void I2C_0_CLOCK_init(void)
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_CORE, CONF_GCLK_SERCOM0_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM0_GCLK_ID_SLOW, CONF_GCLK_SERCOM0_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBCMASK_SERCOM0_bit(MCLK);
}
     218:	4770      	bx	lr
     21a:	46c0      	nop			; (mov r8, r8)
     21c:	40001c00 	.word	0x40001c00
     220:	40000800 	.word	0x40000800

00000224 <I2C_0_init>:

void I2C_0_init(void)
{
     224:	b510      	push	{r4, lr}
	I2C_0_CLOCK_init();
     226:	4b04      	ldr	r3, [pc, #16]	; (238 <I2C_0_init+0x14>)
     228:	4798      	blx	r3
	i2c_m_sync_init(&I2C_0, SERCOM0);
     22a:	4904      	ldr	r1, [pc, #16]	; (23c <I2C_0_init+0x18>)
     22c:	4804      	ldr	r0, [pc, #16]	; (240 <I2C_0_init+0x1c>)
     22e:	4b05      	ldr	r3, [pc, #20]	; (244 <I2C_0_init+0x20>)
     230:	4798      	blx	r3
	I2C_0_PORT_init();
     232:	4b05      	ldr	r3, [pc, #20]	; (248 <I2C_0_init+0x24>)
     234:	4798      	blx	r3
}
     236:	bd10      	pop	{r4, pc}
     238:	00000201 	.word	0x00000201
     23c:	42000400 	.word	0x42000400
     240:	20000730 	.word	0x20000730
     244:	000003d9 	.word	0x000003d9
     248:	000001b5 	.word	0x000001b5

0000024c <USART_0_PORT_init>:

void USART_0_PORT_init(void)
{
     24c:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     24e:	2382      	movs	r3, #130	; 0x82
     250:	05db      	lsls	r3, r3, #23
     252:	2240      	movs	r2, #64	; 0x40
     254:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     256:	2501      	movs	r5, #1
     258:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     25a:	2401      	movs	r4, #1
     25c:	4321      	orrs	r1, r4
     25e:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     260:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     262:	2030      	movs	r0, #48	; 0x30
     264:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     266:	3a31      	subs	r2, #49	; 0x31
     268:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     26a:	3a0c      	subs	r2, #12
     26c:	4311      	orrs	r1, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     26e:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     270:	2141      	movs	r1, #65	; 0x41
     272:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     274:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     276:	4322      	orrs	r2, r4
     278:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     27a:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     27c:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     27e:	3932      	subs	r1, #50	; 0x32
     280:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     282:	3121      	adds	r1, #33	; 0x21
     284:	430a      	orrs	r2, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     286:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PA00, PINMUX_PA00D_SERCOM1_PAD0);

	gpio_set_pin_function(PA01, PINMUX_PA01D_SERCOM1_PAD1);
}
     288:	bd30      	pop	{r4, r5, pc}
	...

0000028c <USART_0_CLOCK_init>:
     28c:	4b06      	ldr	r3, [pc, #24]	; (2a8 <USART_0_CLOCK_init+0x1c>)
     28e:	2140      	movs	r1, #64	; 0x40
     290:	22d0      	movs	r2, #208	; 0xd0
     292:	5099      	str	r1, [r3, r2]
     294:	3103      	adds	r1, #3
     296:	3a08      	subs	r2, #8
     298:	5099      	str	r1, [r3, r2]
}

static inline void hri_mclk_set_APBCMASK_SERCOM1_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_SERCOM1;
     29a:	4a04      	ldr	r2, [pc, #16]	; (2ac <USART_0_CLOCK_init+0x20>)
     29c:	69d3      	ldr	r3, [r2, #28]
     29e:	393f      	subs	r1, #63	; 0x3f
     2a0:	430b      	orrs	r3, r1
     2a2:	61d3      	str	r3, [r2, #28]
void USART_0_CLOCK_init(void)
{
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_gclk_write_PCHCTRL_reg(GCLK, SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC | (1 << GCLK_PCHCTRL_CHEN_Pos));
	hri_mclk_set_APBCMASK_SERCOM1_bit(MCLK);
}
     2a4:	4770      	bx	lr
     2a6:	46c0      	nop			; (mov r8, r8)
     2a8:	40001c00 	.word	0x40001c00
     2ac:	40000800 	.word	0x40000800

000002b0 <USART_0_init>:

void USART_0_init(void)
{
     2b0:	b510      	push	{r4, lr}
	USART_0_CLOCK_init();
     2b2:	4b05      	ldr	r3, [pc, #20]	; (2c8 <USART_0_init+0x18>)
     2b4:	4798      	blx	r3
	usart_sync_init(&USART_0, SERCOM1, (void *)NULL);
     2b6:	2200      	movs	r2, #0
     2b8:	4904      	ldr	r1, [pc, #16]	; (2cc <USART_0_init+0x1c>)
     2ba:	4805      	ldr	r0, [pc, #20]	; (2d0 <USART_0_init+0x20>)
     2bc:	4b05      	ldr	r3, [pc, #20]	; (2d4 <USART_0_init+0x24>)
     2be:	4798      	blx	r3
	USART_0_PORT_init();
     2c0:	4b05      	ldr	r3, [pc, #20]	; (2d8 <USART_0_init+0x28>)
     2c2:	4798      	blx	r3
}
     2c4:	bd10      	pop	{r4, pc}
     2c6:	46c0      	nop			; (mov r8, r8)
     2c8:	0000028d 	.word	0x0000028d
     2cc:	42000800 	.word	0x42000800
     2d0:	20000724 	.word	0x20000724
     2d4:	00000699 	.word	0x00000699
     2d8:	0000024d 	.word	0x0000024d

000002dc <system_init>:

void system_init(void)
{
     2dc:	b510      	push	{r4, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     2de:	4b0a      	ldr	r3, [pc, #40]	; (308 <system_init+0x2c>)
     2e0:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     2e2:	4a0a      	ldr	r2, [pc, #40]	; (30c <system_init+0x30>)
     2e4:	6951      	ldr	r1, [r2, #20]
     2e6:	2380      	movs	r3, #128	; 0x80
     2e8:	009b      	lsls	r3, r3, #2
     2ea:	430b      	orrs	r3, r1
     2ec:	6153      	str	r3, [r2, #20]
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     2ee:	4b08      	ldr	r3, [pc, #32]	; (310 <system_init+0x34>)
     2f0:	4798      	blx	r3
     2f2:	0002      	movs	r2, r0
     2f4:	4907      	ldr	r1, [pc, #28]	; (314 <system_init+0x38>)
     2f6:	4808      	ldr	r0, [pc, #32]	; (318 <system_init+0x3c>)
     2f8:	4b08      	ldr	r3, [pc, #32]	; (31c <system_init+0x40>)
     2fa:	4798      	blx	r3
	init_mcu();

	TIMER_0_init();

	I2C_0_init();
     2fc:	4b08      	ldr	r3, [pc, #32]	; (320 <system_init+0x44>)
     2fe:	4798      	blx	r3

	USART_0_init();
     300:	4b08      	ldr	r3, [pc, #32]	; (324 <system_init+0x48>)
     302:	4798      	blx	r3
}
     304:	bd10      	pop	{r4, pc}
     306:	46c0      	nop			; (mov r8, r8)
     308:	00000755 	.word	0x00000755
     30c:	40000800 	.word	0x40000800
     310:	0000089d 	.word	0x0000089d
     314:	40002400 	.word	0x40002400
     318:	20000750 	.word	0x20000750
     31c:	00000571 	.word	0x00000571
     320:	00000225 	.word	0x00000225
     324:	000002b1 	.word	0x000002b1

00000328 <I2C_Write>:
	timer_add_task(&TIMER_0, &TIMER_0_task2);
	timer_start(&TIMER_0);
}

void I2C_Write(uint8_t periph, uint16_t addr, uint8_t* ptrBuffer, uint16_t length) // third param was int ptrBuffer
{
     328:	b5f0      	push	{r4, r5, r6, r7, lr}
     32a:	b083      	sub	sp, #12
     32c:	000c      	movs	r4, r1
     32e:	0016      	movs	r6, r2
     330:	001f      	movs	r7, r3
	if(!periph){
     332:	2800      	cmp	r0, #0
     334:	d001      	beq.n	33a <I2C_Write+0x12>
// 		i2c_m_sync_enable(&I2C_1);
// 		i2c_m_sync_set_slaveaddr(&I2C_1, addr, I2C_M_SEVEN);
// 		
// 		io_write(I2C_1_io, (uint8_t *)ptrBuffer, length);
// 	}
}
     336:	b003      	add	sp, #12
     338:	bdf0      	pop	{r4, r5, r6, r7, pc}
		i2c_m_sync_get_io_descriptor(&I2C_0, &I2C_0_io);
     33a:	4d0a      	ldr	r5, [pc, #40]	; (364 <I2C_Write+0x3c>)
     33c:	a901      	add	r1, sp, #4
     33e:	0028      	movs	r0, r5
     340:	4b09      	ldr	r3, [pc, #36]	; (368 <I2C_Write+0x40>)
     342:	4798      	blx	r3
		i2c_m_sync_enable(&I2C_0);
     344:	0028      	movs	r0, r5
     346:	4b09      	ldr	r3, [pc, #36]	; (36c <I2C_Write+0x44>)
     348:	4798      	blx	r3
		i2c_m_sync_set_slaveaddr(&I2C_0, addr, I2C_M_SEVEN);
     34a:	b221      	sxth	r1, r4
     34c:	2280      	movs	r2, #128	; 0x80
     34e:	0112      	lsls	r2, r2, #4
     350:	0028      	movs	r0, r5
     352:	4b07      	ldr	r3, [pc, #28]	; (370 <I2C_Write+0x48>)
     354:	4798      	blx	r3
		io_write(I2C_0_io, (uint8_t *)ptrBuffer, length);
     356:	003a      	movs	r2, r7
     358:	0031      	movs	r1, r6
     35a:	9801      	ldr	r0, [sp, #4]
     35c:	4b05      	ldr	r3, [pc, #20]	; (374 <I2C_Write+0x4c>)
     35e:	4798      	blx	r3
}
     360:	e7e9      	b.n	336 <I2C_Write+0xe>
     362:	46c0      	nop			; (mov r8, r8)
     364:	20000730 	.word	0x20000730
     368:	00000437 	.word	0x00000437
     36c:	00000419 	.word	0x00000419
     370:	00000425 	.word	0x00000425
     374:	00000441 	.word	0x00000441

00000378 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
     378:	b510      	push	{r4, lr}
     37a:	b084      	sub	sp, #16
     37c:	0014      	movs	r4, r2
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
     37e:	ab01      	add	r3, sp, #4
     380:	3814      	subs	r0, #20
     382:	8b82      	ldrh	r2, [r0, #28]
     384:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
     386:	9402      	str	r4, [sp, #8]
	msg.flags  = I2C_M_STOP;
     388:	4a05      	ldr	r2, [pc, #20]	; (3a0 <i2c_m_sync_write+0x28>)
     38a:	805a      	strh	r2, [r3, #2]
	msg.buffer = (uint8_t *)buf;
     38c:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     38e:	0019      	movs	r1, r3
     390:	4b04      	ldr	r3, [pc, #16]	; (3a4 <i2c_m_sync_write+0x2c>)
     392:	4798      	blx	r3

	if (ret) {
     394:	2800      	cmp	r0, #0
     396:	d100      	bne.n	39a <i2c_m_sync_write+0x22>
		return ret;
	}

	return n;
     398:	0020      	movs	r0, r4
}
     39a:	b004      	add	sp, #16
     39c:	bd10      	pop	{r4, pc}
     39e:	46c0      	nop			; (mov r8, r8)
     3a0:	ffff8000 	.word	0xffff8000
     3a4:	00000b81 	.word	0x00000b81

000003a8 <i2c_m_sync_read>:
{
     3a8:	b510      	push	{r4, lr}
     3aa:	b084      	sub	sp, #16
     3ac:	0014      	movs	r4, r2
	msg.addr   = i2c->slave_addr;
     3ae:	ab01      	add	r3, sp, #4
     3b0:	3814      	subs	r0, #20
     3b2:	8b82      	ldrh	r2, [r0, #28]
     3b4:	801a      	strh	r2, [r3, #0]
	msg.len    = n;
     3b6:	9402      	str	r4, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     3b8:	4a05      	ldr	r2, [pc, #20]	; (3d0 <i2c_m_sync_read+0x28>)
     3ba:	805a      	strh	r2, [r3, #2]
	msg.buffer = buf;
     3bc:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     3be:	0019      	movs	r1, r3
     3c0:	4b04      	ldr	r3, [pc, #16]	; (3d4 <i2c_m_sync_read+0x2c>)
     3c2:	4798      	blx	r3
	if (ret) {
     3c4:	2800      	cmp	r0, #0
     3c6:	d100      	bne.n	3ca <i2c_m_sync_read+0x22>
	return n;
     3c8:	0020      	movs	r0, r4
}
     3ca:	b004      	add	sp, #16
     3cc:	bd10      	pop	{r4, pc}
     3ce:	46c0      	nop			; (mov r8, r8)
     3d0:	ffff8001 	.word	0xffff8001
     3d4:	00000b81 	.word	0x00000b81

000003d8 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
     3d8:	b570      	push	{r4, r5, r6, lr}
     3da:	0004      	movs	r4, r0
     3dc:	000d      	movs	r5, r1
	int32_t init_status;
	ASSERT(i2c);
     3de:	1e43      	subs	r3, r0, #1
     3e0:	4198      	sbcs	r0, r3
     3e2:	b2c0      	uxtb	r0, r0
     3e4:	225e      	movs	r2, #94	; 0x5e
     3e6:	4907      	ldr	r1, [pc, #28]	; (404 <i2c_m_sync_init+0x2c>)
     3e8:	4b07      	ldr	r3, [pc, #28]	; (408 <i2c_m_sync_init+0x30>)
     3ea:	4798      	blx	r3

	init_status = _i2c_m_sync_init(&i2c->device, hw);
     3ec:	0029      	movs	r1, r5
     3ee:	0020      	movs	r0, r4
     3f0:	4b06      	ldr	r3, [pc, #24]	; (40c <i2c_m_sync_init+0x34>)
     3f2:	4798      	blx	r3
	if (init_status) {
     3f4:	2800      	cmp	r0, #0
     3f6:	d103      	bne.n	400 <i2c_m_sync_init+0x28>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
     3f8:	4b05      	ldr	r3, [pc, #20]	; (410 <i2c_m_sync_init+0x38>)
     3fa:	61a3      	str	r3, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
     3fc:	4b05      	ldr	r3, [pc, #20]	; (414 <i2c_m_sync_init+0x3c>)
     3fe:	6163      	str	r3, [r4, #20]

	return ERR_NONE;
}
     400:	bd70      	pop	{r4, r5, r6, pc}
     402:	46c0      	nop			; (mov r8, r8)
     404:	00001368 	.word	0x00001368
     408:	000006e5 	.word	0x000006e5
     40c:	00000acd 	.word	0x00000acd
     410:	000003a9 	.word	0x000003a9
     414:	00000379 	.word	0x00000379

00000418 <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
     418:	b510      	push	{r4, lr}
	return _i2c_m_sync_enable(&i2c->device);
     41a:	4b01      	ldr	r3, [pc, #4]	; (420 <i2c_m_sync_enable+0x8>)
     41c:	4798      	blx	r3
}
     41e:	bd10      	pop	{r4, pc}
     420:	00000afd 	.word	0x00000afd

00000424 <i2c_m_sync_set_slaveaddr>:
/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
     424:	0589      	lsls	r1, r1, #22
     426:	0d89      	lsrs	r1, r1, #22
     428:	2380      	movs	r3, #128	; 0x80
     42a:	00db      	lsls	r3, r3, #3
     42c:	401a      	ands	r2, r3
     42e:	430a      	orrs	r2, r1
     430:	8382      	strh	r2, [r0, #28]
}
     432:	0010      	movs	r0, r2
     434:	4770      	bx	lr

00000436 <i2c_m_sync_get_io_descriptor>:
/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
	*io = &i2c->io;
     436:	3014      	adds	r0, #20
     438:	6008      	str	r0, [r1, #0]
	return ERR_NONE;
}
     43a:	2000      	movs	r0, #0
     43c:	4770      	bx	lr
	...

00000440 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     440:	b570      	push	{r4, r5, r6, lr}
     442:	0006      	movs	r6, r0
     444:	000c      	movs	r4, r1
     446:	0015      	movs	r5, r2
	ASSERT(io_descr && buf);
     448:	2800      	cmp	r0, #0
     44a:	d00d      	beq.n	468 <io_write+0x28>
     44c:	0008      	movs	r0, r1
     44e:	1e43      	subs	r3, r0, #1
     450:	4198      	sbcs	r0, r3
     452:	b2c0      	uxtb	r0, r0
     454:	2234      	movs	r2, #52	; 0x34
     456:	4905      	ldr	r1, [pc, #20]	; (46c <io_write+0x2c>)
     458:	4b05      	ldr	r3, [pc, #20]	; (470 <io_write+0x30>)
     45a:	4798      	blx	r3
	return io_descr->write(io_descr, buf, length);
     45c:	6833      	ldr	r3, [r6, #0]
     45e:	002a      	movs	r2, r5
     460:	0021      	movs	r1, r4
     462:	0030      	movs	r0, r6
     464:	4798      	blx	r3
}
     466:	bd70      	pop	{r4, r5, r6, pc}
     468:	2000      	movs	r0, #0
     46a:	e7f3      	b.n	454 <io_write+0x14>
     46c:	00001384 	.word	0x00001384
     470:	000006e5 	.word	0x000006e5

00000474 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     476:	46ce      	mov	lr, r9
     478:	4647      	mov	r7, r8
     47a:	b580      	push	{r7, lr}
     47c:	4681      	mov	r9, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     47e:	6803      	ldr	r3, [r0, #0]
     480:	469c      	mov	ip, r3
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     482:	2b00      	cmp	r3, #0
     484:	d005      	beq.n	492 <timer_add_timer_task+0x1e>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
     486:	688e      	ldr	r6, [r1, #8]
     488:	001c      	movs	r4, r3
     48a:	2500      	movs	r5, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     48c:	2701      	movs	r7, #1
     48e:	1abf      	subs	r7, r7, r2
     490:	e00d      	b.n	4ae <timer_add_timer_task+0x3a>
		list_insert_as_head(list, new_task);
     492:	4b12      	ldr	r3, [pc, #72]	; (4dc <timer_add_timer_task+0x68>)
     494:	4798      	blx	r3
		return;
     496:	e018      	b.n	4ca <timer_add_timer_task+0x56>
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     498:	18fb      	adds	r3, r7, r3
     49a:	68a0      	ldr	r0, [r4, #8]
     49c:	4680      	mov	r8, r0
     49e:	4443      	add	r3, r8
		if (time_left >= new_task->interval)
     4a0:	42b3      	cmp	r3, r6
     4a2:	d20c      	bcs.n	4be <timer_add_timer_task+0x4a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     4a4:	6823      	ldr	r3, [r4, #0]
     4a6:	0025      	movs	r5, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     4a8:	2b00      	cmp	r3, #0
     4aa:	d00b      	beq.n	4c4 <timer_add_timer_task+0x50>
     4ac:	001c      	movs	r4, r3
		if (it->time_label <= time) {
     4ae:	6863      	ldr	r3, [r4, #4]
     4b0:	4293      	cmp	r3, r2
     4b2:	d8f1      	bhi.n	498 <timer_add_timer_task+0x24>
			time_left = it->interval - (time - it->time_label);
     4b4:	68a0      	ldr	r0, [r4, #8]
     4b6:	4680      	mov	r8, r0
     4b8:	4443      	add	r3, r8
     4ba:	1a9b      	subs	r3, r3, r2
     4bc:	e7f0      	b.n	4a0 <timer_add_timer_task+0x2c>
			break;
		prev = it;
	}

	if (it == head) {
     4be:	45a4      	cmp	ip, r4
     4c0:	d007      	beq.n	4d2 <timer_add_timer_task+0x5e>
     4c2:	002c      	movs	r4, r5
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     4c4:	0020      	movs	r0, r4
     4c6:	4b06      	ldr	r3, [pc, #24]	; (4e0 <timer_add_timer_task+0x6c>)
     4c8:	4798      	blx	r3
	}
}
     4ca:	bc0c      	pop	{r2, r3}
     4cc:	4690      	mov	r8, r2
     4ce:	4699      	mov	r9, r3
     4d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     4d2:	4648      	mov	r0, r9
     4d4:	4b01      	ldr	r3, [pc, #4]	; (4dc <timer_add_timer_task+0x68>)
     4d6:	4798      	blx	r3
     4d8:	e7f7      	b.n	4ca <timer_add_timer_task+0x56>
     4da:	46c0      	nop			; (mov r8, r8)
     4dc:	00000711 	.word	0x00000711
     4e0:	0000073d 	.word	0x0000073d

000004e4 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     4e4:	b5f0      	push	{r4, r5, r6, r7, lr}
     4e6:	46c6      	mov	lr, r8
     4e8:	b500      	push	{lr}
     4ea:	b082      	sub	sp, #8
     4ec:	0007      	movs	r7, r0
	return (void *)list->head;
     4ee:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     4f0:	6903      	ldr	r3, [r0, #16]
     4f2:	3301      	adds	r3, #1
     4f4:	4698      	mov	r8, r3
     4f6:	6103      	str	r3, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     4f8:	7e03      	ldrb	r3, [r0, #24]
     4fa:	07db      	lsls	r3, r3, #31
     4fc:	d411      	bmi.n	522 <timer_process_counted+0x3e>
     4fe:	7e03      	ldrb	r3, [r0, #24]
     500:	079b      	lsls	r3, r3, #30
     502:	d40e      	bmi.n	522 <timer_process_counted+0x3e>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     504:	2c00      	cmp	r4, #0
     506:	d010      	beq.n	52a <timer_process_counted+0x46>
     508:	4643      	mov	r3, r8
     50a:	6862      	ldr	r2, [r4, #4]
     50c:	1a9b      	subs	r3, r3, r2
     50e:	68a2      	ldr	r2, [r4, #8]
     510:	4293      	cmp	r3, r2
     512:	d30a      	bcc.n	52a <timer_process_counted+0x46>
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
     514:	2314      	movs	r3, #20
     516:	469c      	mov	ip, r3
     518:	4484      	add	ip, r0
     51a:	4663      	mov	r3, ip
     51c:	9301      	str	r3, [sp, #4]
     51e:	4e12      	ldr	r6, [pc, #72]	; (568 <timer_process_counted+0x84>)
     520:	e014      	b.n	54c <timer_process_counted+0x68>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     522:	7e3b      	ldrb	r3, [r7, #24]
     524:	2202      	movs	r2, #2
     526:	4313      	orrs	r3, r2
     528:	763b      	strb	r3, [r7, #24]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
	}
}
     52a:	b002      	add	sp, #8
     52c:	bc04      	pop	{r2}
     52e:	4690      	mov	r8, r2
     530:	bdf0      	pop	{r4, r5, r6, r7, pc}
     532:	697d      	ldr	r5, [r7, #20]
		tmp->cb(tmp);
     534:	68e3      	ldr	r3, [r4, #12]
     536:	0020      	movs	r0, r4
     538:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     53a:	2d00      	cmp	r5, #0
     53c:	d0f5      	beq.n	52a <timer_process_counted+0x46>
		it = (struct timer_task *)list_get_head(&timer->tasks);
     53e:	002c      	movs	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
     540:	4643      	mov	r3, r8
     542:	686a      	ldr	r2, [r5, #4]
     544:	1a9b      	subs	r3, r3, r2
     546:	68aa      	ldr	r2, [r5, #8]
     548:	4293      	cmp	r3, r2
     54a:	d3ee      	bcc.n	52a <timer_process_counted+0x46>
		list_remove_head(&timer->tasks);
     54c:	9801      	ldr	r0, [sp, #4]
     54e:	47b0      	blx	r6
		if (TIMER_TASK_REPEAT == tmp->mode) {
     550:	7c23      	ldrb	r3, [r4, #16]
     552:	2b01      	cmp	r3, #1
     554:	d1ed      	bne.n	532 <timer_process_counted+0x4e>
			tmp->time_label = time;
     556:	4643      	mov	r3, r8
     558:	6063      	str	r3, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     55a:	4642      	mov	r2, r8
     55c:	0021      	movs	r1, r4
     55e:	9801      	ldr	r0, [sp, #4]
     560:	4b02      	ldr	r3, [pc, #8]	; (56c <timer_process_counted+0x88>)
     562:	4798      	blx	r3
     564:	e7e5      	b.n	532 <timer_process_counted+0x4e>
     566:	46c0      	nop			; (mov r8, r8)
     568:	00000745 	.word	0x00000745
     56c:	00000475 	.word	0x00000475

00000570 <timer_init>:
{
     570:	b570      	push	{r4, r5, r6, lr}
     572:	0005      	movs	r5, r0
     574:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     576:	2800      	cmp	r0, #0
     578:	d011      	beq.n	59e <timer_init+0x2e>
     57a:	0008      	movs	r0, r1
     57c:	1e43      	subs	r3, r0, #1
     57e:	4198      	sbcs	r0, r3
     580:	b2c0      	uxtb	r0, r0
     582:	223b      	movs	r2, #59	; 0x3b
     584:	4907      	ldr	r1, [pc, #28]	; (5a4 <timer_init+0x34>)
     586:	4b08      	ldr	r3, [pc, #32]	; (5a8 <timer_init+0x38>)
     588:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     58a:	0021      	movs	r1, r4
     58c:	0028      	movs	r0, r5
     58e:	4b07      	ldr	r3, [pc, #28]	; (5ac <timer_init+0x3c>)
     590:	4798      	blx	r3
	descr->time                           = 0;
     592:	2300      	movs	r3, #0
     594:	612b      	str	r3, [r5, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     596:	4b06      	ldr	r3, [pc, #24]	; (5b0 <timer_init+0x40>)
     598:	602b      	str	r3, [r5, #0]
}
     59a:	2000      	movs	r0, #0
     59c:	bd70      	pop	{r4, r5, r6, pc}
     59e:	2000      	movs	r0, #0
     5a0:	e7ef      	b.n	582 <timer_init+0x12>
     5a2:	46c0      	nop			; (mov r8, r8)
     5a4:	00001398 	.word	0x00001398
     5a8:	000006e5 	.word	0x000006e5
     5ac:	00000831 	.word	0x00000831
     5b0:	000004e5 	.word	0x000004e5

000005b4 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     5b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     5b6:	46ce      	mov	lr, r9
     5b8:	4647      	mov	r7, r8
     5ba:	b580      	push	{r7, lr}
     5bc:	0004      	movs	r4, r0
     5be:	000f      	movs	r7, r1
     5c0:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     5c2:	2800      	cmp	r0, #0
     5c4:	d026      	beq.n	614 <usart_sync_write+0x60>
     5c6:	2900      	cmp	r1, #0
     5c8:	d026      	beq.n	618 <usart_sync_write+0x64>
     5ca:	0010      	movs	r0, r2
     5cc:	1e43      	subs	r3, r0, #1
     5ce:	4198      	sbcs	r0, r3
     5d0:	22f1      	movs	r2, #241	; 0xf1
     5d2:	4912      	ldr	r1, [pc, #72]	; (61c <usart_sync_write+0x68>)
     5d4:	4b12      	ldr	r3, [pc, #72]	; (620 <usart_sync_write+0x6c>)
     5d6:	4798      	blx	r3
	while (!_usart_sync_is_ready_to_send(&descr->device))
     5d8:	3408      	adds	r4, #8
     5da:	4d12      	ldr	r5, [pc, #72]	; (624 <usart_sync_write+0x70>)
     5dc:	0020      	movs	r0, r4
     5de:	47a8      	blx	r5
     5e0:	2800      	cmp	r0, #0
     5e2:	d0fb      	beq.n	5dc <usart_sync_write+0x28>
     5e4:	2600      	movs	r6, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     5e6:	4b10      	ldr	r3, [pc, #64]	; (628 <usart_sync_write+0x74>)
     5e8:	4699      	mov	r9, r3
		while (!_usart_sync_is_ready_to_send(&descr->device))
     5ea:	4d0e      	ldr	r5, [pc, #56]	; (624 <usart_sync_write+0x70>)
		_usart_sync_write_byte(&descr->device, buf[offset]);
     5ec:	5db9      	ldrb	r1, [r7, r6]
     5ee:	0020      	movs	r0, r4
     5f0:	47c8      	blx	r9
		while (!_usart_sync_is_ready_to_send(&descr->device))
     5f2:	0020      	movs	r0, r4
     5f4:	47a8      	blx	r5
     5f6:	2800      	cmp	r0, #0
     5f8:	d0fb      	beq.n	5f2 <usart_sync_write+0x3e>
			;
	} while (++offset < length);
     5fa:	3601      	adds	r6, #1
     5fc:	4546      	cmp	r6, r8
     5fe:	d3f5      	bcc.n	5ec <usart_sync_write+0x38>
	while (!_usart_sync_is_transmit_done(&descr->device))
     600:	4d0a      	ldr	r5, [pc, #40]	; (62c <usart_sync_write+0x78>)
     602:	0020      	movs	r0, r4
     604:	47a8      	blx	r5
     606:	2800      	cmp	r0, #0
     608:	d0fb      	beq.n	602 <usart_sync_write+0x4e>
		;
	return (int32_t)offset;
}
     60a:	0030      	movs	r0, r6
     60c:	bc0c      	pop	{r2, r3}
     60e:	4690      	mov	r8, r2
     610:	4699      	mov	r9, r3
     612:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     614:	2000      	movs	r0, #0
     616:	e7db      	b.n	5d0 <usart_sync_write+0x1c>
     618:	2000      	movs	r0, #0
     61a:	e7d9      	b.n	5d0 <usart_sync_write+0x1c>
     61c:	000013b0 	.word	0x000013b0
     620:	000006e5 	.word	0x000006e5
     624:	00000aad 	.word	0x00000aad
     628:	00000a9d 	.word	0x00000a9d
     62c:	00000ab7 	.word	0x00000ab7

00000630 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     632:	46ce      	mov	lr, r9
     634:	4647      	mov	r7, r8
     636:	b580      	push	{r7, lr}
     638:	0004      	movs	r4, r0
     63a:	000f      	movs	r7, r1
     63c:	4690      	mov	r8, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     63e:	2800      	cmp	r0, #0
     640:	d01d      	beq.n	67e <usart_sync_read+0x4e>
     642:	2900      	cmp	r1, #0
     644:	d01d      	beq.n	682 <usart_sync_read+0x52>
     646:	0010      	movs	r0, r2
     648:	1e43      	subs	r3, r0, #1
     64a:	4198      	sbcs	r0, r3
     64c:	2286      	movs	r2, #134	; 0x86
     64e:	0052      	lsls	r2, r2, #1
     650:	490d      	ldr	r1, [pc, #52]	; (688 <usart_sync_read+0x58>)
     652:	4b0e      	ldr	r3, [pc, #56]	; (68c <usart_sync_read+0x5c>)
     654:	4798      	blx	r3
	uint32_t                      offset = 0;
     656:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     658:	3408      	adds	r4, #8
     65a:	4d0d      	ldr	r5, [pc, #52]	; (690 <usart_sync_read+0x60>)
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     65c:	4b0d      	ldr	r3, [pc, #52]	; (694 <usart_sync_read+0x64>)
     65e:	4699      	mov	r9, r3
		while (!_usart_sync_is_byte_received(&descr->device))
     660:	0020      	movs	r0, r4
     662:	47a8      	blx	r5
     664:	2800      	cmp	r0, #0
     666:	d0fb      	beq.n	660 <usart_sync_read+0x30>
		buf[offset] = _usart_sync_read_byte(&descr->device);
     668:	0020      	movs	r0, r4
     66a:	47c8      	blx	r9
     66c:	55b8      	strb	r0, [r7, r6]
	} while (++offset < length);
     66e:	3601      	adds	r6, #1
     670:	4546      	cmp	r6, r8
     672:	d3f5      	bcc.n	660 <usart_sync_read+0x30>

	return (int32_t)offset;
}
     674:	0030      	movs	r0, r6
     676:	bc0c      	pop	{r2, r3}
     678:	4690      	mov	r8, r2
     67a:	4699      	mov	r9, r3
     67c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     67e:	2000      	movs	r0, #0
     680:	e7e4      	b.n	64c <usart_sync_read+0x1c>
     682:	2000      	movs	r0, #0
     684:	e7e2      	b.n	64c <usart_sync_read+0x1c>
     686:	46c0      	nop			; (mov r8, r8)
     688:	000013b0 	.word	0x000013b0
     68c:	000006e5 	.word	0x000006e5
     690:	00000ac1 	.word	0x00000ac1
     694:	00000aa5 	.word	0x00000aa5

00000698 <usart_sync_init>:
{
     698:	b570      	push	{r4, r5, r6, lr}
     69a:	0005      	movs	r5, r0
     69c:	000c      	movs	r4, r1
	ASSERT(descr && hw);
     69e:	2800      	cmp	r0, #0
     6a0:	d013      	beq.n	6ca <usart_sync_init+0x32>
     6a2:	0008      	movs	r0, r1
     6a4:	1e43      	subs	r3, r0, #1
     6a6:	4198      	sbcs	r0, r3
     6a8:	b2c0      	uxtb	r0, r0
     6aa:	2234      	movs	r2, #52	; 0x34
     6ac:	4908      	ldr	r1, [pc, #32]	; (6d0 <usart_sync_init+0x38>)
     6ae:	4b09      	ldr	r3, [pc, #36]	; (6d4 <usart_sync_init+0x3c>)
     6b0:	4798      	blx	r3
	init_status = _usart_sync_init(&descr->device, hw);
     6b2:	0028      	movs	r0, r5
     6b4:	3008      	adds	r0, #8
     6b6:	0021      	movs	r1, r4
     6b8:	4b07      	ldr	r3, [pc, #28]	; (6d8 <usart_sync_init+0x40>)
     6ba:	4798      	blx	r3
	if (init_status) {
     6bc:	2800      	cmp	r0, #0
     6be:	d103      	bne.n	6c8 <usart_sync_init+0x30>
	descr->io.read  = usart_sync_read;
     6c0:	4b06      	ldr	r3, [pc, #24]	; (6dc <usart_sync_init+0x44>)
     6c2:	606b      	str	r3, [r5, #4]
	descr->io.write = usart_sync_write;
     6c4:	4b06      	ldr	r3, [pc, #24]	; (6e0 <usart_sync_init+0x48>)
     6c6:	602b      	str	r3, [r5, #0]
}
     6c8:	bd70      	pop	{r4, r5, r6, pc}
     6ca:	2000      	movs	r0, #0
     6cc:	e7ed      	b.n	6aa <usart_sync_init+0x12>
     6ce:	46c0      	nop			; (mov r8, r8)
     6d0:	000013b0 	.word	0x000013b0
     6d4:	000006e5 	.word	0x000006e5
     6d8:	00000a71 	.word	0x00000a71
     6dc:	00000631 	.word	0x00000631
     6e0:	000005b5 	.word	0x000005b5

000006e4 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     6e4:	2800      	cmp	r0, #0
     6e6:	d100      	bne.n	6ea <assert+0x6>
		__asm("BKPT #0");
     6e8:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     6ea:	4770      	bx	lr

000006ec <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     6ec:	6803      	ldr	r3, [r0, #0]
     6ee:	2b00      	cmp	r3, #0
     6f0:	d00a      	beq.n	708 <is_list_element+0x1c>
		if (it == element) {
     6f2:	428b      	cmp	r3, r1
     6f4:	d00a      	beq.n	70c <is_list_element+0x20>
	for (it = list->head; it; it = it->next) {
     6f6:	681b      	ldr	r3, [r3, #0]
     6f8:	2b00      	cmp	r3, #0
     6fa:	d003      	beq.n	704 <is_list_element+0x18>
		if (it == element) {
     6fc:	4299      	cmp	r1, r3
     6fe:	d1fa      	bne.n	6f6 <is_list_element+0xa>
			return true;
     700:	2001      	movs	r0, #1
     702:	e000      	b.n	706 <is_list_element+0x1a>
		}
	}

	return false;
     704:	2000      	movs	r0, #0
}
     706:	4770      	bx	lr
	return false;
     708:	2000      	movs	r0, #0
     70a:	e7fc      	b.n	706 <is_list_element+0x1a>
			return true;
     70c:	2001      	movs	r0, #1
     70e:	e7fa      	b.n	706 <is_list_element+0x1a>

00000710 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     710:	b570      	push	{r4, r5, r6, lr}
     712:	0004      	movs	r4, r0
     714:	000d      	movs	r5, r1
	ASSERT(!is_list_element(list, element));
     716:	4b06      	ldr	r3, [pc, #24]	; (730 <list_insert_as_head+0x20>)
     718:	4798      	blx	r3
     71a:	2301      	movs	r3, #1
     71c:	4058      	eors	r0, r3
     71e:	b2c0      	uxtb	r0, r0
     720:	2239      	movs	r2, #57	; 0x39
     722:	4904      	ldr	r1, [pc, #16]	; (734 <list_insert_as_head+0x24>)
     724:	4b04      	ldr	r3, [pc, #16]	; (738 <list_insert_as_head+0x28>)
     726:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     728:	6823      	ldr	r3, [r4, #0]
     72a:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     72c:	6025      	str	r5, [r4, #0]
}
     72e:	bd70      	pop	{r4, r5, r6, pc}
     730:	000006ed 	.word	0x000006ed
     734:	000013cc 	.word	0x000013cc
     738:	000006e5 	.word	0x000006e5

0000073c <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     73c:	6803      	ldr	r3, [r0, #0]
     73e:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     740:	6001      	str	r1, [r0, #0]
}
     742:	4770      	bx	lr

00000744 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     744:	6803      	ldr	r3, [r0, #0]
     746:	2b00      	cmp	r3, #0
     748:	d001      	beq.n	74e <list_remove_head+0xa>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     74a:	681a      	ldr	r2, [r3, #0]
     74c:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
     74e:	0018      	movs	r0, r3
     750:	4770      	bx	lr
	...

00000754 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     754:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     756:	4b08      	ldr	r3, [pc, #32]	; (778 <_init_chip+0x24>)
     758:	685a      	ldr	r2, [r3, #4]
     75a:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     75c:	4b07      	ldr	r3, [pc, #28]	; (77c <_init_chip+0x28>)
     75e:	4798      	blx	r3
	_oscctrl_init_sources();
     760:	4b07      	ldr	r3, [pc, #28]	; (780 <_init_chip+0x2c>)
     762:	4798      	blx	r3
	_mclk_init();
     764:	4b07      	ldr	r3, [pc, #28]	; (784 <_init_chip+0x30>)
     766:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     768:	4b07      	ldr	r3, [pc, #28]	; (788 <_init_chip+0x34>)
     76a:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     76c:	20ff      	movs	r0, #255	; 0xff
     76e:	4b07      	ldr	r3, [pc, #28]	; (78c <_init_chip+0x38>)
     770:	4798      	blx	r3

	_div_init();
     772:	4b07      	ldr	r3, [pc, #28]	; (790 <_init_chip+0x3c>)
     774:	4798      	blx	r3
#endif

#if (CONF_PORT_EVCTRL_PORT_0 | CONF_PORT_EVCTRL_PORT_1 | CONF_PORT_EVCTRL_PORT_2 | CONF_PORT_EVCTRL_PORT_3)
	_port_event_init();
#endif
}
     776:	bd10      	pop	{r4, pc}
     778:	41004000 	.word	0x41004000
     77c:	000007d5 	.word	0x000007d5
     780:	000007ed 	.word	0x000007ed
     784:	000007c9 	.word	0x000007c9
     788:	0000082d 	.word	0x0000082d
     78c:	000007a5 	.word	0x000007a5
     790:	00000795 	.word	0x00000795

00000794 <_div_init>:

static inline void hri_divas_write_CTRLA_DLZ_bit(const void *const hw, bool value)
{
	uint8_t tmp;
	DIVAS_CRITICAL_SECTION_ENTER();
	tmp = ((Divas *)hw)->CTRLA.reg;
     794:	2290      	movs	r2, #144	; 0x90
     796:	05d2      	lsls	r2, r2, #23
     798:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~DIVAS_CTRLA_DLZ;
     79a:	2102      	movs	r1, #2
     79c:	438b      	bics	r3, r1
	tmp |= value << DIVAS_CTRLA_DLZ_Pos;
	((Divas *)hw)->CTRLA.reg = tmp;
     79e:	7013      	strb	r3, [r2, #0]
 * \brief Initialize hardware for division operation
 */
void _div_init(void)
{
	hri_divas_write_CTRLA_DLZ_bit(DIVAS, CONF_DIVAS_DLZ);
}
     7a0:	4770      	bx	lr
	...

000007a4 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     7a4:	07c3      	lsls	r3, r0, #31
     7a6:	d507      	bpl.n	7b8 <_gclk_init_generators_by_fref+0x14>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     7a8:	4a04      	ldr	r2, [pc, #16]	; (7bc <_gclk_init_generators_by_fref+0x18>)
     7aa:	4b05      	ldr	r3, [pc, #20]	; (7c0 <_gclk_init_generators_by_fref+0x1c>)
     7ac:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     7ae:	0019      	movs	r1, r3
     7b0:	4a04      	ldr	r2, [pc, #16]	; (7c4 <_gclk_init_generators_by_fref+0x20>)
     7b2:	684b      	ldr	r3, [r1, #4]
     7b4:	4213      	tst	r3, r2
     7b6:	d1fc      	bne.n	7b2 <_gclk_init_generators_by_fref+0xe>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SOURCE);
	}
#endif
}
     7b8:	4770      	bx	lr
     7ba:	46c0      	nop			; (mov r8, r8)
     7bc:	00010106 	.word	0x00010106
     7c0:	40001c00 	.word	0x40001c00
     7c4:	000007fd 	.word	0x000007fd

000007c8 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     7c8:	2201      	movs	r2, #1
     7ca:	4b01      	ldr	r3, [pc, #4]	; (7d0 <_mclk_init+0x8>)
     7cc:	711a      	strb	r2, [r3, #4]
 */
void _mclk_init(void)
{
	void *hw = (void *)MCLK;
	hri_mclk_write_CPUDIV_reg(hw, MCLK_CPUDIV_CPUDIV(CONF_MCLK_CPUDIV));
}
     7ce:	4770      	bx	lr
     7d0:	40000800 	.word	0x40000800

000007d4 <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     7d4:	4b04      	ldr	r3, [pc, #16]	; (7e8 <_osc32kctrl_init_sources+0x14>)
     7d6:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSC32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSC32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     7d8:	21f8      	movs	r1, #248	; 0xf8
     7da:	0149      	lsls	r1, r1, #5
     7dc:	400a      	ands	r2, r1
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     7de:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     7e0:	2201      	movs	r2, #1
     7e2:	611a      	str	r2, [r3, #16]
		;
#endif
#endif
	hri_osc32kctrl_write_RTCCTRL_reg(hw, OSC32KCTRL_RTCCTRL_RTCSEL(CONF_RTCCTRL));
	(void)calib;
}
     7e4:	4770      	bx	lr
     7e6:	46c0      	nop			; (mov r8, r8)
     7e8:	40001400 	.word	0x40001400

000007ec <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_OSC48MCTRL_reg(const void *const hw, hri_oscctrl_osc48mctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MCTRL.reg = data;
     7ec:	4b0e      	ldr	r3, [pc, #56]	; (828 <_oscctrl_init_sources+0x3c>)
     7ee:	2202      	movs	r2, #2
     7f0:	751a      	strb	r2, [r3, #20]
}

static inline void hri_oscctrl_write_OSC48MDIV_reg(const void *const hw, hri_oscctrl_osc48mdiv_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MDIV.reg = data;
     7f2:	3209      	adds	r2, #9
     7f4:	755a      	strb	r2, [r3, #21]
	while (((Oscctrl *)hw)->OSC48MSYNCBUSY.reg & reg) {
     7f6:	0019      	movs	r1, r3
     7f8:	3a07      	subs	r2, #7
     7fa:	698b      	ldr	r3, [r1, #24]
     7fc:	421a      	tst	r2, r3
     7fe:	d1fc      	bne.n	7fa <_oscctrl_init_sources+0xe>
	return (((Oscctrl *)hw)->OSC48MSYNCBUSY.reg & OSCCTRL_OSC48MSYNCBUSY_OSC48MDIV)
     800:	4909      	ldr	r1, [pc, #36]	; (828 <_oscctrl_init_sources+0x3c>)
#if CONF_OSC48M_CONFIG == 1
	hri_oscctrl_write_OSC48MCTRL_reg(hw,
	                                 (CONF_OSC48M_RUNSTDBY << OSCCTRL_OSC48MCTRL_RUNSTDBY_Pos)
	                                     | (CONF_OSC48M_ENABLE << OSCCTRL_OSC48MCTRL_ENABLE_Pos));
	hri_oscctrl_write_OSC48MDIV_reg(hw, OSCCTRL_OSC48MDIV_DIV(CONF_OSC48M_DIV));
	while (hri_oscctrl_get_OSC48MSYNCBUSY_OSC48MDIV_bit(hw))
     802:	2204      	movs	r2, #4
     804:	698b      	ldr	r3, [r1, #24]
     806:	421a      	tst	r2, r3
     808:	d1fc      	bne.n	804 <_oscctrl_init_sources+0x18>
}

static inline void hri_oscctrl_write_OSC48MSTUP_reg(const void *const hw, hri_oscctrl_osc48mstup_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->OSC48MSTUP.reg = data;
     80a:	2207      	movs	r2, #7
     80c:	4b06      	ldr	r3, [pc, #24]	; (828 <_oscctrl_init_sources+0x3c>)
     80e:	759a      	strb	r2, [r3, #22]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_OSC48MRDY) >> OSCCTRL_STATUS_OSC48MRDY_Pos;
     810:	0019      	movs	r1, r3
#endif
#endif

#if CONF_OSC48M_CONFIG == 1
#if CONF_OSC48M_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_OSC48MRDY_bit(hw))
     812:	3209      	adds	r2, #9
     814:	68cb      	ldr	r3, [r1, #12]
     816:	421a      	tst	r2, r3
     818:	d0fc      	beq.n	814 <_oscctrl_init_sources+0x28>
	((Oscctrl *)hw)->OSC48MCTRL.reg |= OSCCTRL_OSC48MCTRL_ONDEMAND;
     81a:	4a03      	ldr	r2, [pc, #12]	; (828 <_oscctrl_init_sources+0x3c>)
     81c:	7d13      	ldrb	r3, [r2, #20]
     81e:	2180      	movs	r1, #128	; 0x80
     820:	430b      	orrs	r3, r1
     822:	7513      	strb	r3, [r2, #20]
#if CONF_OSC48M_ONDEMAND == 1
	hri_oscctrl_set_OSC48MCTRL_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
     824:	4770      	bx	lr
     826:	46c0      	nop			; (mov r8, r8)
     828:	40001000 	.word	0x40001000

0000082c <_oscctrl_init_referenced_generators>:
#if CONF_DPLL_ONDEMAND == 1
	hri_oscctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif
	(void)hw;
}
     82c:	4770      	bx	lr
	...

00000830 <_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _timer_init(struct _timer_device *const dev, void *const hw)
{
     830:	b570      	push	{r4, r5, r6, lr}
     832:	0005      	movs	r5, r0
     834:	000c      	movs	r4, r1
	ASSERT(dev);
     836:	1e43      	subs	r3, r0, #1
     838:	4198      	sbcs	r0, r3
     83a:	b2c0      	uxtb	r0, r0
     83c:	2230      	movs	r2, #48	; 0x30
     83e:	4912      	ldr	r1, [pc, #72]	; (888 <_timer_init+0x58>)
     840:	4b12      	ldr	r3, [pc, #72]	; (88c <_timer_init+0x5c>)
     842:	4798      	blx	r3

	dev->hw = hw;
     844:	60ec      	str	r4, [r5, #12]
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
     846:	2301      	movs	r3, #1
     848:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
     84a:	4a11      	ldr	r2, [pc, #68]	; (890 <_timer_init+0x60>)
     84c:	6923      	ldr	r3, [r4, #16]
     84e:	4213      	tst	r3, r2
     850:	d1fc      	bne.n	84c <_timer_init+0x1c>

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
     852:	68eb      	ldr	r3, [r5, #12]
     854:	2101      	movs	r1, #1
     856:	691a      	ldr	r2, [r3, #16]
     858:	4211      	tst	r1, r2
     85a:	d1fc      	bne.n	856 <_timer_init+0x26>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
     85c:	4a0d      	ldr	r2, [pc, #52]	; (894 <_timer_init+0x64>)
     85e:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
     860:	490b      	ldr	r1, [pc, #44]	; (890 <_timer_init+0x60>)
     862:	691a      	ldr	r2, [r3, #16]
     864:	420a      	tst	r2, r1
     866:	d1fc      	bne.n	862 <_timer_init+0x32>
	        | (CONF_RTC_COMPE0 << RTC_MODE0_EVCTRL_CMPEO_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
     868:	68ea      	ldr	r2, [r5, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
     86a:	2320      	movs	r3, #32
     86c:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
     86e:	2120      	movs	r1, #32
     870:	6913      	ldr	r3, [r2, #16]
     872:	4219      	tst	r1, r3
     874:	d1fc      	bne.n	870 <_timer_init+0x40>
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
     876:	2380      	movs	r3, #128	; 0x80
     878:	005b      	lsls	r3, r3, #1
     87a:	68ea      	ldr	r2, [r5, #12]
     87c:	8153      	strh	r3, [r2, #10]
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);

	_rtc_dev = dev;
     87e:	4b06      	ldr	r3, [pc, #24]	; (898 <_timer_init+0x68>)
     880:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
     882:	2000      	movs	r0, #0
     884:	bd70      	pop	{r4, r5, r6, pc}
     886:	46c0      	nop			; (mov r8, r8)
     888:	000013ec 	.word	0x000013ec
     88c:	000006e5 	.word	0x000006e5
     890:	00008003 	.word	0x00008003
     894:	ffff8080 	.word	0xffff8080
     898:	2000031c 	.word	0x2000031c

0000089c <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
     89c:	2000      	movs	r0, #0
     89e:	4770      	bx	lr

000008a0 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
     8a0:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
     8a2:	4b08      	ldr	r3, [pc, #32]	; (8c4 <RTC_Handler+0x24>)
     8a4:	681c      	ldr	r4, [r3, #0]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
     8a6:	68e3      	ldr	r3, [r4, #12]
     8a8:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
     8aa:	05db      	lsls	r3, r3, #23
     8ac:	d508      	bpl.n	8c0 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
     8ae:	6823      	ldr	r3, [r4, #0]
     8b0:	2b00      	cmp	r3, #0
     8b2:	d001      	beq.n	8b8 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
     8b4:	0020      	movs	r0, r4
     8b6:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
     8b8:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
     8ba:	2280      	movs	r2, #128	; 0x80
     8bc:	0052      	lsls	r2, r2, #1
     8be:	819a      	strh	r2, [r3, #12]
}
     8c0:	bd10      	pop	{r4, pc}
     8c2:	46c0      	nop			; (mov r8, r8)
     8c4:	2000031c 	.word	0x2000031c

000008c8 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
     8c8:	b510      	push	{r4, lr}
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     8ca:	4b08      	ldr	r3, [pc, #32]	; (8ec <_get_i2cm_index+0x24>)
     8cc:	469c      	mov	ip, r3
     8ce:	4460      	add	r0, ip
     8d0:	0a80      	lsrs	r0, r0, #10
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
		if (_i2cms[i].number == sercom_offset) {
     8d2:	b2c0      	uxtb	r0, r0
     8d4:	2800      	cmp	r0, #0
     8d6:	d007      	beq.n	8e8 <_get_i2cm_index+0x20>
			return i;
		}
	}

	ASSERT(false);
     8d8:	22e6      	movs	r2, #230	; 0xe6
     8da:	0092      	lsls	r2, r2, #2
     8dc:	4904      	ldr	r1, [pc, #16]	; (8f0 <_get_i2cm_index+0x28>)
     8de:	2000      	movs	r0, #0
     8e0:	4b04      	ldr	r3, [pc, #16]	; (8f4 <_get_i2cm_index+0x2c>)
     8e2:	4798      	blx	r3
	return -1;
     8e4:	2001      	movs	r0, #1
     8e6:	4240      	negs	r0, r0
}
     8e8:	bd10      	pop	{r4, pc}
     8ea:	46c0      	nop			; (mov r8, r8)
     8ec:	bdfffc00 	.word	0xbdfffc00
     8f0:	0000141c 	.word	0x0000141c
     8f4:	000006e5 	.word	0x000006e5

000008f8 <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
     8f8:	b570      	push	{r4, r5, r6, lr}
     8fa:	0005      	movs	r5, r0
     8fc:	000c      	movs	r4, r1
	uint8_t i = _get_i2cm_index(hw);
     8fe:	0008      	movs	r0, r1
     900:	4b31      	ldr	r3, [pc, #196]	; (9c8 <_i2c_m_sync_init_impl+0xd0>)
     902:	4798      	blx	r3
     904:	b2c0      	uxtb	r0, r0
	};
}

static inline bool hri_sercomi2cm_is_syncing(const void *const hw, hri_sercomi2cm_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
     906:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
     908:	07db      	lsls	r3, r3, #31
     90a:	d421      	bmi.n	950 <_i2c_m_sync_init_impl+0x58>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
     90c:	0043      	lsls	r3, r0, #1
     90e:	181b      	adds	r3, r3, r0
     910:	00db      	lsls	r3, r3, #3
     912:	4a2e      	ldr	r2, [pc, #184]	; (9cc <_i2c_m_sync_init_impl+0xd4>)
     914:	18d3      	adds	r3, r2, r3
     916:	6859      	ldr	r1, [r3, #4]
     918:	231c      	movs	r3, #28
     91a:	4019      	ands	r1, r3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     91c:	2203      	movs	r2, #3
     91e:	69e3      	ldr	r3, [r4, #28]
     920:	421a      	tst	r2, r3
     922:	d1fc      	bne.n	91e <_i2c_m_sync_init_impl+0x26>
static inline hri_sercomi2cm_ctrla_reg_t hri_sercomi2cm_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cm_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST | SERCOM_I2CM_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     924:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
     926:	079b      	lsls	r3, r3, #30
     928:	d50b      	bpl.n	942 <_i2c_m_sync_init_impl+0x4a>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
     92a:	6823      	ldr	r3, [r4, #0]
     92c:	2202      	movs	r2, #2
     92e:	4393      	bics	r3, r2
     930:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     932:	3201      	adds	r2, #1
     934:	69e3      	ldr	r3, [r4, #28]
     936:	421a      	tst	r2, r3
     938:	d1fc      	bne.n	934 <_i2c_m_sync_init_impl+0x3c>
     93a:	2202      	movs	r2, #2
     93c:	69e3      	ldr	r3, [r4, #28]
     93e:	421a      	tst	r2, r3
     940:	d1fc      	bne.n	93c <_i2c_m_sync_init_impl+0x44>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
     942:	2301      	movs	r3, #1
     944:	430b      	orrs	r3, r1
}

static inline void hri_sercomi2cm_write_CTRLA_reg(const void *const hw, hri_sercomi2cm_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
     946:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     948:	2203      	movs	r2, #3
     94a:	69e3      	ldr	r3, [r4, #28]
     94c:	421a      	tst	r2, r3
     94e:	d1fc      	bne.n	94a <_i2c_m_sync_init_impl+0x52>
     950:	2201      	movs	r2, #1
     952:	69e3      	ldr	r3, [r4, #28]
     954:	421a      	tst	r2, r3
     956:	d1fc      	bne.n	952 <_i2c_m_sync_init_impl+0x5a>
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
     958:	0043      	lsls	r3, r0, #1
     95a:	181b      	adds	r3, r3, r0
     95c:	00db      	lsls	r3, r3, #3
     95e:	4a1b      	ldr	r2, [pc, #108]	; (9cc <_i2c_m_sync_init_impl+0xd4>)
     960:	18d3      	adds	r3, r2, r3
     962:	6859      	ldr	r1, [r3, #4]
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
     964:	6021      	str	r1, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     966:	2203      	movs	r2, #3
     968:	69e3      	ldr	r3, [r4, #28]
     96a:	421a      	tst	r2, r3
     96c:	d1fc      	bne.n	968 <_i2c_m_sync_init_impl+0x70>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
     96e:	0043      	lsls	r3, r0, #1
     970:	181b      	adds	r3, r3, r0
     972:	00db      	lsls	r3, r3, #3
     974:	4a15      	ldr	r2, [pc, #84]	; (9cc <_i2c_m_sync_init_impl+0xd4>)
     976:	18d3      	adds	r3, r2, r3
     978:	689b      	ldr	r3, [r3, #8]
}

static inline void hri_sercomi2cm_write_CTRLB_reg(const void *const hw, hri_sercomi2cm_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
     97a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     97c:	2207      	movs	r2, #7
     97e:	69e3      	ldr	r3, [r4, #28]
     980:	421a      	tst	r2, r3
     982:	d1fc      	bne.n	97e <_i2c_m_sync_init_impl+0x86>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
     984:	0043      	lsls	r3, r0, #1
     986:	181b      	adds	r3, r3, r0
     988:	00db      	lsls	r3, r3, #3
     98a:	4a10      	ldr	r2, [pc, #64]	; (9cc <_i2c_m_sync_init_impl+0xd4>)
     98c:	18d3      	adds	r3, r2, r3
     98e:	68db      	ldr	r3, [r3, #12]
}

static inline void hri_sercomi2cm_write_BAUD_reg(const void *const hw, hri_sercomi2cm_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.BAUD.reg = data;
     990:	60e3      	str	r3, [r4, #12]

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
     992:	0189      	lsls	r1, r1, #6
     994:	0f89      	lsrs	r1, r1, #30
     996:	81a9      	strh	r1, [r5, #12]

static inline void hri_sercomi2cm_write_ADDR_HS_bit(const void *const hw, bool value)
{
	uint32_t tmp;
	SERCOM_CRITICAL_SECTION_ENTER();
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
     998:	6a63      	ldr	r3, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
     99a:	4e0d      	ldr	r6, [pc, #52]	; (9d0 <_i2c_m_sync_init_impl+0xd8>)
     99c:	401e      	ands	r6, r3
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
     99e:	2301      	movs	r3, #1
     9a0:	428b      	cmp	r3, r1
     9a2:	419b      	sbcs	r3, r3
     9a4:	425b      	negs	r3, r3
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
     9a6:	039b      	lsls	r3, r3, #14
     9a8:	4333      	orrs	r3, r6
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
     9aa:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     9ac:	2204      	movs	r2, #4
     9ae:	69e3      	ldr	r3, [r4, #28]
     9b0:	421a      	tst	r2, r3
     9b2:	d1fc      	bne.n	9ae <_i2c_m_sync_init_impl+0xb6>

	service->trise = _i2cms[i].trise;
     9b4:	0043      	lsls	r3, r0, #1
     9b6:	1818      	adds	r0, r3, r0
     9b8:	00c0      	lsls	r0, r0, #3
     9ba:	4b04      	ldr	r3, [pc, #16]	; (9cc <_i2c_m_sync_init_impl+0xd4>)
     9bc:	1818      	adds	r0, r3, r0
     9be:	8a43      	ldrh	r3, [r0, #18]
     9c0:	81eb      	strh	r3, [r5, #14]

	return ERR_NONE;
}
     9c2:	2000      	movs	r0, #0
     9c4:	bd70      	pop	{r4, r5, r6, pc}
     9c6:	46c0      	nop			; (mov r8, r8)
     9c8:	000008c9 	.word	0x000008c9
     9cc:	00001404 	.word	0x00001404
     9d0:	ffffbfff 	.word	0xffffbfff

000009d4 <_usart_init>:
{
     9d4:	b510      	push	{r4, lr}
     9d6:	0004      	movs	r4, r0
	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     9d8:	4b1f      	ldr	r3, [pc, #124]	; (a58 <_usart_init+0x84>)
     9da:	18c3      	adds	r3, r0, r3
     9dc:	0a9b      	lsrs	r3, r3, #10
		if (_usarts[i].number == sercom_offset) {
     9de:	b2db      	uxtb	r3, r3
     9e0:	2b01      	cmp	r3, #1
     9e2:	d004      	beq.n	9ee <_usart_init+0x1a>
	ASSERT(false);
     9e4:	4a1d      	ldr	r2, [pc, #116]	; (a5c <_usart_init+0x88>)
     9e6:	491e      	ldr	r1, [pc, #120]	; (a60 <_usart_init+0x8c>)
     9e8:	2000      	movs	r0, #0
     9ea:	4b1e      	ldr	r3, [pc, #120]	; (a64 <_usart_init+0x90>)
     9ec:	4798      	blx	r3
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     9ee:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     9f0:	07db      	lsls	r3, r3, #31
     9f2:	d418      	bmi.n	a26 <_usart_init+0x52>
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     9f4:	2203      	movs	r2, #3
     9f6:	69e3      	ldr	r3, [r4, #28]
     9f8:	421a      	tst	r2, r3
     9fa:	d1fc      	bne.n	9f6 <_usart_init+0x22>
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     9fc:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     9fe:	079b      	lsls	r3, r3, #30
     a00:	d50b      	bpl.n	a1a <_usart_init+0x46>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     a02:	6823      	ldr	r3, [r4, #0]
     a04:	2202      	movs	r2, #2
     a06:	4393      	bics	r3, r2
     a08:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     a0a:	3201      	adds	r2, #1
     a0c:	69e3      	ldr	r3, [r4, #28]
     a0e:	421a      	tst	r2, r3
     a10:	d1fc      	bne.n	a0c <_usart_init+0x38>
     a12:	2202      	movs	r2, #2
     a14:	69e3      	ldr	r3, [r4, #28]
     a16:	421a      	tst	r2, r3
     a18:	d1fc      	bne.n	a14 <_usart_init+0x40>
	((Sercom *)hw)->USART.CTRLA.reg = data;
     a1a:	2305      	movs	r3, #5
     a1c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     a1e:	2203      	movs	r2, #3
     a20:	69e3      	ldr	r3, [r4, #28]
     a22:	421a      	tst	r2, r3
     a24:	d1fc      	bne.n	a20 <_usart_init+0x4c>
     a26:	2201      	movs	r2, #1
     a28:	69e3      	ldr	r3, [r4, #28]
     a2a:	421a      	tst	r2, r3
     a2c:	d1fc      	bne.n	a28 <_usart_init+0x54>
	((Sercom *)hw)->USART.CTRLA.reg = data;
     a2e:	4b0e      	ldr	r3, [pc, #56]	; (a68 <_usart_init+0x94>)
     a30:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     a32:	2203      	movs	r2, #3
     a34:	69e3      	ldr	r3, [r4, #28]
     a36:	421a      	tst	r2, r3
     a38:	d1fc      	bne.n	a34 <_usart_init+0x60>
	((Sercom *)hw)->USART.CTRLB.reg = data;
     a3a:	23c0      	movs	r3, #192	; 0xc0
     a3c:	029b      	lsls	r3, r3, #10
     a3e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     a40:	2207      	movs	r2, #7
     a42:	69e3      	ldr	r3, [r4, #28]
     a44:	421a      	tst	r2, r3
     a46:	d1fc      	bne.n	a42 <_usart_init+0x6e>
	((Sercom *)hw)->USART.BAUD.reg = data;
     a48:	4b08      	ldr	r3, [pc, #32]	; (a6c <_usart_init+0x98>)
     a4a:	81a3      	strh	r3, [r4, #12]
	((Sercom *)hw)->USART.RXPL.reg = data;
     a4c:	2300      	movs	r3, #0
     a4e:	73a3      	strb	r3, [r4, #14]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     a50:	2230      	movs	r2, #48	; 0x30
     a52:	54a3      	strb	r3, [r4, r2]
}
     a54:	2000      	movs	r0, #0
     a56:	bd10      	pop	{r4, pc}
     a58:	bdfffc00 	.word	0xbdfffc00
     a5c:	0000023a 	.word	0x0000023a
     a60:	0000141c 	.word	0x0000141c
     a64:	000006e5 	.word	0x000006e5
     a68:	40100004 	.word	0x40100004
     a6c:	fffff62b 	.word	0xfffff62b

00000a70 <_usart_sync_init>:
{
     a70:	b570      	push	{r4, r5, r6, lr}
     a72:	0005      	movs	r5, r0
     a74:	000c      	movs	r4, r1
	ASSERT(device);
     a76:	1e43      	subs	r3, r0, #1
     a78:	4198      	sbcs	r0, r3
     a7a:	b2c0      	uxtb	r0, r0
     a7c:	22b4      	movs	r2, #180	; 0xb4
     a7e:	4904      	ldr	r1, [pc, #16]	; (a90 <_usart_sync_init+0x20>)
     a80:	4b04      	ldr	r3, [pc, #16]	; (a94 <_usart_sync_init+0x24>)
     a82:	4798      	blx	r3
	device->hw = hw;
     a84:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     a86:	0020      	movs	r0, r4
     a88:	4b03      	ldr	r3, [pc, #12]	; (a98 <_usart_sync_init+0x28>)
     a8a:	4798      	blx	r3
}
     a8c:	bd70      	pop	{r4, r5, r6, pc}
     a8e:	46c0      	nop			; (mov r8, r8)
     a90:	0000141c 	.word	0x0000141c
     a94:	000006e5 	.word	0x000006e5
     a98:	000009d5 	.word	0x000009d5

00000a9c <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
     a9c:	6803      	ldr	r3, [r0, #0]
     a9e:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
     aa0:	8519      	strh	r1, [r3, #40]	; 0x28
}
     aa2:	4770      	bx	lr

00000aa4 <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
     aa4:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
     aa6:	8d18      	ldrh	r0, [r3, #40]	; 0x28
     aa8:	b2c0      	uxtb	r0, r0
}
     aaa:	4770      	bx	lr

00000aac <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
     aac:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
     aae:	7e18      	ldrb	r0, [r3, #24]
     ab0:	2301      	movs	r3, #1
     ab2:	4018      	ands	r0, r3
}
     ab4:	4770      	bx	lr

00000ab6 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
     ab6:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
     ab8:	7e18      	ldrb	r0, [r3, #24]
     aba:	0780      	lsls	r0, r0, #30
     abc:	0fc0      	lsrs	r0, r0, #31
}
     abe:	4770      	bx	lr

00000ac0 <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
     ac0:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
     ac2:	7e18      	ldrb	r0, [r3, #24]
     ac4:	0740      	lsls	r0, r0, #29
     ac6:	0fc0      	lsrs	r0, r0, #31
}
     ac8:	4770      	bx	lr
	...

00000acc <_i2c_m_sync_init>:
{
     acc:	b570      	push	{r4, r5, r6, lr}
     ace:	0004      	movs	r4, r0
     ad0:	000d      	movs	r5, r1
	ASSERT(i2c_dev);
     ad2:	1e43      	subs	r3, r0, #1
     ad4:	4198      	sbcs	r0, r3
     ad6:	b2c0      	uxtb	r0, r0
     ad8:	4a04      	ldr	r2, [pc, #16]	; (aec <_i2c_m_sync_init+0x20>)
     ada:	4905      	ldr	r1, [pc, #20]	; (af0 <_i2c_m_sync_init+0x24>)
     adc:	4b05      	ldr	r3, [pc, #20]	; (af4 <_i2c_m_sync_init+0x28>)
     ade:	4798      	blx	r3
	i2c_dev->hw = hw;
     ae0:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
     ae2:	0029      	movs	r1, r5
     ae4:	0020      	movs	r0, r4
     ae6:	4b04      	ldr	r3, [pc, #16]	; (af8 <_i2c_m_sync_init+0x2c>)
     ae8:	4798      	blx	r3
}
     aea:	bd70      	pop	{r4, r5, r6, pc}
     aec:	00000507 	.word	0x00000507
     af0:	0000141c 	.word	0x0000141c
     af4:	000006e5 	.word	0x000006e5
     af8:	000008f9 	.word	0x000008f9

00000afc <_i2c_m_sync_enable>:
{
     afc:	b570      	push	{r4, r5, r6, lr}
     afe:	0004      	movs	r4, r0
	ASSERT(i2c_dev);
     b00:	4d1a      	ldr	r5, [pc, #104]	; (b6c <_i2c_m_sync_enable+0x70>)
     b02:	1e43      	subs	r3, r0, #1
     b04:	4198      	sbcs	r0, r3
     b06:	b2c0      	uxtb	r0, r0
     b08:	4a19      	ldr	r2, [pc, #100]	; (b70 <_i2c_m_sync_enable+0x74>)
     b0a:	0029      	movs	r1, r5
     b0c:	4e19      	ldr	r6, [pc, #100]	; (b74 <_i2c_m_sync_enable+0x78>)
     b0e:	47b0      	blx	r6
	return _i2c_m_enable_implementation(i2c_dev->hw);
     b10:	6924      	ldr	r4, [r4, #16]
	ASSERT(hw);
     b12:	0020      	movs	r0, r4
     b14:	1e43      	subs	r3, r0, #1
     b16:	4198      	sbcs	r0, r3
     b18:	b2c0      	uxtb	r0, r0
     b1a:	4a17      	ldr	r2, [pc, #92]	; (b78 <_i2c_m_sync_enable+0x7c>)
     b1c:	0029      	movs	r1, r5
     b1e:	47b0      	blx	r6
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
     b20:	6823      	ldr	r3, [r4, #0]
     b22:	2202      	movs	r2, #2
     b24:	4313      	orrs	r3, r2
     b26:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     b28:	3201      	adds	r2, #1
     b2a:	69e3      	ldr	r3, [r4, #28]
     b2c:	421a      	tst	r2, r3
     b2e:	d1fc      	bne.n	b2a <_i2c_m_sync_enable+0x2e>
     b30:	2504      	movs	r5, #4
     b32:	2204      	movs	r2, #4
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_BUSSTATE_bf(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
     b34:	2003      	movs	r0, #3
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
     b36:	2610      	movs	r6, #16
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     b38:	4910      	ldr	r1, [pc, #64]	; (b7c <_i2c_m_sync_enable+0x80>)
     b3a:	69e3      	ldr	r3, [r4, #28]
     b3c:	421a      	tst	r2, r3
     b3e:	d1fc      	bne.n	b3a <_i2c_m_sync_enable+0x3e>
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
     b40:	8b63      	ldrh	r3, [r4, #26]
     b42:	091b      	lsrs	r3, r3, #4
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
     b44:	4003      	ands	r3, r0
     b46:	2b01      	cmp	r3, #1
     b48:	d00a      	beq.n	b60 <_i2c_m_sync_enable+0x64>
     b4a:	3901      	subs	r1, #1
		if (timeout <= 0) {
     b4c:	2900      	cmp	r1, #0
     b4e:	d1f4      	bne.n	b3a <_i2c_m_sync_enable+0x3e>
     b50:	3d01      	subs	r5, #1
			if (--timeout_attempt)
     b52:	2d00      	cmp	r5, #0
     b54:	d006      	beq.n	b64 <_i2c_m_sync_enable+0x68>
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
     b56:	8366      	strh	r6, [r4, #26]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     b58:	69e3      	ldr	r3, [r4, #28]
     b5a:	421a      	tst	r2, r3
     b5c:	d1fc      	bne.n	b58 <_i2c_m_sync_enable+0x5c>
     b5e:	e7eb      	b.n	b38 <_i2c_m_sync_enable+0x3c>
	return ERR_NONE;
     b60:	2000      	movs	r0, #0
}
     b62:	bd70      	pop	{r4, r5, r6, pc}
				return I2C_ERR_BUSY;
     b64:	2006      	movs	r0, #6
     b66:	4240      	negs	r0, r0
	return _i2c_m_enable_implementation(i2c_dev->hw);
     b68:	e7fb      	b.n	b62 <_i2c_m_sync_enable+0x66>
     b6a:	46c0      	nop			; (mov r8, r8)
     b6c:	0000141c 	.word	0x0000141c
     b70:	00000524 	.word	0x00000524
     b74:	000006e5 	.word	0x000006e5
     b78:	000005f4 	.word	0x000005f4
     b7c:	0000ffff 	.word	0x0000ffff

00000b80 <_i2c_m_sync_transfer>:
{
     b80:	b5f0      	push	{r4, r5, r6, r7, lr}
     b82:	46de      	mov	lr, fp
     b84:	4657      	mov	r7, sl
     b86:	464e      	mov	r6, r9
     b88:	4645      	mov	r5, r8
     b8a:	b5e0      	push	{r5, r6, r7, lr}
     b8c:	b083      	sub	sp, #12
     b8e:	0005      	movs	r5, r0
     b90:	4688      	mov	r8, r1
	void *   hw = i2c_dev->hw;
     b92:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
     b94:	0006      	movs	r6, r0
     b96:	1e73      	subs	r3, r6, #1
     b98:	419e      	sbcs	r6, r3
     b9a:	b2f3      	uxtb	r3, r6
     b9c:	9301      	str	r3, [sp, #4]
     b9e:	4fb4      	ldr	r7, [pc, #720]	; (e70 <_i2c_m_sync_transfer+0x2f0>)
     ba0:	4ab4      	ldr	r2, [pc, #720]	; (e74 <_i2c_m_sync_transfer+0x2f4>)
     ba2:	0039      	movs	r1, r7
     ba4:	0018      	movs	r0, r3
     ba6:	4eb4      	ldr	r6, [pc, #720]	; (e78 <_i2c_m_sync_transfer+0x2f8>)
     ba8:	47b0      	blx	r6
	ASSERT(i2c_dev->hw);
     baa:	6928      	ldr	r0, [r5, #16]
     bac:	1e43      	subs	r3, r0, #1
     bae:	4198      	sbcs	r0, r3
     bb0:	b2c0      	uxtb	r0, r0
     bb2:	22b8      	movs	r2, #184	; 0xb8
     bb4:	00d2      	lsls	r2, r2, #3
     bb6:	0039      	movs	r1, r7
     bb8:	47b0      	blx	r6
	ASSERT(msg);
     bba:	4640      	mov	r0, r8
     bbc:	1e43      	subs	r3, r0, #1
     bbe:	4198      	sbcs	r0, r3
     bc0:	b2c0      	uxtb	r0, r0
     bc2:	4aae      	ldr	r2, [pc, #696]	; (e7c <_i2c_m_sync_transfer+0x2fc>)
     bc4:	0039      	movs	r1, r7
     bc6:	47b0      	blx	r6
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
     bc8:	886b      	ldrh	r3, [r5, #2]
     bca:	05db      	lsls	r3, r3, #23
     bcc:	d500      	bpl.n	bd0 <_i2c_m_sync_transfer+0x50>
     bce:	e226      	b.n	101e <_i2c_m_sync_transfer+0x49e>
	msg->flags |= I2C_M_BUSY;
     bd0:	4643      	mov	r3, r8
     bd2:	885a      	ldrh	r2, [r3, #2]
     bd4:	2380      	movs	r3, #128	; 0x80
     bd6:	005b      	lsls	r3, r3, #1
     bd8:	431a      	orrs	r2, r3
     bda:	4641      	mov	r1, r8
     bdc:	804a      	strh	r2, [r1, #2]
	i2c_dev->service.msg = *msg;
     bde:	002a      	movs	r2, r5
     be0:	c9c1      	ldmia	r1!, {r0, r6, r7}
     be2:	c2c1      	stmia	r2!, {r0, r6, r7}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
     be4:	6862      	ldr	r2, [r4, #4]
     be6:	4313      	orrs	r3, r2
     be8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     bea:	2207      	movs	r2, #7
     bec:	69e3      	ldr	r3, [r4, #28]
     bee:	421a      	tst	r2, r3
     bf0:	d1fc      	bne.n	bec <_i2c_m_sync_transfer+0x6c>
	void *             hw    = i2c_dev->hw;
     bf2:	692f      	ldr	r7, [r5, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     bf4:	683b      	ldr	r3, [r7, #0]
     bf6:	4699      	mov	r9, r3
	ASSERT(i2c_dev);
     bf8:	4aa1      	ldr	r2, [pc, #644]	; (e80 <_i2c_m_sync_transfer+0x300>)
     bfa:	499d      	ldr	r1, [pc, #628]	; (e70 <_i2c_m_sync_transfer+0x2f0>)
     bfc:	9801      	ldr	r0, [sp, #4]
     bfe:	4b9e      	ldr	r3, [pc, #632]	; (e78 <_i2c_m_sync_transfer+0x2f8>)
     c00:	4798      	blx	r3
	if (msg->len == 1 && sclsm) {
     c02:	686b      	ldr	r3, [r5, #4]
     c04:	2b01      	cmp	r3, #1
     c06:	d05a      	beq.n	cbe <_i2c_m_sync_transfer+0x13e>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     c08:	687b      	ldr	r3, [r7, #4]
     c0a:	4a9e      	ldr	r2, [pc, #632]	; (e84 <_i2c_m_sync_transfer+0x304>)
     c0c:	4013      	ands	r3, r2
     c0e:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     c10:	2207      	movs	r2, #7
     c12:	69fb      	ldr	r3, [r7, #28]
     c14:	421a      	tst	r2, r3
     c16:	d1fc      	bne.n	c12 <_i2c_m_sync_transfer+0x92>
	if (msg->addr & I2C_M_TEN) {
     c18:	882b      	ldrh	r3, [r5, #0]
     c1a:	055a      	lsls	r2, r3, #21
     c1c:	d55c      	bpl.n	cd8 <_i2c_m_sync_transfer+0x158>
		if (msg->flags & I2C_M_RD) {
     c1e:	886a      	ldrh	r2, [r5, #2]
     c20:	07d2      	lsls	r2, r2, #31
     c22:	d504      	bpl.n	c2e <_i2c_m_sync_transfer+0xae>
			msg->flags |= I2C_M_TEN;
     c24:	886a      	ldrh	r2, [r5, #2]
     c26:	2180      	movs	r1, #128	; 0x80
     c28:	00c9      	lsls	r1, r1, #3
     c2a:	430a      	orrs	r2, r1
     c2c:	806a      	strh	r2, [r5, #2]
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
     c2e:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
     c30:	4995      	ldr	r1, [pc, #596]	; (e88 <_i2c_m_sync_transfer+0x308>)
     c32:	4019      	ands	r1, r3
     c34:	2204      	movs	r2, #4
     c36:	69fb      	ldr	r3, [r7, #28]
     c38:	421a      	tst	r2, r3
     c3a:	d1fc      	bne.n	c36 <_i2c_m_sync_transfer+0xb6>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
     c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     c3e:	2280      	movs	r2, #128	; 0x80
     c40:	01d2      	lsls	r2, r2, #7
     c42:	401a      	ands	r2, r3
		hri_sercomi2cm_write_ADDR_reg(hw,
     c44:	2380      	movs	r3, #128	; 0x80
     c46:	021b      	lsls	r3, r3, #8
     c48:	4313      	orrs	r3, r2
     c4a:	4319      	orrs	r1, r3
	((Sercom *)hw)->I2CM.ADDR.reg = data;
     c4c:	6279      	str	r1, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     c4e:	2204      	movs	r2, #4
     c50:	69fb      	ldr	r3, [r7, #28]
     c52:	421a      	tst	r2, r3
     c54:	d1fc      	bne.n	c50 <_i2c_m_sync_transfer+0xd0>
	void *   hw      = i2c_dev->hw;
     c56:	6929      	ldr	r1, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
     c58:	7e0b      	ldrb	r3, [r1, #24]
     c5a:	b2db      	uxtb	r3, r3
     c5c:	4a8b      	ldr	r2, [pc, #556]	; (e8c <_i2c_m_sync_transfer+0x30c>)
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
     c5e:	2003      	movs	r0, #3
     c60:	4218      	tst	r0, r3
     c62:	d104      	bne.n	c6e <_i2c_m_sync_transfer+0xee>
     c64:	7e0b      	ldrb	r3, [r1, #24]
     c66:	b2db      	uxtb	r3, r3
     c68:	3a01      	subs	r2, #1
		if (timeout-- == 0) {
     c6a:	2a00      	cmp	r2, #0
     c6c:	d1f8      	bne.n	c60 <_i2c_m_sync_transfer+0xe0>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     c6e:	683e      	ldr	r6, [r7, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     c70:	2104      	movs	r1, #4
     c72:	69fa      	ldr	r2, [r7, #28]
     c74:	4211      	tst	r1, r2
     c76:	d1fc      	bne.n	c72 <_i2c_m_sync_transfer+0xf2>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
     c78:	8b7a      	ldrh	r2, [r7, #26]
     c7a:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
     c7c:	07d9      	lsls	r1, r3, #31
     c7e:	d400      	bmi.n	c82 <_i2c_m_sync_transfer+0x102>
     c80:	e0a0      	b.n	dc4 <_i2c_m_sync_transfer+0x244>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
     c82:	0793      	lsls	r3, r2, #30
     c84:	d53e      	bpl.n	d04 <_i2c_m_sync_transfer+0x184>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     c86:	2301      	movs	r3, #1
     c88:	763b      	strb	r3, [r7, #24]
			msg->flags |= I2C_M_FAIL;
     c8a:	886b      	ldrh	r3, [r5, #2]
     c8c:	2180      	movs	r1, #128	; 0x80
     c8e:	0149      	lsls	r1, r1, #5
     c90:	430b      	orrs	r3, r1
     c92:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
     c94:	886b      	ldrh	r3, [r5, #2]
     c96:	497e      	ldr	r1, [pc, #504]	; (e90 <_i2c_m_sync_transfer+0x310>)
     c98:	400b      	ands	r3, r1
     c9a:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
     c9c:	2001      	movs	r0, #1
     c9e:	0003      	movs	r3, r0
     ca0:	4013      	ands	r3, r2
			return I2C_ERR_BAD_ADDRESS;
     ca2:	4258      	negs	r0, r3
     ca4:	4158      	adcs	r0, r3
     ca6:	3805      	subs	r0, #5
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
     ca8:	886b      	ldrh	r3, [r5, #2]
     caa:	4a79      	ldr	r2, [pc, #484]	; (e90 <_i2c_m_sync_transfer+0x310>)
     cac:	4013      	ands	r3, r2
     cae:	806b      	strh	r3, [r5, #2]
}
     cb0:	b003      	add	sp, #12
     cb2:	bc3c      	pop	{r2, r3, r4, r5}
     cb4:	4690      	mov	r8, r2
     cb6:	4699      	mov	r9, r3
     cb8:	46a2      	mov	sl, r4
     cba:	46ab      	mov	fp, r5
     cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (msg->len == 1 && sclsm) {
     cbe:	464b      	mov	r3, r9
     cc0:	011b      	lsls	r3, r3, #4
     cc2:	d5a1      	bpl.n	c08 <_i2c_m_sync_transfer+0x88>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     cc4:	687a      	ldr	r2, [r7, #4]
     cc6:	2380      	movs	r3, #128	; 0x80
     cc8:	02db      	lsls	r3, r3, #11
     cca:	4313      	orrs	r3, r2
     ccc:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     cce:	2207      	movs	r2, #7
     cd0:	69fb      	ldr	r3, [r7, #28]
     cd2:	421a      	tst	r2, r3
     cd4:	d1fc      	bne.n	cd0 <_i2c_m_sync_transfer+0x150>
     cd6:	e79f      	b.n	c18 <_i2c_m_sync_transfer+0x98>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
     cd8:	886a      	ldrh	r2, [r5, #2]
     cda:	005b      	lsls	r3, r3, #1
     cdc:	21ff      	movs	r1, #255	; 0xff
     cde:	400b      	ands	r3, r1
     ce0:	39fe      	subs	r1, #254	; 0xfe
     ce2:	4011      	ands	r1, r2
     ce4:	4319      	orrs	r1, r3
     ce6:	2204      	movs	r2, #4
     ce8:	69fb      	ldr	r3, [r7, #28]
     cea:	421a      	tst	r2, r3
     cec:	d1fc      	bne.n	ce8 <_i2c_m_sync_transfer+0x168>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
     cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
     cf0:	2280      	movs	r2, #128	; 0x80
     cf2:	01d2      	lsls	r2, r2, #7
     cf4:	4013      	ands	r3, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
     cf6:	430b      	orrs	r3, r1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
     cf8:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     cfa:	2204      	movs	r2, #4
     cfc:	69fb      	ldr	r3, [r7, #28]
     cfe:	421a      	tst	r2, r3
     d00:	d1fc      	bne.n	cfc <_i2c_m_sync_transfer+0x17c>
     d02:	e7a8      	b.n	c56 <_i2c_m_sync_transfer+0xd6>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
     d04:	0753      	lsls	r3, r2, #29
     d06:	d41b      	bmi.n	d40 <_i2c_m_sync_transfer+0x1c0>
			if (msg->flags & I2C_M_TEN) {
     d08:	886b      	ldrh	r3, [r5, #2]
     d0a:	055b      	lsls	r3, r3, #21
     d0c:	d535      	bpl.n	d7a <_i2c_m_sync_transfer+0x1fa>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
     d0e:	882b      	ldrh	r3, [r5, #0]
     d10:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
     d12:	2106      	movs	r1, #6
     d14:	4019      	ands	r1, r3
     d16:	2204      	movs	r2, #4
     d18:	69fb      	ldr	r3, [r7, #28]
     d1a:	421a      	tst	r2, r3
     d1c:	d1fc      	bne.n	d18 <_i2c_m_sync_transfer+0x198>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
     d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     d20:	2280      	movs	r2, #128	; 0x80
     d22:	01d2      	lsls	r2, r2, #7
     d24:	4013      	ands	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
     d26:	22f1      	movs	r2, #241	; 0xf1
     d28:	4313      	orrs	r3, r2
     d2a:	430b      	orrs	r3, r1
	((Sercom *)hw)->I2CM.ADDR.reg = data;
     d2c:	627b      	str	r3, [r7, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     d2e:	3aed      	subs	r2, #237	; 0xed
     d30:	69fb      	ldr	r3, [r7, #28]
     d32:	421a      	tst	r2, r3
     d34:	d1fc      	bne.n	d30 <_i2c_m_sync_transfer+0x1b0>
				msg->flags &= ~I2C_M_TEN;
     d36:	886b      	ldrh	r3, [r5, #2]
     d38:	4a56      	ldr	r2, [pc, #344]	; (e94 <_i2c_m_sync_transfer+0x314>)
     d3a:	4013      	ands	r3, r2
     d3c:	806b      	strh	r3, [r5, #2]
     d3e:	e066      	b.n	e0e <_i2c_m_sync_transfer+0x28e>
				if (msg->len > 0) {
     d40:	686b      	ldr	r3, [r5, #4]
     d42:	2b00      	cmp	r3, #0
     d44:	dd04      	ble.n	d50 <_i2c_m_sync_transfer+0x1d0>
					msg->flags |= I2C_M_FAIL;
     d46:	886b      	ldrh	r3, [r5, #2]
     d48:	2280      	movs	r2, #128	; 0x80
     d4a:	0152      	lsls	r2, r2, #5
     d4c:	4313      	orrs	r3, r2
     d4e:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
     d50:	886b      	ldrh	r3, [r5, #2]
     d52:	b21b      	sxth	r3, r3
     d54:	2b00      	cmp	r3, #0
     d56:	db06      	blt.n	d66 <_i2c_m_sync_transfer+0x1e6>
				msg->flags &= ~I2C_M_BUSY;
     d58:	886b      	ldrh	r3, [r5, #2]
     d5a:	4a4d      	ldr	r2, [pc, #308]	; (e90 <_i2c_m_sync_transfer+0x310>)
     d5c:	4013      	ands	r3, r2
     d5e:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
     d60:	2002      	movs	r0, #2
     d62:	4240      	negs	r0, r0
     d64:	e7a0      	b.n	ca8 <_i2c_m_sync_transfer+0x128>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     d66:	687a      	ldr	r2, [r7, #4]
     d68:	23c0      	movs	r3, #192	; 0xc0
     d6a:	029b      	lsls	r3, r3, #10
     d6c:	4313      	orrs	r3, r2
     d6e:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     d70:	2304      	movs	r3, #4
     d72:	69fa      	ldr	r2, [r7, #28]
     d74:	4213      	tst	r3, r2
     d76:	d1fc      	bne.n	d72 <_i2c_m_sync_transfer+0x1f2>
     d78:	e7ee      	b.n	d58 <_i2c_m_sync_transfer+0x1d8>
			if (msg->len == 0) {
     d7a:	686b      	ldr	r3, [r5, #4]
     d7c:	2b00      	cmp	r3, #0
     d7e:	d112      	bne.n	da6 <_i2c_m_sync_transfer+0x226>
				if (msg->flags & I2C_M_STOP) {
     d80:	886b      	ldrh	r3, [r5, #2]
     d82:	b21b      	sxth	r3, r3
     d84:	2b00      	cmp	r3, #0
     d86:	db04      	blt.n	d92 <_i2c_m_sync_transfer+0x212>
				msg->flags &= ~I2C_M_BUSY;
     d88:	886b      	ldrh	r3, [r5, #2]
     d8a:	4a41      	ldr	r2, [pc, #260]	; (e90 <_i2c_m_sync_transfer+0x310>)
     d8c:	4013      	ands	r3, r2
     d8e:	806b      	strh	r3, [r5, #2]
     d90:	e03d      	b.n	e0e <_i2c_m_sync_transfer+0x28e>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     d92:	687a      	ldr	r2, [r7, #4]
     d94:	23c0      	movs	r3, #192	; 0xc0
     d96:	029b      	lsls	r3, r3, #10
     d98:	4313      	orrs	r3, r2
     d9a:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     d9c:	2204      	movs	r2, #4
     d9e:	69fb      	ldr	r3, [r7, #28]
     da0:	421a      	tst	r2, r3
     da2:	d1fc      	bne.n	d9e <_i2c_m_sync_transfer+0x21e>
     da4:	e7f0      	b.n	d88 <_i2c_m_sync_transfer+0x208>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
     da6:	68ab      	ldr	r3, [r5, #8]
     da8:	781a      	ldrb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
     daa:	2328      	movs	r3, #40	; 0x28
     dac:	54fa      	strb	r2, [r7, r3]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     dae:	2204      	movs	r2, #4
     db0:	69fb      	ldr	r3, [r7, #28]
     db2:	421a      	tst	r2, r3
     db4:	d1fc      	bne.n	db0 <_i2c_m_sync_transfer+0x230>
				msg->buffer++;
     db6:	68ab      	ldr	r3, [r5, #8]
     db8:	3301      	adds	r3, #1
     dba:	60ab      	str	r3, [r5, #8]
				msg->len--;
     dbc:	686b      	ldr	r3, [r5, #4]
     dbe:	3b01      	subs	r3, #1
     dc0:	606b      	str	r3, [r5, #4]
     dc2:	e024      	b.n	e0e <_i2c_m_sync_transfer+0x28e>
	} else if (flags & SB_FLAG) {
     dc4:	079b      	lsls	r3, r3, #30
     dc6:	d522      	bpl.n	e0e <_i2c_m_sync_transfer+0x28e>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
     dc8:	686b      	ldr	r3, [r5, #4]
     dca:	2b00      	cmp	r3, #0
     dcc:	d040      	beq.n	e50 <_i2c_m_sync_transfer+0x2d0>
     dce:	0752      	lsls	r2, r2, #29
     dd0:	d43e      	bmi.n	e50 <_i2c_m_sync_transfer+0x2d0>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
     dd2:	0136      	lsls	r6, r6, #4
     dd4:	0ff6      	lsrs	r6, r6, #31
			msg->len--;
     dd6:	3b01      	subs	r3, #1
     dd8:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
     dda:	2b00      	cmp	r3, #0
     ddc:	d000      	beq.n	de0 <_i2c_m_sync_transfer+0x260>
     dde:	e121      	b.n	1024 <_i2c_m_sync_transfer+0x4a4>
     de0:	2e00      	cmp	r6, #0
     de2:	d100      	bne.n	de6 <_i2c_m_sync_transfer+0x266>
     de4:	e124      	b.n	1030 <_i2c_m_sync_transfer+0x4b0>
				if (msg->flags & I2C_M_STOP) {
     de6:	886b      	ldrh	r3, [r5, #2]
     de8:	b21b      	sxth	r3, r3
     dea:	2b00      	cmp	r3, #0
     dec:	db1d      	blt.n	e2a <_i2c_m_sync_transfer+0x2aa>
				msg->flags &= ~I2C_M_BUSY;
     dee:	886b      	ldrh	r3, [r5, #2]
     df0:	4a27      	ldr	r2, [pc, #156]	; (e90 <_i2c_m_sync_transfer+0x310>)
     df2:	4013      	ands	r3, r2
     df4:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
     df6:	68a9      	ldr	r1, [r5, #8]
     df8:	1c4b      	adds	r3, r1, #1
     dfa:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     dfc:	2204      	movs	r2, #4
     dfe:	69fb      	ldr	r3, [r7, #28]
     e00:	421a      	tst	r2, r3
     e02:	d1fc      	bne.n	dfe <_i2c_m_sync_transfer+0x27e>
	return ((Sercom *)hw)->I2CM.DATA.reg;
     e04:	2328      	movs	r3, #40	; 0x28
     e06:	5cfb      	ldrb	r3, [r7, r3]
     e08:	700b      	strb	r3, [r1, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     e0a:	2302      	movs	r3, #2
     e0c:	763b      	strb	r3, [r7, #24]
			return I2C_NACK;
     e0e:	2600      	movs	r6, #0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
     e10:	2380      	movs	r3, #128	; 0x80
     e12:	005b      	lsls	r3, r3, #1
     e14:	469a      	mov	sl, r3
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
     e16:	2203      	movs	r2, #3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     e18:	2104      	movs	r1, #4
	if (flags & MB_FLAG) {
     e1a:	3bff      	subs	r3, #255	; 0xff
     e1c:	469c      	mov	ip, r3
	} else if (flags & SB_FLAG) {
     e1e:	3301      	adds	r3, #1
     e20:	4699      	mov	r9, r3
	return ((Sercom *)hw)->I2CM.DATA.reg;
     e22:	3326      	adds	r3, #38	; 0x26
     e24:	469b      	mov	fp, r3
     e26:	9601      	str	r6, [sp, #4]
     e28:	e0c2      	b.n	fb0 <_i2c_m_sync_transfer+0x430>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
     e2a:	687b      	ldr	r3, [r7, #4]
     e2c:	4a18      	ldr	r2, [pc, #96]	; (e90 <_i2c_m_sync_transfer+0x310>)
     e2e:	4013      	ands	r3, r2
     e30:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     e32:	3209      	adds	r2, #9
     e34:	32ff      	adds	r2, #255	; 0xff
     e36:	69fb      	ldr	r3, [r7, #28]
     e38:	421a      	tst	r2, r3
     e3a:	d1fc      	bne.n	e36 <_i2c_m_sync_transfer+0x2b6>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     e3c:	687a      	ldr	r2, [r7, #4]
     e3e:	23c0      	movs	r3, #192	; 0xc0
     e40:	029b      	lsls	r3, r3, #10
     e42:	4313      	orrs	r3, r2
     e44:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     e46:	2204      	movs	r2, #4
     e48:	69fb      	ldr	r3, [r7, #28]
     e4a:	421a      	tst	r2, r3
     e4c:	d1fc      	bne.n	e48 <_i2c_m_sync_transfer+0x2c8>
     e4e:	e7ce      	b.n	dee <_i2c_m_sync_transfer+0x26e>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     e50:	2302      	movs	r3, #2
     e52:	763b      	strb	r3, [r7, #24]
			return I2C_NACK;
     e54:	2002      	movs	r0, #2
     e56:	4240      	negs	r0, r0
     e58:	e726      	b.n	ca8 <_i2c_m_sync_transfer+0x128>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     e5a:	6862      	ldr	r2, [r4, #4]
     e5c:	23c0      	movs	r3, #192	; 0xc0
     e5e:	029b      	lsls	r3, r3, #10
     e60:	4313      	orrs	r3, r2
     e62:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     e64:	2204      	movs	r2, #4
     e66:	69e3      	ldr	r3, [r4, #28]
     e68:	421a      	tst	r2, r3
     e6a:	d1fc      	bne.n	e66 <_i2c_m_sync_transfer+0x2e6>
     e6c:	e0b5      	b.n	fda <_i2c_m_sync_transfer+0x45a>
     e6e:	46c0      	nop			; (mov r8, r8)
     e70:	0000141c 	.word	0x0000141c
     e74:	000005bf 	.word	0x000005bf
     e78:	000006e5 	.word	0x000006e5
     e7c:	000005c1 	.word	0x000005c1
     e80:	00000594 	.word	0x00000594
     e84:	fffbffff 	.word	0xfffbffff
     e88:	000007fe 	.word	0x000007fe
     e8c:	0000ffff 	.word	0x0000ffff
     e90:	fffffeff 	.word	0xfffffeff
     e94:	fffffbff 	.word	0xfffffbff
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
     e98:	4201      	tst	r1, r0
     e9a:	d11b      	bne.n	ed4 <_i2c_m_sync_transfer+0x354>
			if (msg->flags & I2C_M_TEN) {
     e9c:	886b      	ldrh	r3, [r5, #2]
     e9e:	055b      	lsls	r3, r3, #21
     ea0:	d535      	bpl.n	f0e <_i2c_m_sync_transfer+0x38e>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
     ea2:	882b      	ldrh	r3, [r5, #0]
     ea4:	09db      	lsrs	r3, r3, #7
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
     ea6:	2006      	movs	r0, #6
     ea8:	4018      	ands	r0, r3
     eaa:	69e3      	ldr	r3, [r4, #28]
     eac:	4219      	tst	r1, r3
     eae:	d1fc      	bne.n	eaa <_i2c_m_sync_transfer+0x32a>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
     eb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
     eb2:	2680      	movs	r6, #128	; 0x80
     eb4:	01f6      	lsls	r6, r6, #7
     eb6:	4033      	ands	r3, r6
				hri_sercomi2cm_write_ADDR_reg(hw,
     eb8:	26f1      	movs	r6, #241	; 0xf1
     eba:	4333      	orrs	r3, r6
     ebc:	4303      	orrs	r3, r0
	((Sercom *)hw)->I2CM.ADDR.reg = data;
     ebe:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     ec0:	69e3      	ldr	r3, [r4, #28]
     ec2:	4219      	tst	r1, r3
     ec4:	d1fc      	bne.n	ec0 <_i2c_m_sync_transfer+0x340>
				msg->flags &= ~I2C_M_TEN;
     ec6:	886b      	ldrh	r3, [r5, #2]
     ec8:	487a      	ldr	r0, [pc, #488]	; (10b4 <_i2c_m_sync_transfer+0x534>)
     eca:	4003      	ands	r3, r0
     ecc:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
     ece:	2300      	movs	r3, #0
     ed0:	9301      	str	r3, [sp, #4]
     ed2:	e06d      	b.n	fb0 <_i2c_m_sync_transfer+0x430>
				if (msg->len > 0) {
     ed4:	686b      	ldr	r3, [r5, #4]
     ed6:	2b00      	cmp	r3, #0
     ed8:	dd04      	ble.n	ee4 <_i2c_m_sync_transfer+0x364>
					msg->flags |= I2C_M_FAIL;
     eda:	886b      	ldrh	r3, [r5, #2]
     edc:	2080      	movs	r0, #128	; 0x80
     ede:	0140      	lsls	r0, r0, #5
     ee0:	4303      	orrs	r3, r0
     ee2:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
     ee4:	886b      	ldrh	r3, [r5, #2]
     ee6:	b21b      	sxth	r3, r3
     ee8:	2b00      	cmp	r3, #0
     eea:	db07      	blt.n	efc <_i2c_m_sync_transfer+0x37c>
				msg->flags &= ~I2C_M_BUSY;
     eec:	886b      	ldrh	r3, [r5, #2]
     eee:	4872      	ldr	r0, [pc, #456]	; (10b8 <_i2c_m_sync_transfer+0x538>)
     ef0:	4003      	ands	r3, r0
     ef2:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
     ef4:	2302      	movs	r3, #2
     ef6:	425b      	negs	r3, r3
     ef8:	9301      	str	r3, [sp, #4]
     efa:	e059      	b.n	fb0 <_i2c_m_sync_transfer+0x430>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     efc:	6860      	ldr	r0, [r4, #4]
     efe:	23c0      	movs	r3, #192	; 0xc0
     f00:	029b      	lsls	r3, r3, #10
     f02:	4303      	orrs	r3, r0
     f04:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     f06:	69e3      	ldr	r3, [r4, #28]
     f08:	4219      	tst	r1, r3
     f0a:	d1fc      	bne.n	f06 <_i2c_m_sync_transfer+0x386>
     f0c:	e7ee      	b.n	eec <_i2c_m_sync_transfer+0x36c>
			if (msg->len == 0) {
     f0e:	686b      	ldr	r3, [r5, #4]
     f10:	2b00      	cmp	r3, #0
     f12:	d113      	bne.n	f3c <_i2c_m_sync_transfer+0x3bc>
				if (msg->flags & I2C_M_STOP) {
     f14:	886b      	ldrh	r3, [r5, #2]
     f16:	b21b      	sxth	r3, r3
     f18:	2b00      	cmp	r3, #0
     f1a:	db06      	blt.n	f2a <_i2c_m_sync_transfer+0x3aa>
				msg->flags &= ~I2C_M_BUSY;
     f1c:	886b      	ldrh	r3, [r5, #2]
     f1e:	4866      	ldr	r0, [pc, #408]	; (10b8 <_i2c_m_sync_transfer+0x538>)
     f20:	4003      	ands	r3, r0
     f22:	806b      	strh	r3, [r5, #2]
			return I2C_OK;
     f24:	2300      	movs	r3, #0
     f26:	9301      	str	r3, [sp, #4]
     f28:	e042      	b.n	fb0 <_i2c_m_sync_transfer+0x430>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     f2a:	6860      	ldr	r0, [r4, #4]
     f2c:	23c0      	movs	r3, #192	; 0xc0
     f2e:	029b      	lsls	r3, r3, #10
     f30:	4303      	orrs	r3, r0
     f32:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     f34:	69e3      	ldr	r3, [r4, #28]
     f36:	4219      	tst	r1, r3
     f38:	d1fc      	bne.n	f34 <_i2c_m_sync_transfer+0x3b4>
     f3a:	e7ef      	b.n	f1c <_i2c_m_sync_transfer+0x39c>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
     f3c:	68ab      	ldr	r3, [r5, #8]
     f3e:	781b      	ldrb	r3, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
     f40:	4658      	mov	r0, fp
     f42:	5423      	strb	r3, [r4, r0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     f44:	69e3      	ldr	r3, [r4, #28]
     f46:	4219      	tst	r1, r3
     f48:	d1fc      	bne.n	f44 <_i2c_m_sync_transfer+0x3c4>
				msg->buffer++;
     f4a:	68ab      	ldr	r3, [r5, #8]
     f4c:	3301      	adds	r3, #1
     f4e:	60ab      	str	r3, [r5, #8]
				msg->len--;
     f50:	686b      	ldr	r3, [r5, #4]
     f52:	3b01      	subs	r3, #1
     f54:	606b      	str	r3, [r5, #4]
			return I2C_OK;
     f56:	2300      	movs	r3, #0
     f58:	9301      	str	r3, [sp, #4]
     f5a:	e029      	b.n	fb0 <_i2c_m_sync_transfer+0x430>
	return I2C_OK;
     f5c:	2600      	movs	r6, #0
     f5e:	9601      	str	r6, [sp, #4]
	} else if (flags & SB_FLAG) {
     f60:	464e      	mov	r6, r9
     f62:	421e      	tst	r6, r3
     f64:	d024      	beq.n	fb0 <_i2c_m_sync_transfer+0x430>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
     f66:	686b      	ldr	r3, [r5, #4]
     f68:	2b00      	cmp	r3, #0
     f6a:	d04f      	beq.n	100c <_i2c_m_sync_transfer+0x48c>
     f6c:	4201      	tst	r1, r0
     f6e:	d14d      	bne.n	100c <_i2c_m_sync_transfer+0x48c>
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
     f70:	0eff      	lsrs	r7, r7, #27
     f72:	4660      	mov	r0, ip
     f74:	4007      	ands	r7, r0
			msg->len--;
     f76:	3b01      	subs	r3, #1
     f78:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
     f7a:	2b00      	cmp	r3, #0
     f7c:	d000      	beq.n	f80 <_i2c_m_sync_transfer+0x400>
     f7e:	e084      	b.n	108a <_i2c_m_sync_transfer+0x50a>
     f80:	2f00      	cmp	r7, #0
     f82:	d100      	bne.n	f86 <_i2c_m_sync_transfer+0x406>
     f84:	e087      	b.n	1096 <_i2c_m_sync_transfer+0x516>
				if (msg->flags & I2C_M_STOP) {
     f86:	886b      	ldrh	r3, [r5, #2]
     f88:	b21b      	sxth	r3, r3
     f8a:	2b00      	cmp	r3, #0
     f8c:	db2c      	blt.n	fe8 <_i2c_m_sync_transfer+0x468>
				msg->flags &= ~I2C_M_BUSY;
     f8e:	886b      	ldrh	r3, [r5, #2]
     f90:	4849      	ldr	r0, [pc, #292]	; (10b8 <_i2c_m_sync_transfer+0x538>)
     f92:	4003      	ands	r3, r0
     f94:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
     f96:	68a8      	ldr	r0, [r5, #8]
     f98:	1c43      	adds	r3, r0, #1
     f9a:	60ab      	str	r3, [r5, #8]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     f9c:	69e3      	ldr	r3, [r4, #28]
     f9e:	4219      	tst	r1, r3
     fa0:	d1fc      	bne.n	f9c <_i2c_m_sync_transfer+0x41c>
	return ((Sercom *)hw)->I2CM.DATA.reg;
     fa2:	465b      	mov	r3, fp
     fa4:	5ce3      	ldrb	r3, [r4, r3]
     fa6:	7003      	strb	r3, [r0, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     fa8:	464b      	mov	r3, r9
     faa:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
     fac:	2300      	movs	r3, #0
     fae:	9301      	str	r3, [sp, #4]
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
     fb0:	886b      	ldrh	r3, [r5, #2]
     fb2:	4650      	mov	r0, sl
     fb4:	4203      	tst	r3, r0
     fb6:	d02f      	beq.n	1018 <_i2c_m_sync_transfer+0x498>
	void *   hw      = i2c_dev->hw;
     fb8:	692e      	ldr	r6, [r5, #16]
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
     fba:	7e33      	ldrb	r3, [r6, #24]
     fbc:	b2db      	uxtb	r3, r3
     fbe:	483f      	ldr	r0, [pc, #252]	; (10bc <_i2c_m_sync_transfer+0x53c>)
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
     fc0:	421a      	tst	r2, r3
     fc2:	d143      	bne.n	104c <_i2c_m_sync_transfer+0x4cc>
     fc4:	7e33      	ldrb	r3, [r6, #24]
     fc6:	b2db      	uxtb	r3, r3
     fc8:	3801      	subs	r0, #1
		if (timeout-- == 0) {
     fca:	2800      	cmp	r0, #0
     fcc:	d1f8      	bne.n	fc0 <_i2c_m_sync_transfer+0x440>
			if (msg->flags & I2C_M_STOP) {
     fce:	4643      	mov	r3, r8
     fd0:	885b      	ldrh	r3, [r3, #2]
     fd2:	b21b      	sxth	r3, r3
     fd4:	2b00      	cmp	r3, #0
     fd6:	da00      	bge.n	fda <_i2c_m_sync_transfer+0x45a>
     fd8:	e73f      	b.n	e5a <_i2c_m_sync_transfer+0x2da>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
     fda:	886b      	ldrh	r3, [r5, #2]
     fdc:	4a36      	ldr	r2, [pc, #216]	; (10b8 <_i2c_m_sync_transfer+0x538>)
     fde:	4013      	ands	r3, r2
     fe0:	806b      	strh	r3, [r5, #2]
			return I2C_ERR_BUS;
     fe2:	2005      	movs	r0, #5
     fe4:	4240      	negs	r0, r0
			return ret;
     fe6:	e663      	b.n	cb0 <_i2c_m_sync_transfer+0x130>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
     fe8:	6863      	ldr	r3, [r4, #4]
     fea:	4833      	ldr	r0, [pc, #204]	; (10b8 <_i2c_m_sync_transfer+0x538>)
     fec:	4003      	ands	r3, r0
     fee:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     ff0:	3009      	adds	r0, #9
     ff2:	30ff      	adds	r0, #255	; 0xff
     ff4:	69e3      	ldr	r3, [r4, #28]
     ff6:	4218      	tst	r0, r3
     ff8:	d1fc      	bne.n	ff4 <_i2c_m_sync_transfer+0x474>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     ffa:	6860      	ldr	r0, [r4, #4]
     ffc:	23c0      	movs	r3, #192	; 0xc0
     ffe:	029b      	lsls	r3, r3, #10
    1000:	4303      	orrs	r3, r0
    1002:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1004:	69e3      	ldr	r3, [r4, #28]
    1006:	4219      	tst	r1, r3
    1008:	d1fc      	bne.n	1004 <_i2c_m_sync_transfer+0x484>
    100a:	e7c0      	b.n	f8e <_i2c_m_sync_transfer+0x40e>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    100c:	464b      	mov	r3, r9
    100e:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    1010:	2302      	movs	r3, #2
    1012:	425b      	negs	r3, r3
    1014:	9301      	str	r3, [sp, #4]
    1016:	e7cb      	b.n	fb0 <_i2c_m_sync_transfer+0x430>
    1018:	9e01      	ldr	r6, [sp, #4]
    101a:	0030      	movs	r0, r6
    101c:	e648      	b.n	cb0 <_i2c_m_sync_transfer+0x130>
		return I2C_ERR_BUSY;
    101e:	2006      	movs	r0, #6
    1020:	4240      	negs	r0, r0
    1022:	e645      	b.n	cb0 <_i2c_m_sync_transfer+0x130>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1024:	2b01      	cmp	r3, #1
    1026:	d000      	beq.n	102a <_i2c_m_sync_transfer+0x4aa>
    1028:	e6e5      	b.n	df6 <_i2c_m_sync_transfer+0x276>
    102a:	2e00      	cmp	r6, #0
    102c:	d100      	bne.n	1030 <_i2c_m_sync_transfer+0x4b0>
    102e:	e6e2      	b.n	df6 <_i2c_m_sync_transfer+0x276>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1030:	687a      	ldr	r2, [r7, #4]
    1032:	2380      	movs	r3, #128	; 0x80
    1034:	02db      	lsls	r3, r3, #11
    1036:	4313      	orrs	r3, r2
    1038:	607b      	str	r3, [r7, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    103a:	2207      	movs	r2, #7
    103c:	69fb      	ldr	r3, [r7, #28]
    103e:	421a      	tst	r2, r3
    1040:	d1fc      	bne.n	103c <_i2c_m_sync_transfer+0x4bc>
			if (msg->len == 0) {
    1042:	686b      	ldr	r3, [r5, #4]
    1044:	2b00      	cmp	r3, #0
    1046:	d100      	bne.n	104a <_i2c_m_sync_transfer+0x4ca>
    1048:	e6cd      	b.n	de6 <_i2c_m_sync_transfer+0x266>
    104a:	e6d4      	b.n	df6 <_i2c_m_sync_transfer+0x276>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    104c:	6827      	ldr	r7, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    104e:	69e0      	ldr	r0, [r4, #28]
    1050:	4201      	tst	r1, r0
    1052:	d1fc      	bne.n	104e <_i2c_m_sync_transfer+0x4ce>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    1054:	8b60      	ldrh	r0, [r4, #26]
    1056:	b280      	uxth	r0, r0
	if (flags & MB_FLAG) {
    1058:	4666      	mov	r6, ip
    105a:	421e      	tst	r6, r3
    105c:	d100      	bne.n	1060 <_i2c_m_sync_transfer+0x4e0>
    105e:	e77d      	b.n	f5c <_i2c_m_sync_transfer+0x3dc>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    1060:	464b      	mov	r3, r9
    1062:	4203      	tst	r3, r0
    1064:	d100      	bne.n	1068 <_i2c_m_sync_transfer+0x4e8>
    1066:	e717      	b.n	e98 <_i2c_m_sync_transfer+0x318>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    1068:	7626      	strb	r6, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    106a:	886b      	ldrh	r3, [r5, #2]
    106c:	2680      	movs	r6, #128	; 0x80
    106e:	0176      	lsls	r6, r6, #5
    1070:	4333      	orrs	r3, r6
    1072:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    1074:	886b      	ldrh	r3, [r5, #2]
    1076:	4e10      	ldr	r6, [pc, #64]	; (10b8 <_i2c_m_sync_transfer+0x538>)
    1078:	4033      	ands	r3, r6
    107a:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    107c:	4663      	mov	r3, ip
    107e:	4018      	ands	r0, r3
			return I2C_ERR_BAD_ADDRESS;
    1080:	4246      	negs	r6, r0
    1082:	4146      	adcs	r6, r0
    1084:	1f73      	subs	r3, r6, #5
    1086:	9301      	str	r3, [sp, #4]
    1088:	e792      	b.n	fb0 <_i2c_m_sync_transfer+0x430>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    108a:	2b01      	cmp	r3, #1
    108c:	d000      	beq.n	1090 <_i2c_m_sync_transfer+0x510>
    108e:	e782      	b.n	f96 <_i2c_m_sync_transfer+0x416>
    1090:	2f00      	cmp	r7, #0
    1092:	d100      	bne.n	1096 <_i2c_m_sync_transfer+0x516>
    1094:	e77f      	b.n	f96 <_i2c_m_sync_transfer+0x416>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    1096:	6860      	ldr	r0, [r4, #4]
    1098:	2380      	movs	r3, #128	; 0x80
    109a:	02db      	lsls	r3, r3, #11
    109c:	4303      	orrs	r3, r0
    109e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    10a0:	2007      	movs	r0, #7
    10a2:	69e3      	ldr	r3, [r4, #28]
    10a4:	4218      	tst	r0, r3
    10a6:	d1fc      	bne.n	10a2 <_i2c_m_sync_transfer+0x522>
			if (msg->len == 0) {
    10a8:	686b      	ldr	r3, [r5, #4]
    10aa:	2b00      	cmp	r3, #0
    10ac:	d100      	bne.n	10b0 <_i2c_m_sync_transfer+0x530>
    10ae:	e76a      	b.n	f86 <_i2c_m_sync_transfer+0x406>
    10b0:	e771      	b.n	f96 <_i2c_m_sync_transfer+0x416>
    10b2:	46c0      	nop			; (mov r8, r8)
    10b4:	fffffbff 	.word	0xfffffbff
    10b8:	fffffeff 	.word	0xfffffeff
    10bc:	0000ffff 	.word	0x0000ffff

000010c0 <main>:
#include "oled96.h"

#define SSD1306Addr 0b0111100 //8bit ADDR = 0x78 / "01111000", we actually chop off last 0 and use 7bit ADDR = 0b0111100

int main(void)
{
    10c0:	b570      	push	{r4, r5, r6, lr}
    10c2:	b086      	sub	sp, #24
	atmel_start_init();
    10c4:	4b14      	ldr	r3, [pc, #80]	; (1118 <main+0x58>)
    10c6:	4798      	blx	r3
	
	uint8_t oled64_initbuf[]={0x00,0xae,0xa8,0x3f,0xd3,0x00,0x40,0xa1,0xc8,0xda,0x12,0x81,0xff,0xa4,0xa6,0xd5,0x80,0x8d,0x14,0xaf,0x20,0x02};
    10c8:	466a      	mov	r2, sp
    10ca:	4b14      	ldr	r3, [pc, #80]	; (111c <main+0x5c>)
    10cc:	4669      	mov	r1, sp
    10ce:	cb31      	ldmia	r3!, {r0, r4, r5}
    10d0:	c131      	stmia	r1!, {r0, r4, r5}
    10d2:	cb11      	ldmia	r3!, {r0, r4}
    10d4:	c111      	stmia	r1!, {r0, r4}
    10d6:	881b      	ldrh	r3, [r3, #0]
    10d8:	800b      	strh	r3, [r1, #0]
	
	I2C_Write(0, SSD1306Addr, oled64_initbuf, sizeof(oled64_initbuf)); // init display (abstract into function)
    10da:	2316      	movs	r3, #22
    10dc:	213c      	movs	r1, #60	; 0x3c
    10de:	2000      	movs	r0, #0
    10e0:	4c0f      	ldr	r4, [pc, #60]	; (1120 <main+0x60>)
    10e2:	47a0      	blx	r4
	
	oledFill(0);
    10e4:	2000      	movs	r0, #0
    10e6:	4b0f      	ldr	r3, [pc, #60]	; (1124 <main+0x64>)
    10e8:	4798      	blx	r3
	oledWriteString(0,0,"Emily is a Cutie!!!!!",FONT_SMALL);
    10ea:	2302      	movs	r3, #2
    10ec:	4a0e      	ldr	r2, [pc, #56]	; (1128 <main+0x68>)
    10ee:	2100      	movs	r1, #0
    10f0:	2000      	movs	r0, #0
    10f2:	4c0e      	ldr	r4, [pc, #56]	; (112c <main+0x6c>)
    10f4:	47a0      	blx	r4
    10f6:	2510      	movs	r5, #16
	
	for (int i=0; i<64; i++)
	{
		for(int f=0; f<130; f += 5)
		{
			oledSetPixel(127-f, 16+i, 1);
    10f8:	4e0d      	ldr	r6, [pc, #52]	; (1130 <main+0x70>)
    10fa:	e002      	b.n	1102 <main+0x42>
    10fc:	3501      	adds	r5, #1
	for (int i=0; i<64; i++)
    10fe:	2d50      	cmp	r5, #80	; 0x50
    1100:	d008      	beq.n	1114 <main+0x54>
{
    1102:	247f      	movs	r4, #127	; 0x7f
			oledSetPixel(127-f, 16+i, 1);
    1104:	2201      	movs	r2, #1
    1106:	0029      	movs	r1, r5
    1108:	0020      	movs	r0, r4
    110a:	47b0      	blx	r6
    110c:	3c05      	subs	r4, #5
		for(int f=0; f<130; f += 5)
    110e:	1ce3      	adds	r3, r4, #3
    1110:	d1f8      	bne.n	1104 <main+0x44>
    1112:	e7f3      	b.n	10fc <main+0x3c>
    1114:	e7fe      	b.n	1114 <main+0x54>
    1116:	46c0      	nop			; (mov r8, r8)
    1118:	0000011d 	.word	0x0000011d
    111c:	00001438 	.word	0x00001438
    1120:	00000329 	.word	0x00000329
    1124:	000012b9 	.word	0x000012b9
    1128:	00001450 	.word	0x00001450
    112c:	00001241 	.word	0x00001241
    1130:	000011d5 	.word	0x000011d5

00001134 <oledWriteCommand>:
	oledWriteCommand(0xaE); // turn off OLED
}

	// Send a single byte command to the OLED controller
static void oledWriteCommand(unsigned char c)
{
    1134:	b510      	push	{r4, lr}
    1136:	b082      	sub	sp, #8
	unsigned char buf[2];

	buf[0] = 0x00; // command introducer
    1138:	aa01      	add	r2, sp, #4
    113a:	2300      	movs	r3, #0
    113c:	7013      	strb	r3, [r2, #0]
	buf[1] = c;
    113e:	7050      	strb	r0, [r2, #1]
	I2C_Write(0, SSD1306Addr, buf, 2);
    1140:	3302      	adds	r3, #2
    1142:	213c      	movs	r1, #60	; 0x3c
    1144:	2000      	movs	r0, #0
    1146:	4c02      	ldr	r4, [pc, #8]	; (1150 <oledWriteCommand+0x1c>)
    1148:	47a0      	blx	r4

} /* oledWriteCommand() */
    114a:	b002      	add	sp, #8
    114c:	bd10      	pop	{r4, pc}
    114e:	46c0      	nop			; (mov r8, r8)
    1150:	00000329 	.word	0x00000329

00001154 <oledSetPosition>:
} 
	
	
				
static void oledSetPosition(int x, int y)
{
    1154:	b570      	push	{r4, r5, r6, lr}
    1156:	0005      	movs	r5, r0
	iScreenOffset = (y*128)+x;
    1158:	01cb      	lsls	r3, r1, #7
    115a:	181b      	adds	r3, r3, r0
    115c:	4a08      	ldr	r2, [pc, #32]	; (1180 <oledSetPosition+0x2c>)
    115e:	6013      	str	r3, [r2, #0]

	oledWriteCommand(0xb0 | y); // go to page Y
    1160:	2050      	movs	r0, #80	; 0x50
    1162:	4240      	negs	r0, r0
    1164:	4308      	orrs	r0, r1
    1166:	b2c0      	uxtb	r0, r0
    1168:	4e06      	ldr	r6, [pc, #24]	; (1184 <oledSetPosition+0x30>)
    116a:	47b0      	blx	r6
	oledWriteCommand(0x00 | (x & 0xf)); // // lower col addr
    116c:	240f      	movs	r4, #15
    116e:	0020      	movs	r0, r4
    1170:	4028      	ands	r0, r5
    1172:	47b0      	blx	r6
	oledWriteCommand(0x10 | ((x >> 4) & 0xf)); // upper col addr
    1174:	112d      	asrs	r5, r5, #4
    1176:	402c      	ands	r4, r5
    1178:	2010      	movs	r0, #16
    117a:	4320      	orrs	r0, r4
    117c:	47b0      	blx	r6
}
    117e:	bd70      	pop	{r4, r5, r6, pc}
    1180:	20000320 	.word	0x20000320
    1184:	00001135 	.word	0x00001135

00001188 <oledWriteDataBlock>:


	// Write a block of pixel data to the OLED
	// Length can be anything from 1 to 1024 (whole display)
static void oledWriteDataBlock(unsigned char *ucBuf, int iLen)
{
    1188:	b5f0      	push	{r4, r5, r6, r7, lr}
    118a:	b0a5      	sub	sp, #148	; 0x94
    118c:	000c      	movs	r4, r1
	unsigned char ucTemp[129];

	ucTemp[0] = 0x40; // data command
    118e:	ae03      	add	r6, sp, #12
    1190:	2340      	movs	r3, #64	; 0x40
    1192:	7033      	strb	r3, [r6, #0]
	memcpy(&ucTemp[1], ucBuf, iLen);
    1194:	000a      	movs	r2, r1
    1196:	9001      	str	r0, [sp, #4]
    1198:	0001      	movs	r1, r0
    119a:	ab02      	add	r3, sp, #8
    119c:	1d58      	adds	r0, r3, #5
    119e:	4f0a      	ldr	r7, [pc, #40]	; (11c8 <oledWriteDataBlock+0x40>)
    11a0:	47b8      	blx	r7
	I2C_Write(0, SSD1306Addr, ucTemp, iLen+1); //1024 for whole display?
    11a2:	1c63      	adds	r3, r4, #1
    11a4:	b29b      	uxth	r3, r3
    11a6:	0032      	movs	r2, r6
    11a8:	213c      	movs	r1, #60	; 0x3c
    11aa:	2000      	movs	r0, #0
    11ac:	4e07      	ldr	r6, [pc, #28]	; (11cc <oledWriteDataBlock+0x44>)
    11ae:	47b0      	blx	r6
					
	// Keep a copy in local buffer
	memcpy(&ucScreen[iScreenOffset], ucBuf, iLen);
    11b0:	4e07      	ldr	r6, [pc, #28]	; (11d0 <oledWriteDataBlock+0x48>)
    11b2:	0030      	movs	r0, r6
    11b4:	c820      	ldmia	r0!, {r5}
    11b6:	1940      	adds	r0, r0, r5
    11b8:	0022      	movs	r2, r4
    11ba:	9901      	ldr	r1, [sp, #4]
    11bc:	47b8      	blx	r7
	iScreenOffset += iLen;
    11be:	1964      	adds	r4, r4, r5
    11c0:	6034      	str	r4, [r6, #0]
}
    11c2:	b025      	add	sp, #148	; 0x94
    11c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    11c6:	46c0      	nop			; (mov r8, r8)
    11c8:	00001339 	.word	0x00001339
    11cc:	00000329 	.word	0x00000329
    11d0:	20000320 	.word	0x20000320

000011d4 <oledSetPixel>:

	// Set (or clear) an individual pixel
	// The local copy of the frame buffer is used to avoid
	// reading data from the display controller
int oledSetPixel(int x, int y, unsigned char ucColor)
{
    11d4:	b570      	push	{r4, r5, r6, lr}
    11d6:	b082      	sub	sp, #8
	int i;
	unsigned char uc, ucOld;

	i = ((y >> 3) * 128) + x;
    11d8:	10ce      	asrs	r6, r1, #3
    11da:	01f3      	lsls	r3, r6, #7
    11dc:	181b      	adds	r3, r3, r0
	if (i < 0 || i > 1023) // off the screen
    11de:	4c14      	ldr	r4, [pc, #80]	; (1230 <oledSetPixel+0x5c>)
    11e0:	42a3      	cmp	r3, r4
    11e2:	d822      	bhi.n	122a <oledSetPixel+0x56>
		return -1;
	uc = ucOld = ucScreen[i];
    11e4:	4d13      	ldr	r5, [pc, #76]	; (1234 <oledSetPixel+0x60>)
    11e6:	18eb      	adds	r3, r5, r3
    11e8:	791d      	ldrb	r5, [r3, #4]
	uc &= ~(0x1 << (y & 7));
    11ea:	2407      	movs	r4, #7
    11ec:	400c      	ands	r4, r1
    11ee:	2301      	movs	r3, #1
    11f0:	40a3      	lsls	r3, r4
    11f2:	b25b      	sxtb	r3, r3
    11f4:	b269      	sxtb	r1, r5
	if (ucColor)
    11f6:	2a00      	cmp	r2, #0
    11f8:	d113      	bne.n	1222 <oledSetPixel+0x4e>
	uc &= ~(0x1 << (y & 7));
    11fa:	4399      	bics	r1, r3
    11fc:	466b      	mov	r3, sp
    11fe:	71d9      	strb	r1, [r3, #7]
	{
		uc |= (0x1 << (y & 7));
	}
	if (uc != ucOld) // pixel changed
    1200:	466b      	mov	r3, sp
    1202:	79da      	ldrb	r2, [r3, #7]
	{
		oledSetPosition(x, y>>3);
		oledWriteDataBlock(&uc, 1);
	}
	return 0;
    1204:	2300      	movs	r3, #0
	if (uc != ucOld) // pixel changed
    1206:	42aa      	cmp	r2, r5
    1208:	d008      	beq.n	121c <oledSetPixel+0x48>
		oledSetPosition(x, y>>3);
    120a:	0031      	movs	r1, r6
    120c:	4b0a      	ldr	r3, [pc, #40]	; (1238 <oledSetPixel+0x64>)
    120e:	4798      	blx	r3
		oledWriteDataBlock(&uc, 1);
    1210:	2101      	movs	r1, #1
    1212:	466b      	mov	r3, sp
    1214:	1dd8      	adds	r0, r3, #7
    1216:	4b09      	ldr	r3, [pc, #36]	; (123c <oledSetPixel+0x68>)
    1218:	4798      	blx	r3
	return 0;
    121a:	2300      	movs	r3, #0
} /* oledSetPixel() */
    121c:	0018      	movs	r0, r3
    121e:	b002      	add	sp, #8
    1220:	bd70      	pop	{r4, r5, r6, pc}
		uc |= (0x1 << (y & 7));
    1222:	430b      	orrs	r3, r1
    1224:	466a      	mov	r2, sp
    1226:	71d3      	strb	r3, [r2, #7]
    1228:	e7ea      	b.n	1200 <oledSetPixel+0x2c>
		return -1;
    122a:	2301      	movs	r3, #1
    122c:	425b      	negs	r3, r3
    122e:	e7f5      	b.n	121c <oledSetPixel+0x48>
    1230:	000003ff 	.word	0x000003ff
    1234:	20000320 	.word	0x20000320
    1238:	00001155 	.word	0x00001155
    123c:	00001189 	.word	0x00001189

00001240 <oledWriteString>:
	// At the given col+row
	// The X position is in character widths (8 or 16)
	// The Y position is in memory pages (8 lines each)
					
int oledWriteString(int x, int y, char *szMsg, int iSize)
{
    1240:	b5f0      	push	{r4, r5, r6, r7, lr}
    1242:	b083      	sub	sp, #12
    1244:	0006      	movs	r6, r0
    1246:	9101      	str	r1, [sp, #4]
    1248:	0015      	movs	r5, r2
	int i, iLen;
	unsigned char *s;

	if (iSize < FONT_NORMAL || iSize > FONT_SMALL)
    124a:	2b02      	cmp	r3, #2
    124c:	d823      	bhi.n	1296 <oledWriteString+0x56>
	return -1;

	iLen = strlen(szMsg);
    124e:	0010      	movs	r0, r2
    1250:	4b15      	ldr	r3, [pc, #84]	; (12a8 <oledWriteString+0x68>)
    1252:	4798      	blx	r3
    1254:	0004      	movs	r4, r0
    1256:	0007      	movs	r7, r0
			oledWriteDataBlock(s, 8); // write character pattern
		}
	}*/

	// support for small font only
	oledSetPosition(x*6, y);
    1258:	0070      	lsls	r0, r6, #1
    125a:	1980      	adds	r0, r0, r6
    125c:	0040      	lsls	r0, r0, #1
    125e:	9901      	ldr	r1, [sp, #4]
    1260:	4b12      	ldr	r3, [pc, #72]	; (12ac <oledWriteString+0x6c>)
    1262:	4798      	blx	r3
	if (iLen + x > 21) iLen = 21 - x;
    1264:	19a4      	adds	r4, r4, r6
    1266:	2c15      	cmp	r4, #21
    1268:	dd01      	ble.n	126e <oledWriteString+0x2e>
    126a:	2715      	movs	r7, #21
    126c:	1bbf      	subs	r7, r7, r6
	if (iLen < 0) return -1;
    126e:	2f00      	cmp	r7, #0
    1270:	db14      	blt.n	129c <oledWriteString+0x5c>
	for (i=0; i<iLen; i++)
    1272:	dd16      	ble.n	12a2 <oledWriteString+0x62>
    1274:	002c      	movs	r4, r5
    1276:	19ed      	adds	r5, r5, r7
	{
		s = &ucSmallFont[(unsigned char)szMsg[i]*6];
    1278:	4f0d      	ldr	r7, [pc, #52]	; (12b0 <oledWriteString+0x70>)
		oledWriteDataBlock(s, 6);
    127a:	4e0e      	ldr	r6, [pc, #56]	; (12b4 <oledWriteString+0x74>)
		s = &ucSmallFont[(unsigned char)szMsg[i]*6];
    127c:	7823      	ldrb	r3, [r4, #0]
    127e:	0058      	lsls	r0, r3, #1
    1280:	18c0      	adds	r0, r0, r3
    1282:	0040      	lsls	r0, r0, #1
    1284:	1838      	adds	r0, r7, r0
		oledWriteDataBlock(s, 6);
    1286:	2106      	movs	r1, #6
    1288:	47b0      	blx	r6
    128a:	3401      	adds	r4, #1
	for (i=0; i<iLen; i++)
    128c:	42ac      	cmp	r4, r5
    128e:	d1f5      	bne.n	127c <oledWriteString+0x3c>
	}

	return 0;
    1290:	2000      	movs	r0, #0
} /* oledWriteString() */
    1292:	b003      	add	sp, #12
    1294:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return -1;
    1296:	2001      	movs	r0, #1
    1298:	4240      	negs	r0, r0
    129a:	e7fa      	b.n	1292 <oledWriteString+0x52>
	if (iLen < 0) return -1;
    129c:	2001      	movs	r0, #1
    129e:	4240      	negs	r0, r0
    12a0:	e7f7      	b.n	1292 <oledWriteString+0x52>
	return 0;
    12a2:	2000      	movs	r0, #0
    12a4:	e7f5      	b.n	1292 <oledWriteString+0x52>
    12a6:	46c0      	nop			; (mov r8, r8)
    12a8:	0000135b 	.word	0x0000135b
    12ac:	00001155 	.word	0x00001155
    12b0:	20000000 	.word	0x20000000
    12b4:	00001189 	.word	0x00001189

000012b8 <oledFill>:

// Fill the frame buffer with a byte pattern
// e.g. all off (0x00) or all on (0xff)
int oledFill(unsigned char ucData)
{
    12b8:	b570      	push	{r4, r5, r6, lr}
    12ba:	b0a0      	sub	sp, #128	; 0x80
    12bc:	0001      	movs	r1, r0
	int iLines, iCols;

	iLines = 8; // iLines = (oled_type == OLED_128x32 || oled_type == OLED_64x32) ? 4:8;
	iCols = 8; // iCols = (oled_type == OLED_64x32) ? 4:8;

    memset(temp, ucData, 128);
    12be:	2280      	movs	r2, #128	; 0x80
    12c0:	4668      	mov	r0, sp
    12c2:	4b08      	ldr	r3, [pc, #32]	; (12e4 <oledFill+0x2c>)
    12c4:	4798      	blx	r3
	for (y=0; y<iLines; y++)
    12c6:	2400      	movs	r4, #0
	{
		oledSetPosition(0,y); // set to (0,Y)
    12c8:	4e07      	ldr	r6, [pc, #28]	; (12e8 <oledFill+0x30>)
		oledWriteDataBlock(temp, iCols*16);
    12ca:	4d08      	ldr	r5, [pc, #32]	; (12ec <oledFill+0x34>)
		oledSetPosition(0,y); // set to (0,Y)
    12cc:	0021      	movs	r1, r4
    12ce:	2000      	movs	r0, #0
    12d0:	47b0      	blx	r6
		oledWriteDataBlock(temp, iCols*16);
    12d2:	2180      	movs	r1, #128	; 0x80
    12d4:	4668      	mov	r0, sp
    12d6:	47a8      	blx	r5
	for (y=0; y<iLines; y++)
    12d8:	3401      	adds	r4, #1
    12da:	2c08      	cmp	r4, #8
    12dc:	d1f6      	bne.n	12cc <oledFill+0x14>
	} // for y
	
	return 0;
} /* oledFill() */
    12de:	2000      	movs	r0, #0
    12e0:	b020      	add	sp, #128	; 0x80
    12e2:	bd70      	pop	{r4, r5, r6, pc}
    12e4:	0000134b 	.word	0x0000134b
    12e8:	00001155 	.word	0x00001155
    12ec:	00001189 	.word	0x00001189

000012f0 <__libc_init_array>:
    12f0:	b570      	push	{r4, r5, r6, lr}
    12f2:	2600      	movs	r6, #0
    12f4:	4d0c      	ldr	r5, [pc, #48]	; (1328 <__libc_init_array+0x38>)
    12f6:	4c0d      	ldr	r4, [pc, #52]	; (132c <__libc_init_array+0x3c>)
    12f8:	1b64      	subs	r4, r4, r5
    12fa:	10a4      	asrs	r4, r4, #2
    12fc:	42a6      	cmp	r6, r4
    12fe:	d109      	bne.n	1314 <__libc_init_array+0x24>
    1300:	2600      	movs	r6, #0
    1302:	f000 f8b1 	bl	1468 <_init>
    1306:	4d0a      	ldr	r5, [pc, #40]	; (1330 <__libc_init_array+0x40>)
    1308:	4c0a      	ldr	r4, [pc, #40]	; (1334 <__libc_init_array+0x44>)
    130a:	1b64      	subs	r4, r4, r5
    130c:	10a4      	asrs	r4, r4, #2
    130e:	42a6      	cmp	r6, r4
    1310:	d105      	bne.n	131e <__libc_init_array+0x2e>
    1312:	bd70      	pop	{r4, r5, r6, pc}
    1314:	00b3      	lsls	r3, r6, #2
    1316:	58eb      	ldr	r3, [r5, r3]
    1318:	4798      	blx	r3
    131a:	3601      	adds	r6, #1
    131c:	e7ee      	b.n	12fc <__libc_init_array+0xc>
    131e:	00b3      	lsls	r3, r6, #2
    1320:	58eb      	ldr	r3, [r5, r3]
    1322:	4798      	blx	r3
    1324:	3601      	adds	r6, #1
    1326:	e7f2      	b.n	130e <__libc_init_array+0x1e>
    1328:	00001474 	.word	0x00001474
    132c:	00001474 	.word	0x00001474
    1330:	00001474 	.word	0x00001474
    1334:	00001478 	.word	0x00001478

00001338 <memcpy>:
    1338:	2300      	movs	r3, #0
    133a:	b510      	push	{r4, lr}
    133c:	429a      	cmp	r2, r3
    133e:	d100      	bne.n	1342 <memcpy+0xa>
    1340:	bd10      	pop	{r4, pc}
    1342:	5ccc      	ldrb	r4, [r1, r3]
    1344:	54c4      	strb	r4, [r0, r3]
    1346:	3301      	adds	r3, #1
    1348:	e7f8      	b.n	133c <memcpy+0x4>

0000134a <memset>:
    134a:	0003      	movs	r3, r0
    134c:	1882      	adds	r2, r0, r2
    134e:	4293      	cmp	r3, r2
    1350:	d100      	bne.n	1354 <memset+0xa>
    1352:	4770      	bx	lr
    1354:	7019      	strb	r1, [r3, #0]
    1356:	3301      	adds	r3, #1
    1358:	e7f9      	b.n	134e <memset+0x4>

0000135a <strlen>:
    135a:	2300      	movs	r3, #0
    135c:	5cc2      	ldrb	r2, [r0, r3]
    135e:	3301      	adds	r3, #1
    1360:	2a00      	cmp	r2, #0
    1362:	d1fb      	bne.n	135c <strlen+0x2>
    1364:	1e58      	subs	r0, r3, #1
    1366:	4770      	bx	lr
    1368:	682f2e2e 	.word	0x682f2e2e
    136c:	732f6c61 	.word	0x732f6c61
    1370:	682f6372 	.word	0x682f6372
    1374:	695f6c61 	.word	0x695f6c61
    1378:	6d5f6332 	.word	0x6d5f6332
    137c:	6e79735f 	.word	0x6e79735f
    1380:	00632e63 	.word	0x00632e63
    1384:	682f2e2e 	.word	0x682f2e2e
    1388:	732f6c61 	.word	0x732f6c61
    138c:	682f6372 	.word	0x682f6372
    1390:	695f6c61 	.word	0x695f6c61
    1394:	00632e6f 	.word	0x00632e6f
    1398:	682f2e2e 	.word	0x682f2e2e
    139c:	732f6c61 	.word	0x732f6c61
    13a0:	682f6372 	.word	0x682f6372
    13a4:	745f6c61 	.word	0x745f6c61
    13a8:	72656d69 	.word	0x72656d69
    13ac:	0000632e 	.word	0x0000632e
    13b0:	682f2e2e 	.word	0x682f2e2e
    13b4:	732f6c61 	.word	0x732f6c61
    13b8:	682f6372 	.word	0x682f6372
    13bc:	755f6c61 	.word	0x755f6c61
    13c0:	74726173 	.word	0x74726173
    13c4:	6e79735f 	.word	0x6e79735f
    13c8:	00632e63 	.word	0x00632e63
    13cc:	682f2e2e 	.word	0x682f2e2e
    13d0:	752f6c61 	.word	0x752f6c61
    13d4:	736c6974 	.word	0x736c6974
    13d8:	6372732f 	.word	0x6372732f
    13dc:	6974752f 	.word	0x6974752f
    13e0:	6c5f736c 	.word	0x6c5f736c
    13e4:	2e747369 	.word	0x2e747369
    13e8:	00000063 	.word	0x00000063
    13ec:	682f2e2e 	.word	0x682f2e2e
    13f0:	722f6c70 	.word	0x722f6c70
    13f4:	682f6374 	.word	0x682f6374
    13f8:	725f6c70 	.word	0x725f6c70
    13fc:	632e6374 	.word	0x632e6374
    1400:	00000000 	.word	0x00000000

00001404 <_i2cms>:
    1404:	00000000 00200014 00000100 00000f0e     ...... .........
    1414:	00d70000 003d0900 682f2e2e 732f6c70     ......=.../hpl/s
    1424:	6f637265 70682f6d 65735f6c 6d6f6372     ercom/hpl_sercom
    1434:	0000632e 3fa8ae00 a14000d3 8112dac8     .c.....?..@.....
    1444:	d5a6a4ff af148d80 00000220 6c696d45     ........ ...Emil
    1454:	73692079 43206120 65697475 21212121     y is a Cutie!!!!
    1464:	00000021                                !...

00001468 <_init>:
    1468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    146a:	46c0      	nop			; (mov r8, r8)
    146c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    146e:	bc08      	pop	{r3}
    1470:	469e      	mov	lr, r3
    1472:	4770      	bx	lr

00001474 <__init_array_start>:
    1474:	000000e5 	.word	0x000000e5

00001478 <_fini>:
    1478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    147a:	46c0      	nop			; (mov r8, r8)
    147c:	bcf8      	pop	{r3, r4, r5, r6, r7}
    147e:	bc08      	pop	{r3}
    1480:	469e      	mov	lr, r3
    1482:	4770      	bx	lr

00001484 <__fini_array_start>:
    1484:	000000bd 	.word	0x000000bd
