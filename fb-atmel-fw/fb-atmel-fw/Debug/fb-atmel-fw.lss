
fb-atmel-fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001508  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000000  20000000  20000000  00011508  2**0
                  CONTENTS
  2 .bkupram      00000000  47000000  47000000  00011508  2**0
                  CONTENTS
  3 .qspi         00000000  04000000  04000000  00011508  2**0
                  CONTENTS
  4 .bss          0000009c  20000000  20000000  00020000  2**2
                  ALLOC
  5 .stack        0000c004  2000009c  2000009c  00020000  2**0
                  ALLOC
  6 .ARM.attributes 0000002e  00000000  00000000  00011508  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  00011536  2**0
                  CONTENTS, READONLY
  8 .debug_info   00029e68  00000000  00000000  0001158f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003c97  00000000  00000000  0003b3f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000ecfd  00000000  00000000  0003f08e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000be8  00000000  00000000  0004dd8b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00001030  00000000  00000000  0004e973  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0002a6ab  00000000  00000000  0004f9a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000162d4  00000000  00000000  0007a04e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000e547e  00000000  00000000  00090322  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00001e6c  00000000  00000000  001757a0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	a0 c0 00 20 e1 02 00 00 dd 02 00 00 dd 02 00 00     ... ............
      10:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      2c:	dd 02 00 00 dd 02 00 00 00 00 00 00 dd 02 00 00     ................
      3c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      4c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      5c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      6c:	99 10 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      7c:	dd 02 00 00 dd 02 00 00 5d 0e 00 00 69 0e 00 00     ........]...i...
      8c:	75 0e 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     u...............
      9c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      ac:	dd 02 00 00 dd 02 00 00 55 0f 00 00 69 0f 00 00     ........U...i...
      bc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      cc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
      dc:	dd 02 00 00 dd 02 00 00 dd 02 00 00 00 00 00 00     ................
	...
      f4:	e9 0f 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     104:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     114:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     124:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     134:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     144:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     154:	dd 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     180:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     190:	00 00 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1a0:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1b0:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1c0:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     1d0:	dd 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
	...
     1ec:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
	...
     20c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     21c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     22c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     23c:	dd 02 00 00 00 00 00 00 dd 02 00 00 dd 02 00 00     ................
     24c:	dd 02 00 00 dd 02 00 00 dd 02 00 00 dd 02 00 00     ................
     25c:	dd 02 00 00 00 00 00 00                             ........

00000264 <__do_global_dtors_aux>:
     264:	b510      	push	{r4, lr}
     266:	4c05      	ldr	r4, [pc, #20]	; (27c <__do_global_dtors_aux+0x18>)
     268:	7823      	ldrb	r3, [r4, #0]
     26a:	b933      	cbnz	r3, 27a <__do_global_dtors_aux+0x16>
     26c:	4b04      	ldr	r3, [pc, #16]	; (280 <__do_global_dtors_aux+0x1c>)
     26e:	b113      	cbz	r3, 276 <__do_global_dtors_aux+0x12>
     270:	4804      	ldr	r0, [pc, #16]	; (284 <__do_global_dtors_aux+0x20>)
     272:	f3af 8000 	nop.w
     276:	2301      	movs	r3, #1
     278:	7023      	strb	r3, [r4, #0]
     27a:	bd10      	pop	{r4, pc}
     27c:	20000000 	.word	0x20000000
     280:	00000000 	.word	0x00000000
     284:	00001508 	.word	0x00001508

00000288 <frame_dummy>:
     288:	4b0c      	ldr	r3, [pc, #48]	; (2bc <frame_dummy+0x34>)
     28a:	b143      	cbz	r3, 29e <frame_dummy+0x16>
     28c:	480c      	ldr	r0, [pc, #48]	; (2c0 <frame_dummy+0x38>)
     28e:	490d      	ldr	r1, [pc, #52]	; (2c4 <frame_dummy+0x3c>)
     290:	b510      	push	{r4, lr}
     292:	f3af 8000 	nop.w
     296:	480c      	ldr	r0, [pc, #48]	; (2c8 <frame_dummy+0x40>)
     298:	6803      	ldr	r3, [r0, #0]
     29a:	b923      	cbnz	r3, 2a6 <frame_dummy+0x1e>
     29c:	bd10      	pop	{r4, pc}
     29e:	480a      	ldr	r0, [pc, #40]	; (2c8 <frame_dummy+0x40>)
     2a0:	6803      	ldr	r3, [r0, #0]
     2a2:	b933      	cbnz	r3, 2b2 <frame_dummy+0x2a>
     2a4:	4770      	bx	lr
     2a6:	4b09      	ldr	r3, [pc, #36]	; (2cc <frame_dummy+0x44>)
     2a8:	2b00      	cmp	r3, #0
     2aa:	d0f7      	beq.n	29c <frame_dummy+0x14>
     2ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     2b0:	4718      	bx	r3
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <frame_dummy+0x44>)
     2b4:	2b00      	cmp	r3, #0
     2b6:	d0f5      	beq.n	2a4 <frame_dummy+0x1c>
     2b8:	4718      	bx	r3
     2ba:	bf00      	nop
     2bc:	00000000 	.word	0x00000000
     2c0:	00001508 	.word	0x00001508
     2c4:	20000004 	.word	0x20000004
     2c8:	00001508 	.word	0x00001508
     2cc:	00000000 	.word	0x00000000

000002d0 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     2d0:	b508      	push	{r3, lr}
	system_init();
     2d2:	4b01      	ldr	r3, [pc, #4]	; (2d8 <atmel_start_init+0x8>)
     2d4:	4798      	blx	r3
     2d6:	bd08      	pop	{r3, pc}
     2d8:	00000741 	.word	0x00000741

000002dc <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     2dc:	e7fe      	b.n	2dc <Dummy_Handler>
	...

000002e0 <Reset_Handler>:
{
     2e0:	b508      	push	{r3, lr}
        if (pSrc != pDest) {
     2e2:	4b1c      	ldr	r3, [pc, #112]	; (354 <Reset_Handler+0x74>)
     2e4:	4a1c      	ldr	r2, [pc, #112]	; (358 <Reset_Handler+0x78>)
     2e6:	429a      	cmp	r2, r3
     2e8:	d010      	beq.n	30c <Reset_Handler+0x2c>
                for (; pDest < &_erelocate;) {
     2ea:	4b1c      	ldr	r3, [pc, #112]	; (35c <Reset_Handler+0x7c>)
     2ec:	4a19      	ldr	r2, [pc, #100]	; (354 <Reset_Handler+0x74>)
     2ee:	429a      	cmp	r2, r3
     2f0:	d20c      	bcs.n	30c <Reset_Handler+0x2c>
     2f2:	3b01      	subs	r3, #1
     2f4:	1a9b      	subs	r3, r3, r2
     2f6:	f023 0303 	bic.w	r3, r3, #3
     2fa:	3304      	adds	r3, #4
     2fc:	4413      	add	r3, r2
     2fe:	4916      	ldr	r1, [pc, #88]	; (358 <Reset_Handler+0x78>)
                        *pDest++ = *pSrc++;
     300:	f851 0b04 	ldr.w	r0, [r1], #4
     304:	f842 0b04 	str.w	r0, [r2], #4
                for (; pDest < &_erelocate;) {
     308:	429a      	cmp	r2, r3
     30a:	d1f9      	bne.n	300 <Reset_Handler+0x20>
        for (pDest = &_szero; pDest < &_ezero;) {
     30c:	4b14      	ldr	r3, [pc, #80]	; (360 <Reset_Handler+0x80>)
     30e:	4a15      	ldr	r2, [pc, #84]	; (364 <Reset_Handler+0x84>)
     310:	429a      	cmp	r2, r3
     312:	d20a      	bcs.n	32a <Reset_Handler+0x4a>
     314:	3b01      	subs	r3, #1
     316:	1a9b      	subs	r3, r3, r2
     318:	f023 0303 	bic.w	r3, r3, #3
     31c:	3304      	adds	r3, #4
     31e:	4413      	add	r3, r2
                *pDest++ = 0;
     320:	2100      	movs	r1, #0
     322:	f842 1b04 	str.w	r1, [r2], #4
        for (pDest = &_szero; pDest < &_ezero;) {
     326:	4293      	cmp	r3, r2
     328:	d1fb      	bne.n	322 <Reset_Handler+0x42>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     32a:	4b0f      	ldr	r3, [pc, #60]	; (368 <Reset_Handler+0x88>)
     32c:	4a0f      	ldr	r2, [pc, #60]	; (36c <Reset_Handler+0x8c>)
     32e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
     332:	609a      	str	r2, [r3, #8]
        SCB->CPACR |=  (0xFu << 20);
     334:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
     338:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
     33c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     340:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     344:	f3bf 8f6f 	isb	sy
        __libc_init_array();
     348:	4b09      	ldr	r3, [pc, #36]	; (370 <Reset_Handler+0x90>)
     34a:	4798      	blx	r3
        main();
     34c:	4b09      	ldr	r3, [pc, #36]	; (374 <Reset_Handler+0x94>)
     34e:	4798      	blx	r3
     350:	e7fe      	b.n	350 <Reset_Handler+0x70>
     352:	bf00      	nop
     354:	20000000 	.word	0x20000000
     358:	00001508 	.word	0x00001508
     35c:	20000000 	.word	0x20000000
     360:	2000009c 	.word	0x2000009c
     364:	20000000 	.word	0x20000000
     368:	e000ed00 	.word	0xe000ed00
     36c:	00000000 	.word	0x00000000
     370:	00001305 	.word	0x00001305
     374:	000012f1 	.word	0x000012f1

00000378 <EXTERNAL_IRQ_0_init>:
struct i2c_s_sync_descriptor I2C_0;

struct wdt_descriptor WDT_0;

void EXTERNAL_IRQ_0_init(void)
{
     378:	b508      	push	{r3, lr}
}

static inline void hri_gclk_write_PCHCTRL_reg(const void *const hw, uint8_t index, hri_gclk_pchctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->PCHCTRL[index].reg = data;
     37a:	2040      	movs	r0, #64	; 0x40
     37c:	4b2e      	ldr	r3, [pc, #184]	; (438 <EXTERNAL_IRQ_0_init+0xc0>)
     37e:	f8c3 0090 	str.w	r0, [r3, #144]	; 0x90
}

static inline void hri_mclk_set_APBAMASK_EIC_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_EIC;
     382:	4a2e      	ldr	r2, [pc, #184]	; (43c <EXTERNAL_IRQ_0_init+0xc4>)
     384:	6953      	ldr	r3, [r2, #20]
     386:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     38a:	6153      	str	r3, [r2, #20]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     38c:	4b2c      	ldr	r3, [pc, #176]	; (440 <EXTERNAL_IRQ_0_init+0xc8>)
     38e:	2220      	movs	r2, #32
     390:	605a      	str	r2, [r3, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     392:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     396:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     39a:	629a      	str	r2, [r3, #40]	; 0x28
     39c:	4929      	ldr	r1, [pc, #164]	; (444 <EXTERNAL_IRQ_0_init+0xcc>)
     39e:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3a0:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
     3a4:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     3a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3ac:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
	tmp &= ~PORT_PINCFG_PMUXEN;
     3b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3b4:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3bc:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     3c0:	f002 020f 	and.w	r2, r2, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3c4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3c8:	6058      	str	r0, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3ca:	4a1f      	ldr	r2, [pc, #124]	; (448 <EXTERNAL_IRQ_0_init+0xd0>)
     3cc:	629a      	str	r2, [r3, #40]	; 0x28
     3ce:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     3d0:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
     3d4:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     3d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3dc:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
	tmp &= ~PORT_PINCFG_PMUXEN;
     3e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     3e4:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     3ec:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     3f0:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     3f4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     3f8:	2280      	movs	r2, #128	; 0x80
     3fa:	605a      	str	r2, [r3, #4]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3fc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
     400:	f502 3200 	add.w	r2, r2, #131072	; 0x20000
     404:	629a      	str	r2, [r3, #40]	; 0x28
     406:	6299      	str	r1, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     408:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
     40c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     410:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     414:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	tmp &= ~PORT_PINCFG_PMUXEN;
     418:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     41c:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     420:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     424:	f893 2033 	ldrb.w	r2, [r3, #51]	; 0x33
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     428:	f002 020f 	and.w	r2, r2, #15
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     42c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA07, PINMUX_PA07A_EIC_EXTINT7);

	ext_irq_init();
     430:	4b06      	ldr	r3, [pc, #24]	; (44c <EXTERNAL_IRQ_0_init+0xd4>)
     432:	4798      	blx	r3
     434:	bd08      	pop	{r3, pc}
     436:	bf00      	nop
     438:	40001c00 	.word	0x40001c00
     43c:	40000800 	.word	0x40000800
     440:	41008000 	.word	0x41008000
     444:	c0020000 	.word	0xc0020000
     448:	40020040 	.word	0x40020040
     44c:	0000084d 	.word	0x0000084d

00000450 <FLASH_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_NVMCTRL;
     450:	4a02      	ldr	r2, [pc, #8]	; (45c <FLASH_0_CLOCK_init+0xc>)
     452:	6913      	ldr	r3, [r2, #16]
     454:	f043 0340 	orr.w	r3, r3, #64	; 0x40
     458:	6113      	str	r3, [r2, #16]
     45a:	4770      	bx	lr
     45c:	40000800 	.word	0x40000800

00000460 <FLASH_0_init>:

	hri_mclk_set_AHBMASK_NVMCTRL_bit(MCLK);
}

void FLASH_0_init(void)
{
     460:	b508      	push	{r3, lr}
	FLASH_0_CLOCK_init();
     462:	4b03      	ldr	r3, [pc, #12]	; (470 <FLASH_0_init+0x10>)
     464:	4798      	blx	r3
	flash_init(&FLASH_0, NVMCTRL);
     466:	4903      	ldr	r1, [pc, #12]	; (474 <FLASH_0_init+0x14>)
     468:	4803      	ldr	r0, [pc, #12]	; (478 <FLASH_0_init+0x18>)
     46a:	4b04      	ldr	r3, [pc, #16]	; (47c <FLASH_0_init+0x1c>)
     46c:	4798      	blx	r3
     46e:	bd08      	pop	{r3, pc}
     470:	00000451 	.word	0x00000451
     474:	41004000 	.word	0x41004000
     478:	20000040 	.word	0x20000040
     47c:	0000088d 	.word	0x0000088d

00000480 <QUAD_SPI_0_PORT_init>:
}

void QUAD_SPI_0_PORT_init(void)
{
     480:	b430      	push	{r4, r5}
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     482:	4b5a      	ldr	r3, [pc, #360]	; (5ec <QUAD_SPI_0_PORT_init+0x16c>)
     484:	f44f 6500 	mov.w	r5, #2048	; 0x800
     488:	f8c3 5084 	str.w	r5, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     48c:	4a58      	ldr	r2, [pc, #352]	; (5f0 <QUAD_SPI_0_PORT_init+0x170>)
     48e:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     492:	4858      	ldr	r0, [pc, #352]	; (5f4 <QUAD_SPI_0_PORT_init+0x174>)
     494:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     498:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
     49c:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4a0:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4a4:	f893 20cb 	ldrb.w	r2, [r3, #203]	; 0xcb
	tmp &= ~PORT_PINCFG_PMUXEN;
     4a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4ac:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4b0:	f883 20cb 	strb.w	r2, [r3, #203]	; 0xcb
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4b4:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     4b8:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     4bc:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4c0:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     4c4:	f44f 7280 	mov.w	r2, #256	; 0x100
     4c8:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     4ca:	494b      	ldr	r1, [pc, #300]	; (5f8 <QUAD_SPI_0_PORT_init+0x178>)
     4cc:	6299      	str	r1, [r3, #40]	; 0x28
     4ce:	f04f 4440 	mov.w	r4, #3221225472	; 0xc0000000
     4d2:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     4d4:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     4d6:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
     4da:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     4de:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     4e2:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
	tmp &= ~PORT_PINCFG_PMUXEN;
     4e6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     4ea:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     4ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     4f2:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     4f6:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     4fa:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     4fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     502:	f44f 7200 	mov.w	r2, #512	; 0x200
     506:	609a      	str	r2, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     508:	f501 7180 	add.w	r1, r1, #256	; 0x100
     50c:	6299      	str	r1, [r3, #40]	; 0x28
     50e:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     510:	615a      	str	r2, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     512:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
     516:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     51a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     51e:	f893 2049 	ldrb.w	r2, [r3, #73]	; 0x49
	tmp &= ~PORT_PINCFG_PMUXEN;
     522:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     526:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     52a:	f883 2049 	strb.w	r2, [r3, #73]	; 0x49
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     52e:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     532:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     536:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     53a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     53e:	f44f 6180 	mov.w	r1, #1024	; 0x400
     542:	6099      	str	r1, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     544:	4a2d      	ldr	r2, [pc, #180]	; (5fc <QUAD_SPI_0_PORT_init+0x17c>)
     546:	629a      	str	r2, [r3, #40]	; 0x28
     548:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     54a:	6159      	str	r1, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     54c:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
     550:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     554:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     558:	f893 204a 	ldrb.w	r2, [r3, #74]	; 0x4a
	tmp &= ~PORT_PINCFG_PMUXEN;
     55c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     560:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     564:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     568:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     56c:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     570:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     574:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     578:	609d      	str	r5, [r3, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     57a:	4a21      	ldr	r2, [pc, #132]	; (600 <QUAD_SPI_0_PORT_init+0x180>)
     57c:	629a      	str	r2, [r3, #40]	; 0x28
     57e:	629c      	str	r4, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].OUTCLR.reg = mask;
     580:	615d      	str	r5, [r3, #20]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     582:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
     586:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     58a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     58e:	f893 204b 	ldrb.w	r2, [r3, #75]	; 0x4b
	tmp &= ~PORT_PINCFG_PMUXEN;
     592:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     596:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     59a:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     59e:	f893 2035 	ldrb.w	r2, [r3, #53]	; 0x35
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     5a2:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     5a6:	f042 0270 	orr.w	r2, r2, #112	; 0x70
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     5ae:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     5b2:	4a14      	ldr	r2, [pc, #80]	; (604 <QUAD_SPI_0_PORT_init+0x184>)
     5b4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
     5b8:	f8c3 00a8 	str.w	r0, [r3, #168]	; 0xa8
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     5bc:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
     5c0:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     5c4:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     5c8:	f893 20ca 	ldrb.w	r2, [r3, #202]	; 0xca
	tmp &= ~PORT_PINCFG_PMUXEN;
     5cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     5d0:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     5d4:	f883 20ca 	strb.w	r2, [r3, #202]	; 0xca
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     5d8:	f893 20b5 	ldrb.w	r2, [r3, #181]	; 0xb5
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     5dc:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     5e0:	f042 0207 	orr.w	r2, r2, #7
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     5e4:	f883 20b5 	strb.w	r2, [r3, #181]	; 0xb5
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PB10, PINMUX_PB10H_QSPI_SCK);
}
     5e8:	bc30      	pop	{r4, r5}
     5ea:	4770      	bx	lr
     5ec:	41008000 	.word	0x41008000
     5f0:	40020800 	.word	0x40020800
     5f4:	c0020000 	.word	0xc0020000
     5f8:	40000100 	.word	0x40000100
     5fc:	40000400 	.word	0x40000400
     600:	40000800 	.word	0x40000800
     604:	40020400 	.word	0x40020400

00000608 <QUAD_SPI_0_CLOCK_init>:
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI;
     608:	4b06      	ldr	r3, [pc, #24]	; (624 <QUAD_SPI_0_CLOCK_init+0x1c>)
     60a:	691a      	ldr	r2, [r3, #16]
     60c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     610:	611a      	str	r2, [r3, #16]
	((Mclk *)hw)->AHBMASK.reg |= MCLK_AHBMASK_QSPI_2X;
     612:	691a      	ldr	r2, [r3, #16]
     614:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
     618:	611a      	str	r2, [r3, #16]
}

static inline void hri_mclk_set_APBCMASK_QSPI_bit(const void *const hw)
{
	MCLK_CRITICAL_SECTION_ENTER();
	((Mclk *)hw)->APBCMASK.reg |= MCLK_APBCMASK_QSPI;
     61a:	69da      	ldr	r2, [r3, #28]
     61c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
     620:	61da      	str	r2, [r3, #28]
     622:	4770      	bx	lr
     624:	40000800 	.word	0x40000800

00000628 <QUAD_SPI_0_init>:
	hri_mclk_set_AHBMASK_QSPI_2X_bit(MCLK);
	hri_mclk_set_APBCMASK_QSPI_bit(MCLK);
}

void QUAD_SPI_0_init(void)
{
     628:	b508      	push	{r3, lr}
	QUAD_SPI_0_CLOCK_init();
     62a:	4b04      	ldr	r3, [pc, #16]	; (63c <QUAD_SPI_0_init+0x14>)
     62c:	4798      	blx	r3
	qspi_sync_init(&QUAD_SPI_0, QSPI);
     62e:	4904      	ldr	r1, [pc, #16]	; (640 <QUAD_SPI_0_init+0x18>)
     630:	4804      	ldr	r0, [pc, #16]	; (644 <QUAD_SPI_0_init+0x1c>)
     632:	4b05      	ldr	r3, [pc, #20]	; (648 <QUAD_SPI_0_init+0x20>)
     634:	4798      	blx	r3
	QUAD_SPI_0_PORT_init();
     636:	4b05      	ldr	r3, [pc, #20]	; (64c <QUAD_SPI_0_init+0x24>)
     638:	4798      	blx	r3
     63a:	bd08      	pop	{r3, pc}
     63c:	00000609 	.word	0x00000609
     640:	42003400 	.word	0x42003400
     644:	20000060 	.word	0x20000060
     648:	00000ab9 	.word	0x00000ab9
     64c:	00000481 	.word	0x00000481

00000650 <I2C_0_PORT_init>:
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     650:	4b16      	ldr	r3, [pc, #88]	; (6ac <I2C_0_PORT_init+0x5c>)
     652:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
     656:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     65a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     65e:	f893 2051 	ldrb.w	r2, [r3, #81]	; 0x51
	tmp &= ~PORT_PINCFG_PMUXEN;
     662:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     666:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     66a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     66e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     672:	f002 020f 	and.w	r2, r2, #15
	tmp |= PORT_PMUX_PMUXO(data);
     676:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     67a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     67e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
     682:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
     686:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     68a:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
	tmp &= ~PORT_PINCFG_PMUXEN;
     68e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     692:	f042 0201 	orr.w	r2, r2, #1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     696:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     69a:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     69e:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
	tmp |= PORT_PMUX_PMUXE(data);
     6a2:	f042 0203 	orr.w	r2, r2, #3
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     6a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
     6aa:	4770      	bx	lr
     6ac:	41008000 	.word	0x41008000

000006b0 <I2C_0_CLOCK_init>:
     6b0:	4b06      	ldr	r3, [pc, #24]	; (6cc <I2C_0_CLOCK_init+0x1c>)
     6b2:	2240      	movs	r2, #64	; 0x40
     6b4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
     6b8:	2243      	movs	r2, #67	; 0x43
     6ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
	((Mclk *)hw)->APBBMASK.reg |= MCLK_APBBMASK_SERCOM3;
     6be:	4a04      	ldr	r2, [pc, #16]	; (6d0 <I2C_0_CLOCK_init+0x20>)
     6c0:	6993      	ldr	r3, [r2, #24]
     6c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
     6c6:	6193      	str	r3, [r2, #24]
     6c8:	4770      	bx	lr
     6ca:	bf00      	nop
     6cc:	40001c00 	.word	0x40001c00
     6d0:	40000800 	.word	0x40000800

000006d4 <I2C_0_init>:

	hri_mclk_set_APBBMASK_SERCOM3_bit(MCLK);
}

void I2C_0_init(void)
{
     6d4:	b508      	push	{r3, lr}
	I2C_0_CLOCK_init();
     6d6:	4b04      	ldr	r3, [pc, #16]	; (6e8 <I2C_0_init+0x14>)
     6d8:	4798      	blx	r3
	i2c_s_sync_init(&I2C_0, SERCOM3);
     6da:	4904      	ldr	r1, [pc, #16]	; (6ec <I2C_0_init+0x18>)
     6dc:	4804      	ldr	r0, [pc, #16]	; (6f0 <I2C_0_init+0x1c>)
     6de:	4b05      	ldr	r3, [pc, #20]	; (6f4 <I2C_0_init+0x20>)
     6e0:	4798      	blx	r3
	I2C_0_PORT_init();
     6e2:	4b05      	ldr	r3, [pc, #20]	; (6f8 <I2C_0_init+0x24>)
     6e4:	4798      	blx	r3
     6e6:	bd08      	pop	{r3, pc}
     6e8:	000006b1 	.word	0x000006b1
     6ec:	41014000 	.word	0x41014000
     6f0:	20000064 	.word	0x20000064
     6f4:	000009a9 	.word	0x000009a9
     6f8:	00000651 	.word	0x00000651

000006fc <WDT_0_CLOCK_init>:
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_WDT;
     6fc:	4a02      	ldr	r2, [pc, #8]	; (708 <WDT_0_CLOCK_init+0xc>)
     6fe:	6953      	ldr	r3, [r2, #20]
     700:	f443 7380 	orr.w	r3, r3, #256	; 0x100
     704:	6153      	str	r3, [r2, #20]
     706:	4770      	bx	lr
     708:	40000800 	.word	0x40000800

0000070c <WDT_0_init>:
{
	hri_mclk_set_APBAMASK_WDT_bit(MCLK);
}

void WDT_0_init(void)
{
     70c:	b508      	push	{r3, lr}
	WDT_0_CLOCK_init();
     70e:	4b06      	ldr	r3, [pc, #24]	; (728 <WDT_0_init+0x1c>)
     710:	4798      	blx	r3
 * \retval 0 Completed sucessfully.
 * \retval -1 Always on or enabled, don't need init again.
 */
static inline int32_t wdt_init(struct wdt_descriptor *const wdt, const void *hw)
{
	ASSERT(wdt && hw);
     712:	2248      	movs	r2, #72	; 0x48
     714:	4905      	ldr	r1, [pc, #20]	; (72c <WDT_0_init+0x20>)
     716:	2001      	movs	r0, #1
     718:	4b05      	ldr	r3, [pc, #20]	; (730 <WDT_0_init+0x24>)
     71a:	4798      	blx	r3

	wdt->dev.hw = (void *)hw;
     71c:	4805      	ldr	r0, [pc, #20]	; (734 <WDT_0_init+0x28>)
     71e:	4b06      	ldr	r3, [pc, #24]	; (738 <WDT_0_init+0x2c>)
     720:	6003      	str	r3, [r0, #0]

	return _wdt_init(&wdt->dev);
     722:	4b06      	ldr	r3, [pc, #24]	; (73c <WDT_0_init+0x30>)
     724:	4798      	blx	r3
     726:	bd08      	pop	{r3, pc}
     728:	000006fd 	.word	0x000006fd
     72c:	0000134c 	.word	0x0000134c
     730:	00000bfd 	.word	0x00000bfd
     734:	2000005c 	.word	0x2000005c
     738:	40002000 	.word	0x40002000
     73c:	00001285 	.word	0x00001285

00000740 <system_init>:
	wdt_init(&WDT_0, WDT);
}

void system_init(void)
{
     740:	b508      	push	{r3, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     742:	4b0c      	ldr	r3, [pc, #48]	; (774 <system_init+0x34>)
     744:	4798      	blx	r3
	init_mcu();

	EXTERNAL_IRQ_0_init();
     746:	4b0c      	ldr	r3, [pc, #48]	; (778 <system_init+0x38>)
     748:	4798      	blx	r3

	FLASH_0_init();
     74a:	4b0c      	ldr	r3, [pc, #48]	; (77c <system_init+0x3c>)
     74c:	4798      	blx	r3

	QUAD_SPI_0_init();
     74e:	4b0c      	ldr	r3, [pc, #48]	; (780 <system_init+0x40>)
     750:	4798      	blx	r3
	((Mclk *)hw)->APBAMASK.reg |= MCLK_APBAMASK_RTC;
     752:	4a0c      	ldr	r2, [pc, #48]	; (784 <system_init+0x44>)
     754:	6953      	ldr	r3, [r2, #20]
     756:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     75a:	6153      	str	r3, [r2, #20]
	timer_init(&TIMER_0, RTC, _rtc_get_timer());
     75c:	4b0a      	ldr	r3, [pc, #40]	; (788 <system_init+0x48>)
     75e:	4798      	blx	r3
     760:	4602      	mov	r2, r0
     762:	490a      	ldr	r1, [pc, #40]	; (78c <system_init+0x4c>)
     764:	480a      	ldr	r0, [pc, #40]	; (790 <system_init+0x50>)
     766:	4b0b      	ldr	r3, [pc, #44]	; (794 <system_init+0x54>)
     768:	4798      	blx	r3

	TIMER_0_init();

	I2C_0_init();
     76a:	4b0b      	ldr	r3, [pc, #44]	; (798 <system_init+0x58>)
     76c:	4798      	blx	r3

	WDT_0_init();
     76e:	4b0b      	ldr	r3, [pc, #44]	; (79c <system_init+0x5c>)
     770:	4798      	blx	r3
     772:	bd08      	pop	{r3, pc}
     774:	00000c65 	.word	0x00000c65
     778:	00000379 	.word	0x00000379
     77c:	00000461 	.word	0x00000461
     780:	00000629 	.word	0x00000629
     784:	40000800 	.word	0x40000800
     788:	00001095 	.word	0x00001095
     78c:	40002400 	.word	0x40002400
     790:	20000070 	.word	0x20000070
     794:	00000bc1 	.word	0x00000bc1
     798:	000006d5 	.word	0x000006d5
     79c:	0000070d 	.word	0x0000070d

000007a0 <I2C_0_example>:
	timer_add_task(&TIMER_0, &TIMER_0_task2);
	timer_start(&TIMER_0);
}

void I2C_0_example(void)
{
     7a0:	b510      	push	{r4, lr}
     7a2:	b082      	sub	sp, #8
	struct io_descriptor *io;
	uint8_t               c;

	i2c_s_sync_get_io_descriptor(&I2C_0, &io);
     7a4:	4c09      	ldr	r4, [pc, #36]	; (7cc <I2C_0_example+0x2c>)
     7a6:	a901      	add	r1, sp, #4
     7a8:	4620      	mov	r0, r4
     7aa:	4b09      	ldr	r3, [pc, #36]	; (7d0 <I2C_0_example+0x30>)
     7ac:	4798      	blx	r3
	i2c_s_sync_set_addr(&I2C_0, 0x10);
     7ae:	2110      	movs	r1, #16
     7b0:	4620      	mov	r0, r4
     7b2:	4b08      	ldr	r3, [pc, #32]	; (7d4 <I2C_0_example+0x34>)
     7b4:	4798      	blx	r3
	i2c_s_sync_enable(&I2C_0);
     7b6:	4620      	mov	r0, r4
     7b8:	4b07      	ldr	r3, [pc, #28]	; (7d8 <I2C_0_example+0x38>)
     7ba:	4798      	blx	r3

	io_read(io, &c, 1);
     7bc:	2201      	movs	r2, #1
     7be:	f10d 0103 	add.w	r1, sp, #3
     7c2:	9801      	ldr	r0, [sp, #4]
     7c4:	4b05      	ldr	r3, [pc, #20]	; (7dc <I2C_0_example+0x3c>)
     7c6:	4798      	blx	r3
}
     7c8:	b002      	add	sp, #8
     7ca:	bd10      	pop	{r4, pc}
     7cc:	20000064 	.word	0x20000064
     7d0:	00000a5d 	.word	0x00000a5d
     7d4:	000009f1 	.word	0x000009f1
     7d8:	00000a35 	.word	0x00000a35
     7dc:	00000a89 	.word	0x00000a89

000007e0 <atomic_enter_critical>:
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
     7e0:	f3ef 8310 	mrs	r3, PRIMASK
/**
 * \brief Disable interrupts, enter critical section
 */
void atomic_enter_critical(hal_atomic_t volatile *atomic)
{
	*atomic = __get_PRIMASK();
     7e4:	6003      	str	r3, [r0, #0]
  __ASM volatile ("cpsid i" : : : "memory");
     7e6:	b672      	cpsid	i
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
     7e8:	f3bf 8f5f 	dmb	sy
     7ec:	4770      	bx	lr

000007ee <atomic_leave_critical>:
     7ee:	f3bf 8f5f 	dmb	sy
 * \brief Exit atomic section
 */
void atomic_leave_critical(hal_atomic_t volatile *atomic)
{
	__DMB();
	__set_PRIMASK(*atomic);
     7f2:	6803      	ldr	r3, [r0, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
     7f4:	f383 8810 	msr	PRIMASK, r3
     7f8:	4770      	bx	lr
	...

000007fc <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     7fc:	b570      	push	{r4, r5, r6, lr}
		middle = (upper + lower) >> 1;
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
     7fe:	4b12      	ldr	r3, [pc, #72]	; (848 <process_ext_irq+0x4c>)
     800:	68d9      	ldr	r1, [r3, #12]
     802:	4288      	cmp	r0, r1
     804:	d01d      	beq.n	842 <process_ext_irq+0x46>
     806:	2201      	movs	r2, #1
     808:	2503      	movs	r5, #3
     80a:	2400      	movs	r4, #0
     80c:	461e      	mov	r6, r3
				ext_irqs[middle].cb();
			}
			return;
		}

		if (ext_irqs[middle].pin < pin) {
     80e:	4288      	cmp	r0, r1
			lower = middle + 1;
     810:	bf87      	ittee	hi
     812:	3201      	addhi	r2, #1
     814:	b2d4      	uxtbhi	r4, r2
		} else {
			upper = middle - 1;
     816:	f102 32ff 	addls.w	r2, r2, #4294967295
     81a:	b2d5      	uxtbls	r5, r2
	while (upper >= lower) {
     81c:	42a5      	cmp	r5, r4
     81e:	d312      	bcc.n	846 <process_ext_irq+0x4a>
		middle = (upper + lower) >> 1;
     820:	192b      	adds	r3, r5, r4
     822:	105b      	asrs	r3, r3, #1
     824:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
     826:	2a02      	cmp	r2, #2
     828:	d80d      	bhi.n	846 <process_ext_irq+0x4a>
     82a:	4613      	mov	r3, r2
		if (ext_irqs[middle].pin == pin) {
     82c:	eb06 01c2 	add.w	r1, r6, r2, lsl #3
     830:	6849      	ldr	r1, [r1, #4]
     832:	4281      	cmp	r1, r0
     834:	d1eb      	bne.n	80e <process_ext_irq+0x12>
			if (ext_irqs[middle].cb) {
     836:	4a04      	ldr	r2, [pc, #16]	; (848 <process_ext_irq+0x4c>)
     838:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
     83c:	b11b      	cbz	r3, 846 <process_ext_irq+0x4a>
				ext_irqs[middle].cb();
     83e:	4798      	blx	r3
     840:	bd70      	pop	{r4, r5, r6, pc}
		if (ext_irqs[middle].pin == pin) {
     842:	2301      	movs	r3, #1
     844:	e7f7      	b.n	836 <process_ext_irq+0x3a>
     846:	bd70      	pop	{r4, r5, r6, pc}
     848:	2000001c 	.word	0x2000001c

0000084c <ext_irq_init>:
{
     84c:	b508      	push	{r3, lr}
		ext_irqs[i].pin = 0xFFFFFFFF;
     84e:	4b07      	ldr	r3, [pc, #28]	; (86c <ext_irq_init+0x20>)
     850:	f04f 31ff 	mov.w	r1, #4294967295
     854:	6059      	str	r1, [r3, #4]
		ext_irqs[i].cb  = NULL;
     856:	2200      	movs	r2, #0
     858:	601a      	str	r2, [r3, #0]
		ext_irqs[i].pin = 0xFFFFFFFF;
     85a:	60d9      	str	r1, [r3, #12]
		ext_irqs[i].cb  = NULL;
     85c:	609a      	str	r2, [r3, #8]
		ext_irqs[i].pin = 0xFFFFFFFF;
     85e:	6159      	str	r1, [r3, #20]
		ext_irqs[i].cb  = NULL;
     860:	611a      	str	r2, [r3, #16]
	return _ext_irq_init(process_ext_irq);
     862:	4803      	ldr	r0, [pc, #12]	; (870 <ext_irq_init+0x24>)
     864:	4b03      	ldr	r3, [pc, #12]	; (874 <ext_irq_init+0x28>)
     866:	4798      	blx	r3
}
     868:	bd08      	pop	{r3, pc}
     86a:	bf00      	nop
     86c:	2000001c 	.word	0x2000001c
     870:	000007fd 	.word	0x000007fd
     874:	00000d79 	.word	0x00000d79

00000878 <flash_ready>:
 * \internal Ready for a new flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_ready(struct _flash_device *device)
{
     878:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_ready) {
     87a:	6943      	ldr	r3, [r0, #20]
     87c:	b103      	cbz	r3, 880 <flash_ready+0x8>
		descr->callbacks.cb_ready(descr);
     87e:	4798      	blx	r3
     880:	bd08      	pop	{r3, pc}

00000882 <flash_error>:
 * \internal Error occurs in flash command
 *
 * \param[in] device The pointer to flash device structure
 */
static void flash_error(struct _flash_device *device)
{
     882:	b508      	push	{r3, lr}
	struct flash_descriptor *const descr = CONTAINER_OF(device, struct flash_descriptor, dev);
	if (descr->callbacks.cb_error) {
     884:	6983      	ldr	r3, [r0, #24]
     886:	b103      	cbz	r3, 88a <flash_error+0x8>
		descr->callbacks.cb_error(descr);
     888:	4798      	blx	r3
     88a:	bd08      	pop	{r3, pc}

0000088c <flash_init>:
{
     88c:	b538      	push	{r3, r4, r5, lr}
     88e:	460d      	mov	r5, r1
	ASSERT(flash && hw);
     890:	4604      	mov	r4, r0
     892:	b190      	cbz	r0, 8ba <flash_init+0x2e>
     894:	1c08      	adds	r0, r1, #0
     896:	bf18      	it	ne
     898:	2001      	movne	r0, #1
     89a:	2238      	movs	r2, #56	; 0x38
     89c:	4908      	ldr	r1, [pc, #32]	; (8c0 <flash_init+0x34>)
     89e:	4b09      	ldr	r3, [pc, #36]	; (8c4 <flash_init+0x38>)
     8a0:	4798      	blx	r3
	rc = _flash_init(&flash->dev, hw);
     8a2:	4629      	mov	r1, r5
     8a4:	4620      	mov	r0, r4
     8a6:	4b08      	ldr	r3, [pc, #32]	; (8c8 <flash_init+0x3c>)
     8a8:	4798      	blx	r3
	if (rc) {
     8aa:	4603      	mov	r3, r0
     8ac:	b918      	cbnz	r0, 8b6 <flash_init+0x2a>
	flash->dev.flash_cb.ready_cb = flash_ready;
     8ae:	4a07      	ldr	r2, [pc, #28]	; (8cc <flash_init+0x40>)
     8b0:	6022      	str	r2, [r4, #0]
	flash->dev.flash_cb.error_cb = flash_error;
     8b2:	4a07      	ldr	r2, [pc, #28]	; (8d0 <flash_init+0x44>)
     8b4:	6062      	str	r2, [r4, #4]
}
     8b6:	4618      	mov	r0, r3
     8b8:	bd38      	pop	{r3, r4, r5, pc}
     8ba:	2000      	movs	r0, #0
     8bc:	e7ed      	b.n	89a <flash_init+0xe>
     8be:	bf00      	nop
     8c0:	00001368 	.word	0x00001368
     8c4:	00000bfd 	.word	0x00000bfd
     8c8:	00000edd 	.word	0x00000edd
     8cc:	00000879 	.word	0x00000879
     8d0:	00000883 	.word	0x00000883

000008d4 <i2c_s_sync_write>:
 *
 * \return The number of bytes written or -1 if another write operation is in
 *         progress.
 */
static int32_t i2c_s_sync_write(struct io_descriptor *const io, const uint8_t *const buf, const uint16_t length)
{
     8d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     8d8:	460f      	mov	r7, r1
     8da:	4690      	mov	r8, r2
	uint16_t                      offset = 0;
	struct i2c_s_sync_descriptor *descr  = CONTAINER_OF(io, struct i2c_s_sync_descriptor, io);

	ASSERT(io && buf && length);
     8dc:	4604      	mov	r4, r0
     8de:	b320      	cbz	r0, 92a <i2c_s_sync_write+0x56>
     8e0:	b329      	cbz	r1, 92e <i2c_s_sync_write+0x5a>
     8e2:	1c10      	adds	r0, r2, #0
     8e4:	bf18      	it	ne
     8e6:	2001      	movne	r0, #1
     8e8:	22b6      	movs	r2, #182	; 0xb6
     8ea:	4912      	ldr	r1, [pc, #72]	; (934 <i2c_s_sync_write+0x60>)
     8ec:	4b12      	ldr	r3, [pc, #72]	; (938 <i2c_s_sync_write+0x64>)
     8ee:	4798      	blx	r3

	while (!_i2c_s_sync_is_byte_sent(&descr->device))
     8f0:	3c04      	subs	r4, #4
     8f2:	4d12      	ldr	r5, [pc, #72]	; (93c <i2c_s_sync_write+0x68>)
     8f4:	4620      	mov	r0, r4
     8f6:	47a8      	blx	r5
     8f8:	2800      	cmp	r0, #0
     8fa:	d0fb      	beq.n	8f4 <i2c_s_sync_write+0x20>
     8fc:	3f01      	subs	r7, #1
     8fe:	2600      	movs	r6, #0
		;
	do {
		_i2c_s_sync_write_byte(&descr->device, buf[offset]);
     900:	f8df 9040 	ldr.w	r9, [pc, #64]	; 944 <i2c_s_sync_write+0x70>
		while (!_i2c_s_sync_is_byte_sent(&descr->device))
     904:	4d0d      	ldr	r5, [pc, #52]	; (93c <i2c_s_sync_write+0x68>)
		_i2c_s_sync_write_byte(&descr->device, buf[offset]);
     906:	f817 1f01 	ldrb.w	r1, [r7, #1]!
     90a:	4620      	mov	r0, r4
     90c:	47c8      	blx	r9
		while (!_i2c_s_sync_is_byte_sent(&descr->device))
     90e:	4620      	mov	r0, r4
     910:	47a8      	blx	r5
     912:	2800      	cmp	r0, #0
     914:	d0fb      	beq.n	90e <i2c_s_sync_write+0x3a>
			;
	} while (++offset < length);
     916:	3601      	adds	r6, #1
     918:	b2b6      	uxth	r6, r6
     91a:	45b0      	cmp	r8, r6
     91c:	d8f3      	bhi.n	906 <i2c_s_sync_write+0x32>

	/* To ensure no more data needs to be sent */
	_i2c_s_sync_clear_data_ready_flag(&descr->device);
     91e:	4620      	mov	r0, r4
     920:	4b07      	ldr	r3, [pc, #28]	; (940 <i2c_s_sync_write+0x6c>)
     922:	4798      	blx	r3

	return (int32_t)offset;
}
     924:	4630      	mov	r0, r6
     926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io && buf && length);
     92a:	2000      	movs	r0, #0
     92c:	e7dc      	b.n	8e8 <i2c_s_sync_write+0x14>
     92e:	2000      	movs	r0, #0
     930:	e7da      	b.n	8e8 <i2c_s_sync_write+0x14>
     932:	bf00      	nop
     934:	00001380 	.word	0x00001380
     938:	00000bfd 	.word	0x00000bfd
     93c:	00001267 	.word	0x00001267
     940:	0000127b 	.word	0x0000127b
     944:	00001259 	.word	0x00001259

00000948 <i2c_s_sync_read>:
{
     948:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     94c:	460f      	mov	r7, r1
     94e:	4690      	mov	r8, r2
	ASSERT(io && buf && length);
     950:	4604      	mov	r4, r0
     952:	b1e0      	cbz	r0, 98e <i2c_s_sync_read+0x46>
     954:	b1e9      	cbz	r1, 992 <i2c_s_sync_read+0x4a>
     956:	1c10      	adds	r0, r2, #0
     958:	bf18      	it	ne
     95a:	2001      	movne	r0, #1
     95c:	229c      	movs	r2, #156	; 0x9c
     95e:	490e      	ldr	r1, [pc, #56]	; (998 <i2c_s_sync_read+0x50>)
     960:	4b0e      	ldr	r3, [pc, #56]	; (99c <i2c_s_sync_read+0x54>)
     962:	4798      	blx	r3
     964:	3f01      	subs	r7, #1
	uint16_t                      offset = 0;
     966:	2600      	movs	r6, #0
		while (!_i2c_s_sync_is_byte_received(&descr->device))
     968:	3c04      	subs	r4, #4
     96a:	4d0d      	ldr	r5, [pc, #52]	; (9a0 <i2c_s_sync_read+0x58>)
		buf[offset] = _i2c_s_sync_read_byte(&descr->device);
     96c:	f8df 9034 	ldr.w	r9, [pc, #52]	; 9a4 <i2c_s_sync_read+0x5c>
		while (!_i2c_s_sync_is_byte_received(&descr->device))
     970:	4620      	mov	r0, r4
     972:	47a8      	blx	r5
     974:	2800      	cmp	r0, #0
     976:	d0fb      	beq.n	970 <i2c_s_sync_read+0x28>
		buf[offset] = _i2c_s_sync_read_byte(&descr->device);
     978:	4620      	mov	r0, r4
     97a:	47c8      	blx	r9
     97c:	f807 0f01 	strb.w	r0, [r7, #1]!
	} while (++offset < length);
     980:	3601      	adds	r6, #1
     982:	b2b6      	uxth	r6, r6
     984:	45b0      	cmp	r8, r6
     986:	d8f3      	bhi.n	970 <i2c_s_sync_read+0x28>
}
     988:	4630      	mov	r0, r6
     98a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ASSERT(io && buf && length);
     98e:	2000      	movs	r0, #0
     990:	e7e4      	b.n	95c <i2c_s_sync_read+0x14>
     992:	2000      	movs	r0, #0
     994:	e7e2      	b.n	95c <i2c_s_sync_read+0x14>
     996:	bf00      	nop
     998:	00001380 	.word	0x00001380
     99c:	00000bfd 	.word	0x00000bfd
     9a0:	00001271 	.word	0x00001271
     9a4:	0000125f 	.word	0x0000125f

000009a8 <i2c_s_sync_init>:
{
     9a8:	b538      	push	{r3, r4, r5, lr}
     9aa:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     9ac:	4604      	mov	r4, r0
     9ae:	b190      	cbz	r0, 9d6 <i2c_s_sync_init+0x2e>
     9b0:	1c08      	adds	r0, r1, #0
     9b2:	bf18      	it	ne
     9b4:	2001      	movne	r0, #1
     9b6:	2235      	movs	r2, #53	; 0x35
     9b8:	4908      	ldr	r1, [pc, #32]	; (9dc <i2c_s_sync_init+0x34>)
     9ba:	4b09      	ldr	r3, [pc, #36]	; (9e0 <i2c_s_sync_init+0x38>)
     9bc:	4798      	blx	r3
	init_status = _i2c_s_sync_init(&descr->device, hw);
     9be:	4629      	mov	r1, r5
     9c0:	4620      	mov	r0, r4
     9c2:	4b08      	ldr	r3, [pc, #32]	; (9e4 <i2c_s_sync_init+0x3c>)
     9c4:	4798      	blx	r3
	if (init_status) {
     9c6:	4603      	mov	r3, r0
     9c8:	b918      	cbnz	r0, 9d2 <i2c_s_sync_init+0x2a>
	descr->io.read  = i2c_s_sync_read;
     9ca:	4a07      	ldr	r2, [pc, #28]	; (9e8 <i2c_s_sync_init+0x40>)
     9cc:	60a2      	str	r2, [r4, #8]
	descr->io.write = i2c_s_sync_write;
     9ce:	4a07      	ldr	r2, [pc, #28]	; (9ec <i2c_s_sync_init+0x44>)
     9d0:	6062      	str	r2, [r4, #4]
}
     9d2:	4618      	mov	r0, r3
     9d4:	bd38      	pop	{r3, r4, r5, pc}
     9d6:	2000      	movs	r0, #0
     9d8:	e7ed      	b.n	9b6 <i2c_s_sync_init+0xe>
     9da:	bf00      	nop
     9dc:	00001380 	.word	0x00001380
     9e0:	00000bfd 	.word	0x00000bfd
     9e4:	000011f5 	.word	0x000011f5
     9e8:	00000949 	.word	0x00000949
     9ec:	000008d5 	.word	0x000008d5

000009f0 <i2c_s_sync_set_addr>:
{
     9f0:	b538      	push	{r3, r4, r5, lr}
     9f2:	460d      	mov	r5, r1
	ASSERT(descr);
     9f4:	4604      	mov	r4, r0
     9f6:	2251      	movs	r2, #81	; 0x51
     9f8:	490a      	ldr	r1, [pc, #40]	; (a24 <i2c_s_sync_set_addr+0x34>)
     9fa:	3000      	adds	r0, #0
     9fc:	bf18      	it	ne
     9fe:	2001      	movne	r0, #1
     a00:	4b09      	ldr	r3, [pc, #36]	; (a28 <i2c_s_sync_set_addr+0x38>)
     a02:	4798      	blx	r3
	if (!_i2c_s_sync_is_10bit_addressing_on(&descr->device)) {
     a04:	4620      	mov	r0, r4
     a06:	4b09      	ldr	r3, [pc, #36]	; (a2c <i2c_s_sync_set_addr+0x3c>)
     a08:	4798      	blx	r3
     a0a:	b120      	cbz	r0, a16 <i2c_s_sync_set_addr+0x26>
	return _i2c_s_sync_set_address(&descr->device, address);
     a0c:	4629      	mov	r1, r5
     a0e:	4620      	mov	r0, r4
     a10:	4b07      	ldr	r3, [pc, #28]	; (a30 <i2c_s_sync_set_addr+0x40>)
     a12:	4798      	blx	r3
}
     a14:	bd38      	pop	{r3, r4, r5, pc}
		return _i2c_s_sync_set_address(&descr->device, address & 0x7F);
     a16:	f005 017f 	and.w	r1, r5, #127	; 0x7f
     a1a:	4620      	mov	r0, r4
     a1c:	4b04      	ldr	r3, [pc, #16]	; (a30 <i2c_s_sync_set_addr+0x40>)
     a1e:	4798      	blx	r3
     a20:	bd38      	pop	{r3, r4, r5, pc}
     a22:	bf00      	nop
     a24:	00001380 	.word	0x00001380
     a28:	00000bfd 	.word	0x00000bfd
     a2c:	0000123f 	.word	0x0000123f
     a30:	00001249 	.word	0x00001249

00000a34 <i2c_s_sync_enable>:
{
     a34:	b510      	push	{r4, lr}
	ASSERT(descr);
     a36:	4604      	mov	r4, r0
     a38:	225f      	movs	r2, #95	; 0x5f
     a3a:	4905      	ldr	r1, [pc, #20]	; (a50 <i2c_s_sync_enable+0x1c>)
     a3c:	3000      	adds	r0, #0
     a3e:	bf18      	it	ne
     a40:	2001      	movne	r0, #1
     a42:	4b04      	ldr	r3, [pc, #16]	; (a54 <i2c_s_sync_enable+0x20>)
     a44:	4798      	blx	r3
	return _i2c_s_sync_enable(&descr->device);
     a46:	4620      	mov	r0, r4
     a48:	4b03      	ldr	r3, [pc, #12]	; (a58 <i2c_s_sync_enable+0x24>)
     a4a:	4798      	blx	r3
}
     a4c:	bd10      	pop	{r4, pc}
     a4e:	bf00      	nop
     a50:	00001380 	.word	0x00001380
     a54:	00000bfd 	.word	0x00000bfd
     a58:	00001229 	.word	0x00001229

00000a5c <i2c_s_sync_get_io_descriptor>:
{
     a5c:	b538      	push	{r3, r4, r5, lr}
     a5e:	460d      	mov	r5, r1
	ASSERT(descr && io);
     a60:	4604      	mov	r4, r0
     a62:	b150      	cbz	r0, a7a <i2c_s_sync_get_io_descriptor+0x1e>
     a64:	1c08      	adds	r0, r1, #0
     a66:	bf18      	it	ne
     a68:	2001      	movne	r0, #1
     a6a:	2273      	movs	r2, #115	; 0x73
     a6c:	4904      	ldr	r1, [pc, #16]	; (a80 <i2c_s_sync_get_io_descriptor+0x24>)
     a6e:	4b05      	ldr	r3, [pc, #20]	; (a84 <i2c_s_sync_get_io_descriptor+0x28>)
     a70:	4798      	blx	r3
	*io = &descr->io;
     a72:	3404      	adds	r4, #4
     a74:	602c      	str	r4, [r5, #0]
}
     a76:	2000      	movs	r0, #0
     a78:	bd38      	pop	{r3, r4, r5, pc}
     a7a:	2000      	movs	r0, #0
     a7c:	e7f5      	b.n	a6a <i2c_s_sync_get_io_descriptor+0xe>
     a7e:	bf00      	nop
     a80:	00001380 	.word	0x00001380
     a84:	00000bfd 	.word	0x00000bfd

00000a88 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     a88:	b570      	push	{r4, r5, r6, lr}
     a8a:	460d      	mov	r5, r1
     a8c:	4616      	mov	r6, r2
	ASSERT(io_descr && buf);
     a8e:	4604      	mov	r4, r0
     a90:	b160      	cbz	r0, aac <io_read+0x24>
     a92:	1c08      	adds	r0, r1, #0
     a94:	bf18      	it	ne
     a96:	2001      	movne	r0, #1
     a98:	223d      	movs	r2, #61	; 0x3d
     a9a:	4905      	ldr	r1, [pc, #20]	; (ab0 <io_read+0x28>)
     a9c:	4b05      	ldr	r3, [pc, #20]	; (ab4 <io_read+0x2c>)
     a9e:	4798      	blx	r3
	return io_descr->read(io_descr, buf, length);
     aa0:	6863      	ldr	r3, [r4, #4]
     aa2:	4632      	mov	r2, r6
     aa4:	4629      	mov	r1, r5
     aa6:	4620      	mov	r0, r4
     aa8:	4798      	blx	r3
}
     aaa:	bd70      	pop	{r4, r5, r6, pc}
     aac:	2000      	movs	r0, #0
     aae:	e7f3      	b.n	a98 <io_read+0x10>
     ab0:	0000139c 	.word	0x0000139c
     ab4:	00000bfd 	.word	0x00000bfd

00000ab8 <qspi_sync_init>:
 * \brief Driver version
 */
#define QSPI_SYNC_DRIVER_VERSION 0x00000001u

int32_t qspi_sync_init(struct qspi_sync_descriptor *qspi, void *const hw)
{
     ab8:	b538      	push	{r3, r4, r5, lr}
     aba:	460c      	mov	r4, r1
	ASSERT(qspi && hw);
     abc:	4605      	mov	r5, r0
     abe:	b158      	cbz	r0, ad8 <qspi_sync_init+0x20>
     ac0:	1c08      	adds	r0, r1, #0
     ac2:	bf18      	it	ne
     ac4:	2001      	movne	r0, #1
     ac6:	2231      	movs	r2, #49	; 0x31
     ac8:	4904      	ldr	r1, [pc, #16]	; (adc <qspi_sync_init+0x24>)
     aca:	4b05      	ldr	r3, [pc, #20]	; (ae0 <qspi_sync_init+0x28>)
     acc:	4798      	blx	r3

	return _qspi_sync_init(&qspi->dev, hw);
     ace:	4621      	mov	r1, r4
     ad0:	4628      	mov	r0, r5
     ad2:	4b04      	ldr	r3, [pc, #16]	; (ae4 <qspi_sync_init+0x2c>)
     ad4:	4798      	blx	r3
}
     ad6:	bd38      	pop	{r3, r4, r5, pc}
     ad8:	2000      	movs	r0, #0
     ada:	e7f4      	b.n	ac6 <qspi_sync_init+0xe>
     adc:	000013b0 	.word	0x000013b0
     ae0:	00000bfd 	.word	0x00000bfd
     ae4:	00000fb1 	.word	0x00000fb1

00000ae8 <timer_add_timer_task>:
 * \param[in] head The pointer to the head of timer task list
 * \param[in] task The pointer to task to add
 * \param[in] time Current timer time
 */
static void timer_add_timer_task(struct list_descriptor *list, struct timer_task *const new_task, const uint32_t time)
{
     ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     aea:	4684      	mov	ip, r0
 * \return A pointer to the head of the given list or NULL if the list is
 * empty
 */
static inline void *list_get_head(const struct list_descriptor *const list)
{
	return (void *)list->head;
     aec:	6807      	ldr	r7, [r0, #0]
	struct timer_task *it, *prev = NULL, *head = (struct timer_task *)list_get_head(list);

	if (!head) {
     aee:	b12f      	cbz	r7, afc <timer_add_timer_task+0x14>
		if (it->time_label <= time) {
			time_left = it->interval - (time - it->time_label);
		} else {
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
		}
		if (time_left >= new_task->interval)
     af0:	688d      	ldr	r5, [r1, #8]
     af2:	463c      	mov	r4, r7
     af4:	2600      	movs	r6, #0
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     af6:	f1c2 0e01 	rsb	lr, r2, #1
     afa:	e00b      	b.n	b14 <timer_add_timer_task+0x2c>
		list_insert_as_head(list, new_task);
     afc:	4b0e      	ldr	r3, [pc, #56]	; (b38 <timer_add_timer_task+0x50>)
     afe:	4798      	blx	r3
		return;
     b00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			time_left = it->interval - (0xFFFFFFFF - it->time_label) - time;
     b02:	4473      	add	r3, lr
     b04:	68a0      	ldr	r0, [r4, #8]
     b06:	4403      	add	r3, r0
		if (time_left >= new_task->interval)
     b08:	42ab      	cmp	r3, r5
     b0a:	d20a      	bcs.n	b22 <timer_add_timer_task+0x3a>
 * \return A pointer to the next list element or NULL if there is not next
 * element
 */
static inline void *list_get_next_element(const void *const element)
{
	return element ? ((struct list_element *)element)->next : NULL;
     b0c:	6823      	ldr	r3, [r4, #0]
     b0e:	4626      	mov	r6, r4
	for (it = head; it; it = (struct timer_task *)list_get_next_element(it)) {
     b10:	b153      	cbz	r3, b28 <timer_add_timer_task+0x40>
     b12:	461c      	mov	r4, r3
		if (it->time_label <= time) {
     b14:	6863      	ldr	r3, [r4, #4]
     b16:	4293      	cmp	r3, r2
     b18:	d8f3      	bhi.n	b02 <timer_add_timer_task+0x1a>
			time_left = it->interval - (time - it->time_label);
     b1a:	68a0      	ldr	r0, [r4, #8]
     b1c:	4403      	add	r3, r0
     b1e:	1a9b      	subs	r3, r3, r2
     b20:	e7f2      	b.n	b08 <timer_add_timer_task+0x20>
			break;
		prev = it;
	}

	if (it == head) {
     b22:	42a7      	cmp	r7, r4
     b24:	d004      	beq.n	b30 <timer_add_timer_task+0x48>
     b26:	4634      	mov	r4, r6
		list_insert_as_head(list, new_task);
	} else {
		list_insert_after(prev, new_task);
     b28:	4620      	mov	r0, r4
     b2a:	4b04      	ldr	r3, [pc, #16]	; (b3c <timer_add_timer_task+0x54>)
     b2c:	4798      	blx	r3
     b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		list_insert_as_head(list, new_task);
     b30:	4660      	mov	r0, ip
     b32:	4b01      	ldr	r3, [pc, #4]	; (b38 <timer_add_timer_task+0x50>)
     b34:	4798      	blx	r3
     b36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     b38:	00000c25 	.word	0x00000c25
     b3c:	00000c51 	.word	0x00000c51

00000b40 <timer_process_counted>:

/**
 * \internal Process interrupts
 */
static void timer_process_counted(struct _timer_device *device)
{
     b40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return (void *)list->head;
     b44:	6944      	ldr	r4, [r0, #20]
	struct timer_descriptor *timer = CONTAINER_OF(device, struct timer_descriptor, device);
	struct timer_task *      it    = (struct timer_task *)list_get_head(&timer->tasks);
	uint32_t                 time  = ++timer->time;
     b46:	6907      	ldr	r7, [r0, #16]
     b48:	3701      	adds	r7, #1
     b4a:	6107      	str	r7, [r0, #16]

	if ((timer->flags & TIMER_FLAG_QUEUE_IS_TAKEN) || (timer->flags & TIMER_FLAG_INTERRUPT_TRIGERRED)) {
     b4c:	7e03      	ldrb	r3, [r0, #24]
     b4e:	f013 0f01 	tst.w	r3, #1
     b52:	d113      	bne.n	b7c <timer_process_counted+0x3c>
     b54:	7e03      	ldrb	r3, [r0, #24]
     b56:	f013 0f02 	tst.w	r3, #2
     b5a:	d10f      	bne.n	b7c <timer_process_counted+0x3c>
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
		return;
	}

	while (it && ((time - it->time_label) >= it->interval)) {
     b5c:	b354      	cbz	r4, bb4 <timer_process_counted+0x74>
     b5e:	6863      	ldr	r3, [r4, #4]
     b60:	1afb      	subs	r3, r7, r3
     b62:	68a2      	ldr	r2, [r4, #8]
     b64:	4293      	cmp	r3, r2
     b66:	d307      	bcc.n	b78 <timer_process_counted+0x38>
     b68:	4606      	mov	r6, r0
		struct timer_task *tmp = it;

		list_remove_head(&timer->tasks);
     b6a:	f100 0814 	add.w	r8, r0, #20
     b6e:	f8df 9048 	ldr.w	r9, [pc, #72]	; bb8 <timer_process_counted+0x78>
		if (TIMER_TASK_REPEAT == tmp->mode) {
			tmp->time_label = time;
			timer_add_timer_task(&timer->tasks, tmp, time);
     b72:	f8df a048 	ldr.w	sl, [pc, #72]	; bbc <timer_process_counted+0x7c>
     b76:	e012      	b.n	b9e <timer_process_counted+0x5e>
     b78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		timer->flags |= TIMER_FLAG_INTERRUPT_TRIGERRED;
     b7c:	7e03      	ldrb	r3, [r0, #24]
     b7e:	f043 0302 	orr.w	r3, r3, #2
     b82:	7603      	strb	r3, [r0, #24]
		return;
     b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     b88:	6975      	ldr	r5, [r6, #20]
		}
		it = (struct timer_task *)list_get_head(&timer->tasks);

		tmp->cb(tmp);
     b8a:	68e3      	ldr	r3, [r4, #12]
     b8c:	4620      	mov	r0, r4
     b8e:	4798      	blx	r3
	while (it && ((time - it->time_label) >= it->interval)) {
     b90:	b185      	cbz	r5, bb4 <timer_process_counted+0x74>
		it = (struct timer_task *)list_get_head(&timer->tasks);
     b92:	462c      	mov	r4, r5
	while (it && ((time - it->time_label) >= it->interval)) {
     b94:	686b      	ldr	r3, [r5, #4]
     b96:	1afb      	subs	r3, r7, r3
     b98:	68aa      	ldr	r2, [r5, #8]
     b9a:	4293      	cmp	r3, r2
     b9c:	d30a      	bcc.n	bb4 <timer_process_counted+0x74>
		list_remove_head(&timer->tasks);
     b9e:	4640      	mov	r0, r8
     ba0:	47c8      	blx	r9
		if (TIMER_TASK_REPEAT == tmp->mode) {
     ba2:	7c23      	ldrb	r3, [r4, #16]
     ba4:	2b01      	cmp	r3, #1
     ba6:	d1ef      	bne.n	b88 <timer_process_counted+0x48>
			tmp->time_label = time;
     ba8:	6067      	str	r7, [r4, #4]
			timer_add_timer_task(&timer->tasks, tmp, time);
     baa:	463a      	mov	r2, r7
     bac:	4621      	mov	r1, r4
     bae:	4640      	mov	r0, r8
     bb0:	47d0      	blx	sl
     bb2:	e7e9      	b.n	b88 <timer_process_counted+0x48>
     bb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     bb8:	00000c59 	.word	0x00000c59
     bbc:	00000ae9 	.word	0x00000ae9

00000bc0 <timer_init>:
{
     bc0:	b538      	push	{r3, r4, r5, lr}
     bc2:	460d      	mov	r5, r1
	ASSERT(descr && hw);
     bc4:	4604      	mov	r4, r0
     bc6:	b178      	cbz	r0, be8 <timer_init+0x28>
     bc8:	1c08      	adds	r0, r1, #0
     bca:	bf18      	it	ne
     bcc:	2001      	movne	r0, #1
     bce:	223b      	movs	r2, #59	; 0x3b
     bd0:	4906      	ldr	r1, [pc, #24]	; (bec <timer_init+0x2c>)
     bd2:	4b07      	ldr	r3, [pc, #28]	; (bf0 <timer_init+0x30>)
     bd4:	4798      	blx	r3
	_timer_init(&descr->device, hw);
     bd6:	4629      	mov	r1, r5
     bd8:	4620      	mov	r0, r4
     bda:	4b06      	ldr	r3, [pc, #24]	; (bf4 <timer_init+0x34>)
     bdc:	4798      	blx	r3
	descr->time                           = 0;
     bde:	2000      	movs	r0, #0
     be0:	6120      	str	r0, [r4, #16]
	descr->device.timer_cb.period_expired = timer_process_counted;
     be2:	4b05      	ldr	r3, [pc, #20]	; (bf8 <timer_init+0x38>)
     be4:	6023      	str	r3, [r4, #0]
}
     be6:	bd38      	pop	{r3, r4, r5, pc}
     be8:	2000      	movs	r0, #0
     bea:	e7f0      	b.n	bce <timer_init+0xe>
     bec:	000013cc 	.word	0x000013cc
     bf0:	00000bfd 	.word	0x00000bfd
     bf4:	0000102d 	.word	0x0000102d
     bf8:	00000b41 	.word	0x00000b41

00000bfc <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     bfc:	b900      	cbnz	r0, c00 <assert+0x4>
		__asm("BKPT #0");
     bfe:	be00      	bkpt	0x0000
     c00:	4770      	bx	lr

00000c02 <is_list_element>:
 * \brief Check whether element belongs to list
 */
bool is_list_element(const struct list_descriptor *const list, const void *const element)
{
	struct list_element *it;
	for (it = list->head; it; it = it->next) {
     c02:	6803      	ldr	r3, [r0, #0]
     c04:	b14b      	cbz	r3, c1a <is_list_element+0x18>
		if (it == element) {
     c06:	428b      	cmp	r3, r1
     c08:	d009      	beq.n	c1e <is_list_element+0x1c>
	for (it = list->head; it; it = it->next) {
     c0a:	681b      	ldr	r3, [r3, #0]
     c0c:	b11b      	cbz	r3, c16 <is_list_element+0x14>
		if (it == element) {
     c0e:	4299      	cmp	r1, r3
     c10:	d1fb      	bne.n	c0a <is_list_element+0x8>
			return true;
     c12:	2001      	movs	r0, #1
		}
	}

	return false;
}
     c14:	4770      	bx	lr
	return false;
     c16:	2000      	movs	r0, #0
     c18:	4770      	bx	lr
     c1a:	2000      	movs	r0, #0
     c1c:	4770      	bx	lr
			return true;
     c1e:	2001      	movs	r0, #1
     c20:	4770      	bx	lr
	...

00000c24 <list_insert_as_head>:

/**
 * \brief Insert an element as list head
 */
void list_insert_as_head(struct list_descriptor *const list, void *const element)
{
     c24:	b538      	push	{r3, r4, r5, lr}
     c26:	4604      	mov	r4, r0
     c28:	460d      	mov	r5, r1
	ASSERT(!is_list_element(list, element));
     c2a:	4b06      	ldr	r3, [pc, #24]	; (c44 <list_insert_as_head+0x20>)
     c2c:	4798      	blx	r3
     c2e:	f080 0001 	eor.w	r0, r0, #1
     c32:	2239      	movs	r2, #57	; 0x39
     c34:	4904      	ldr	r1, [pc, #16]	; (c48 <list_insert_as_head+0x24>)
     c36:	b2c0      	uxtb	r0, r0
     c38:	4b04      	ldr	r3, [pc, #16]	; (c4c <list_insert_as_head+0x28>)
     c3a:	4798      	blx	r3

	((struct list_element *)element)->next = list->head;
     c3c:	6823      	ldr	r3, [r4, #0]
     c3e:	602b      	str	r3, [r5, #0]
	list->head                             = (struct list_element *)element;
     c40:	6025      	str	r5, [r4, #0]
     c42:	bd38      	pop	{r3, r4, r5, pc}
     c44:	00000c03 	.word	0x00000c03
     c48:	000013e4 	.word	0x000013e4
     c4c:	00000bfd 	.word	0x00000bfd

00000c50 <list_insert_after>:
/**
 * \brief Insert an element after the given list element
 */
void list_insert_after(void *const after, void *const element)
{
	((struct list_element *)element)->next = ((struct list_element *)after)->next;
     c50:	6803      	ldr	r3, [r0, #0]
     c52:	600b      	str	r3, [r1, #0]
	((struct list_element *)after)->next   = (struct list_element *)element;
     c54:	6001      	str	r1, [r0, #0]
     c56:	4770      	bx	lr

00000c58 <list_remove_head>:
/**
 * \brief Removes list head
 */
void *list_remove_head(struct list_descriptor *const list)
{
	if (list->head) {
     c58:	6803      	ldr	r3, [r0, #0]
     c5a:	b10b      	cbz	r3, c60 <list_remove_head+0x8>
		struct list_element *tmp = list->head;

		list->head = list->head->next;
     c5c:	681a      	ldr	r2, [r3, #0]
     c5e:	6002      	str	r2, [r0, #0]
		return (void *)tmp;
	}

	return NULL;
}
     c60:	4618      	mov	r0, r3
     c62:	4770      	bx	lr

00000c64 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     c64:	b508      	push	{r3, lr}
}

static inline void hri_nvmctrl_set_CTRLA_RWS_bf(const void *const hw, hri_nvmctrl_ctrla_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLA.reg |= NVMCTRL_CTRLA_RWS(mask);
     c66:	4a08      	ldr	r2, [pc, #32]	; (c88 <_init_chip+0x24>)
     c68:	8813      	ldrh	r3, [r2, #0]
     c6a:	b29b      	uxth	r3, r3
     c6c:	8013      	strh	r3, [r2, #0]
	hri_nvmctrl_set_CTRLA_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_osc32kctrl_init_sources();
     c6e:	4b07      	ldr	r3, [pc, #28]	; (c8c <_init_chip+0x28>)
     c70:	4798      	blx	r3
	_oscctrl_init_sources();
     c72:	4b07      	ldr	r3, [pc, #28]	; (c90 <_init_chip+0x2c>)
     c74:	4798      	blx	r3
	_mclk_init();
     c76:	4b07      	ldr	r3, [pc, #28]	; (c94 <_init_chip+0x30>)
     c78:	4798      	blx	r3
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
#endif
	_oscctrl_init_referenced_generators();
     c7a:	4b07      	ldr	r3, [pc, #28]	; (c98 <_init_chip+0x34>)
     c7c:	4798      	blx	r3
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     c7e:	f640 70ff 	movw	r0, #4095	; 0xfff
     c82:	4b06      	ldr	r3, [pc, #24]	; (c9c <_init_chip+0x38>)
     c84:	4798      	blx	r3
     c86:	bd08      	pop	{r3, pc}
     c88:	41004000 	.word	0x41004000
     c8c:	00000f7d 	.word	0x00000f7d
     c90:	00000f91 	.word	0x00000f91
     c94:	00000ea5 	.word	0x00000ea5
     c98:	00000fad 	.word	0x00000fad
     c9c:	00000e81 	.word	0x00000e81

00000ca0 <_ext_irq_handler>:

/**
 * \brief Inter EIC interrupt handler
 */
static void _ext_irq_handler(void)
{
     ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
     ca2:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_eic_intflag_reg_t hri_eic_read_INTFLAG_reg(const void *const hw)
{
	return ((Eic *)hw)->INTFLAG.reg;
     ca4:	4b2f      	ldr	r3, [pc, #188]	; (d64 <_ext_irq_handler+0xc4>)
     ca6:	695a      	ldr	r2, [r3, #20]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC);
     ca8:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
     caa:	9a01      	ldr	r2, [sp, #4]
}

static inline void hri_eic_clear_INTFLAG_reg(const void *const hw, hri_eic_intflag_reg_t mask)
{
	((Eic *)hw)->INTFLAG.reg = mask;
     cac:	615a      	str	r2, [r3, #20]

	ASSERT(callback);
     cae:	4b2e      	ldr	r3, [pc, #184]	; (d68 <_ext_irq_handler+0xc8>)
     cb0:	6818      	ldr	r0, [r3, #0]
     cb2:	22f0      	movs	r2, #240	; 0xf0
     cb4:	492d      	ldr	r1, [pc, #180]	; (d6c <_ext_irq_handler+0xcc>)
     cb6:	3000      	adds	r0, #0
     cb8:	bf18      	it	ne
     cba:	2001      	movne	r0, #1
     cbc:	4b2c      	ldr	r3, [pc, #176]	; (d70 <_ext_irq_handler+0xd0>)
     cbe:	4798      	blx	r3

	while (flags) {
     cc0:	9b01      	ldr	r3, [sp, #4]
     cc2:	2b00      	cmp	r3, #0
     cc4:	d04b      	beq.n	d5e <_ext_irq_handler+0xbe>
     cc6:	f04f 37ff 	mov.w	r7, #4294967295
			uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;

			while (upper >= lower) {
				middle = (upper + lower) >> 1;
				if (_map[middle].extint == pos) {
					pin = _map[middle].pin;
     cca:	4d2a      	ldr	r5, [pc, #168]	; (d74 <_ext_irq_handler+0xd4>)
     ccc:	e03b      	b.n	d46 <_ext_irq_handler+0xa6>
				if (_map[middle].extint == pos) {
     cce:	46b6      	mov	lr, r6
					pin = _map[middle].pin;
     cd0:	eb05 0ece 	add.w	lr, r5, lr, lsl #3
     cd4:	f8de 7004 	ldr.w	r7, [lr, #4]
				} else {
					upper = middle - 1;
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
     cd8:	f1b7 3fff 	cmp.w	r7, #4294967295
     cdc:	d003      	beq.n	ce6 <_ext_irq_handler+0x46>
				callback(pin);
     cde:	4b22      	ldr	r3, [pc, #136]	; (d68 <_ext_irq_handler+0xc8>)
     ce0:	681b      	ldr	r3, [r3, #0]
     ce2:	4638      	mov	r0, r7
     ce4:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
     ce6:	9b01      	ldr	r3, [sp, #4]
     ce8:	fa06 f404 	lsl.w	r4, r6, r4
     cec:	ea23 0404 	bic.w	r4, r3, r4
     cf0:	9401      	str	r4, [sp, #4]
			pos = ffs(flags) - 1;
     cf2:	9a01      	ldr	r2, [sp, #4]
     cf4:	fa92 f3a2 	rbit	r3, r2
     cf8:	fab3 f383 	clz	r3, r3
     cfc:	2a00      	cmp	r2, #0
		while (-1 != pos) {
     cfe:	bf08      	it	eq
     d00:	f04f 33ff 	moveq.w	r3, #4294967295
     d04:	d018      	beq.n	d38 <_ext_irq_handler+0x98>
				if (_map[middle].extint == pos) {
     d06:	461c      	mov	r4, r3
     d08:	2b06      	cmp	r3, #6
     d0a:	d0e0      	beq.n	cce <_ext_irq_handler+0x2e>
     d0c:	2206      	movs	r2, #6
     d0e:	4633      	mov	r3, r6
     d10:	2003      	movs	r0, #3
     d12:	2100      	movs	r1, #0
				if (_map[middle].extint < pos) {
     d14:	4294      	cmp	r4, r2
					lower = middle + 1;
     d16:	bfc7      	ittee	gt
     d18:	3301      	addgt	r3, #1
     d1a:	b2d9      	uxtbgt	r1, r3
					upper = middle - 1;
     d1c:	f103 33ff 	addle.w	r3, r3, #4294967295
     d20:	b2d8      	uxtble	r0, r3
			while (upper >= lower) {
     d22:	4281      	cmp	r1, r0
     d24:	d8d8      	bhi.n	cd8 <_ext_irq_handler+0x38>
				middle = (upper + lower) >> 1;
     d26:	1843      	adds	r3, r0, r1
     d28:	f3c3 0347 	ubfx	r3, r3, #1, #8
     d2c:	469e      	mov	lr, r3
				if (_map[middle].extint == pos) {
     d2e:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
     d32:	42a2      	cmp	r2, r4
     d34:	d1ee      	bne.n	d14 <_ext_irq_handler+0x74>
     d36:	e7cb      	b.n	cd0 <_ext_irq_handler+0x30>
	return ((Eic *)hw)->INTFLAG.reg;
     d38:	4b0a      	ldr	r3, [pc, #40]	; (d64 <_ext_irq_handler+0xc4>)
     d3a:	695a      	ldr	r2, [r3, #20]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC);
     d3c:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
     d3e:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     d40:	615a      	str	r2, [r3, #20]
	while (flags) {
     d42:	9b01      	ldr	r3, [sp, #4]
     d44:	b15b      	cbz	r3, d5e <_ext_irq_handler+0xbe>
		pos = ffs(flags) - 1;
     d46:	9a01      	ldr	r2, [sp, #4]
     d48:	fa92 f3a2 	rbit	r3, r2
     d4c:	fab3 f383 	clz	r3, r3
     d50:	2a00      	cmp	r2, #0
		while (-1 != pos) {
     d52:	bf0c      	ite	eq
     d54:	f04f 33ff 	moveq.w	r3, #4294967295
				if (_map[middle].extint == pos) {
     d58:	2601      	movne	r6, #1
		while (-1 != pos) {
     d5a:	d1d4      	bne.n	d06 <_ext_irq_handler+0x66>
     d5c:	e7ec      	b.n	d38 <_ext_irq_handler+0x98>
	}
}
     d5e:	b003      	add	sp, #12
     d60:	bdf0      	pop	{r4, r5, r6, r7, pc}
     d62:	bf00      	nop
     d64:	40002800 	.word	0x40002800
     d68:	20000034 	.word	0x20000034
     d6c:	0000141c 	.word	0x0000141c
     d70:	00000bfd 	.word	0x00000bfd
     d74:	00001404 	.word	0x00001404

00000d78 <_ext_irq_init>:
	return ((Eic *)hw)->SYNCBUSY.reg & reg;
     d78:	4b35      	ldr	r3, [pc, #212]	; (e50 <_ext_irq_init+0xd8>)
     d7a:	685b      	ldr	r3, [r3, #4]
	if (!hri_eic_is_syncing(EIC, EIC_SYNCBUSY_SWRST)) {
     d7c:	f013 0f01 	tst.w	r3, #1
     d80:	d11f      	bne.n	dc2 <_ext_irq_init+0x4a>
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     d82:	4a33      	ldr	r2, [pc, #204]	; (e50 <_ext_irq_init+0xd8>)
     d84:	6853      	ldr	r3, [r2, #4]
     d86:	f013 0f03 	tst.w	r3, #3
     d8a:	d1fb      	bne.n	d84 <_ext_irq_init+0xc>

static inline hri_eic_ctrla_reg_t hri_eic_get_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw, EIC_SYNCBUSY_MASK);
	tmp = ((Eic *)hw)->CTRLA.reg;
     d8c:	4b30      	ldr	r3, [pc, #192]	; (e50 <_ext_irq_init+0xd8>)
     d8e:	781b      	ldrb	r3, [r3, #0]
		if (hri_eic_get_CTRLA_reg(EIC, EIC_CTRLA_ENABLE)) {
     d90:	f013 0f02 	tst.w	r3, #2
     d94:	d00d      	beq.n	db2 <_ext_irq_init+0x3a>
	((Eic *)hw)->CTRLA.reg &= ~EIC_CTRLA_ENABLE;
     d96:	4a2e      	ldr	r2, [pc, #184]	; (e50 <_ext_irq_init+0xd8>)
     d98:	7813      	ldrb	r3, [r2, #0]
     d9a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
     d9e:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     da0:	6853      	ldr	r3, [r2, #4]
     da2:	f013 0f03 	tst.w	r3, #3
     da6:	d1fb      	bne.n	da0 <_ext_irq_init+0x28>
     da8:	4a29      	ldr	r2, [pc, #164]	; (e50 <_ext_irq_init+0xd8>)
     daa:	6853      	ldr	r3, [r2, #4]
     dac:	f013 0f02 	tst.w	r3, #2
     db0:	d1fb      	bne.n	daa <_ext_irq_init+0x32>
}

static inline void hri_eic_write_CTRLA_reg(const void *const hw, hri_eic_ctrla_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRLA.reg = data;
     db2:	2201      	movs	r2, #1
     db4:	4b26      	ldr	r3, [pc, #152]	; (e50 <_ext_irq_init+0xd8>)
     db6:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     db8:	461a      	mov	r2, r3
     dba:	6853      	ldr	r3, [r2, #4]
     dbc:	f013 0f03 	tst.w	r3, #3
     dc0:	d1fb      	bne.n	dba <_ext_irq_init+0x42>
     dc2:	4a23      	ldr	r2, [pc, #140]	; (e50 <_ext_irq_init+0xd8>)
     dc4:	6853      	ldr	r3, [r2, #4]
     dc6:	f013 0f01 	tst.w	r3, #1
     dca:	d1fb      	bne.n	dc4 <_ext_irq_init+0x4c>
	tmp = ((Eic *)hw)->CTRLA.reg;
     dcc:	4a20      	ldr	r2, [pc, #128]	; (e50 <_ext_irq_init+0xd8>)
     dce:	7813      	ldrb	r3, [r2, #0]
	tmp &= ~EIC_CTRLA_CKSEL;
     dd0:	f003 03ef 	and.w	r3, r3, #239	; 0xef
	((Eic *)hw)->CTRLA.reg = tmp;
     dd4:	7013      	strb	r3, [r2, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     dd6:	6853      	ldr	r3, [r2, #4]
     dd8:	f013 0f03 	tst.w	r3, #3
     ddc:	d1fb      	bne.n	dd6 <_ext_irq_init+0x5e>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
     dde:	4b1c      	ldr	r3, [pc, #112]	; (e50 <_ext_irq_init+0xd8>)
     de0:	2200      	movs	r2, #0
     de2:	705a      	strb	r2, [r3, #1]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
     de4:	609a      	str	r2, [r3, #8]
}

static inline void hri_eic_write_ASYNCH_reg(const void *const hw, hri_eic_asynch_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->ASYNCH.reg = data;
     de6:	619a      	str	r2, [r3, #24]
}

static inline void hri_eic_write_DEBOUNCEN_reg(const void *const hw, hri_eic_debouncen_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DEBOUNCEN.reg = data;
     de8:	631a      	str	r2, [r3, #48]	; 0x30
}

static inline void hri_eic_write_DPRESCALER_reg(const void *const hw, hri_eic_dprescaler_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->DPRESCALER.reg = data;
     dea:	635a      	str	r2, [r3, #52]	; 0x34
	((Eic *)hw)->CONFIG[index].reg = data;
     dec:	61da      	str	r2, [r3, #28]
     dee:	621a      	str	r2, [r3, #32]
	((Eic *)hw)->CTRLA.reg |= EIC_CTRLA_ENABLE;
     df0:	781a      	ldrb	r2, [r3, #0]
     df2:	f042 0202 	orr.w	r2, r2, #2
     df6:	701a      	strb	r2, [r3, #0]
	while (((Eic *)hw)->SYNCBUSY.reg & reg) {
     df8:	461a      	mov	r2, r3
     dfa:	6853      	ldr	r3, [r2, #4]
     dfc:	f013 0f03 	tst.w	r3, #3
     e00:	d1fb      	bne.n	dfa <_ext_irq_init+0x82>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     e02:	4b14      	ldr	r3, [pc, #80]	; (e54 <_ext_irq_init+0xdc>)
     e04:	f44f 3200 	mov.w	r2, #131072	; 0x20000
     e08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
     e0c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     e10:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     e14:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     e18:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     e1a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
     e1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
     e22:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     e26:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     e2a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     e2e:	601a      	str	r2, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     e30:	f44f 2200 	mov.w	r2, #524288	; 0x80000
     e34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
     e38:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     e3c:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     e40:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     e44:	601a      	str	r2, [r3, #0]
	callback = cb;
     e46:	4b04      	ldr	r3, [pc, #16]	; (e58 <_ext_irq_init+0xe0>)
     e48:	6018      	str	r0, [r3, #0]
}
     e4a:	2000      	movs	r0, #0
     e4c:	4770      	bx	lr
     e4e:	bf00      	nop
     e50:	40002800 	.word	0x40002800
     e54:	e000e100 	.word	0xe000e100
     e58:	20000034 	.word	0x20000034

00000e5c <EIC_5_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_5_Handler(void)
{
     e5c:	b508      	push	{r3, lr}
	_ext_irq_handler();
     e5e:	4b01      	ldr	r3, [pc, #4]	; (e64 <EIC_5_Handler+0x8>)
     e60:	4798      	blx	r3
     e62:	bd08      	pop	{r3, pc}
     e64:	00000ca1 	.word	0x00000ca1

00000e68 <EIC_6_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_6_Handler(void)
{
     e68:	b508      	push	{r3, lr}
	_ext_irq_handler();
     e6a:	4b01      	ldr	r3, [pc, #4]	; (e70 <EIC_6_Handler+0x8>)
     e6c:	4798      	blx	r3
     e6e:	bd08      	pop	{r3, pc}
     e70:	00000ca1 	.word	0x00000ca1

00000e74 <EIC_7_Handler>:
} /**
   * \brief EIC interrupt handler
   */
void EIC_7_Handler(void)
{
     e74:	b508      	push	{r3, lr}
	_ext_irq_handler();
     e76:	4b01      	ldr	r3, [pc, #4]	; (e7c <EIC_7_Handler+0x8>)
     e78:	4798      	blx	r3
     e7a:	bd08      	pop	{r3, pc}
     e7c:	00000ca1 	.word	0x00000ca1

00000e80 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     e80:	f010 0f01 	tst.w	r0, #1
     e84:	d008      	beq.n	e98 <_gclk_init_generators_by_fref+0x18>
	((Gclk *)hw)->GENCTRL[index].reg = data;
     e86:	4a05      	ldr	r2, [pc, #20]	; (e9c <_gclk_init_generators_by_fref+0x1c>)
     e88:	4b05      	ldr	r3, [pc, #20]	; (ea0 <_gclk_init_generators_by_fref+0x20>)
     e8a:	621a      	str	r2, [r3, #32]
	while (((Gclk *)hw)->SYNCBUSY.reg & reg) {
     e8c:	4619      	mov	r1, r3
     e8e:	f643 72fd 	movw	r2, #16381	; 0x3ffd
     e92:	684b      	ldr	r3, [r1, #4]
     e94:	4213      	tst	r3, r2
     e96:	d1fc      	bne.n	e92 <_gclk_init_generators_by_fref+0x12>
     e98:	4770      	bx	lr
     e9a:	bf00      	nop
     e9c:	00010101 	.word	0x00010101
     ea0:	40001c00 	.word	0x40001c00

00000ea4 <_mclk_init>:
	((Mclk *)hw)->CPUDIV.reg = data;
     ea4:	2201      	movs	r2, #1
     ea6:	4b01      	ldr	r3, [pc, #4]	; (eac <_mclk_init+0x8>)
     ea8:	715a      	strb	r2, [r3, #5]
     eaa:	4770      	bx	lr
     eac:	40000800 	.word	0x40000800

00000eb0 <_nvm_interrupt_handler>:
 * \internal NVM interrupt handler
 *
 * \param[in] p The pointer to interrupt parameter
 */
static void _nvm_interrupt_handler(struct _flash_device *device)
{
     eb0:	b508      	push	{r3, lr}
	void *const hw = device->hw;
     eb2:	6903      	ldr	r3, [r0, #16]
	return (((Nvmctrl *)hw)->INTFLAG.reg & NVMCTRL_INTFLAG_DONE) >> NVMCTRL_INTFLAG_DONE_Pos;
     eb4:	8a1a      	ldrh	r2, [r3, #16]

	if (hri_nvmctrl_get_INTFLAG_DONE_bit(hw)) {
     eb6:	f012 0f01 	tst.w	r2, #1
     eba:	d005      	beq.n	ec8 <_nvm_interrupt_handler+0x18>
	((Nvmctrl *)hw)->INTFLAG.reg = NVMCTRL_INTFLAG_DONE;
     ebc:	2201      	movs	r2, #1
     ebe:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_DONE_bit(hw);

		if (NULL != device->flash_cb.ready_cb) {
     ec0:	6803      	ldr	r3, [r0, #0]
     ec2:	b153      	cbz	r3, eda <_nvm_interrupt_handler+0x2a>
			device->flash_cb.ready_cb(device);
     ec4:	4798      	blx	r3
     ec6:	bd08      	pop	{r3, pc}
	return ((Nvmctrl *)hw)->INTFLAG.reg;
     ec8:	8a1a      	ldrh	r2, [r3, #16]
     eca:	b292      	uxth	r2, r2
		}
	} else if (hri_nvmctrl_read_INTFLAG_reg(hw) && ~NVMCTRL_INTFLAG_ERR) {
     ecc:	b12a      	cbz	r2, eda <_nvm_interrupt_handler+0x2a>
	((Nvmctrl *)hw)->INTFLAG.reg = mask;
     ece:	f240 225e 	movw	r2, #606	; 0x25e
     ed2:	821a      	strh	r2, [r3, #16]
		hri_nvmctrl_clear_INTFLAG_reg(hw, NVMCTRL_INTFLAG_ERR);

		if (NULL != device->flash_cb.error_cb) {
     ed4:	6843      	ldr	r3, [r0, #4]
     ed6:	b103      	cbz	r3, eda <_nvm_interrupt_handler+0x2a>
			device->flash_cb.error_cb(device);
     ed8:	4798      	blx	r3
     eda:	bd08      	pop	{r3, pc}

00000edc <_flash_init>:
{
     edc:	b538      	push	{r3, r4, r5, lr}
     ede:	460c      	mov	r4, r1
	ASSERT(device && (hw == NVMCTRL));
     ee0:	4605      	mov	r5, r0
     ee2:	b350      	cbz	r0, f3a <_flash_init+0x5e>
     ee4:	4816      	ldr	r0, [pc, #88]	; (f40 <_flash_init+0x64>)
     ee6:	4281      	cmp	r1, r0
     ee8:	bf14      	ite	ne
     eea:	2000      	movne	r0, #0
     eec:	2001      	moveq	r0, #1
     eee:	224b      	movs	r2, #75	; 0x4b
     ef0:	4914      	ldr	r1, [pc, #80]	; (f44 <_flash_init+0x68>)
     ef2:	4b15      	ldr	r3, [pc, #84]	; (f48 <_flash_init+0x6c>)
     ef4:	4798      	blx	r3
	device->hw = hw;
     ef6:	612c      	str	r4, [r5, #16]
	NVMCTRL_CRITICAL_SECTION_LEAVE();
}

static inline hri_nvmctrl_ctrla_reg_t hri_nvmctrl_read_CTRLA_reg(const void *const hw)
{
	return ((Nvmctrl *)hw)->CTRLA.reg;
     ef8:	8823      	ldrh	r3, [r4, #0]
	hri_nvmctrl_write_CTRLA_reg(hw, ctrla);
     efa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
     efe:	049b      	lsls	r3, r3, #18
     f00:	0c9b      	lsrs	r3, r3, #18
	((Nvmctrl *)hw)->CTRLA.reg = data;
     f02:	8023      	strh	r3, [r4, #0]
	_nvm_dev = device;
     f04:	4b11      	ldr	r3, [pc, #68]	; (f4c <_flash_init+0x70>)
     f06:	601d      	str	r5, [r3, #0]
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     f08:	4b11      	ldr	r3, [pc, #68]	; (f50 <_flash_init+0x74>)
     f0a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
     f0e:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
     f12:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     f16:	f3bf 8f6f 	isb	sy
     f1a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
     f1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  __ASM volatile ("dsb 0xF":::"memory");
     f22:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     f26:	f3bf 8f6f 	isb	sy
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     f2a:	f8c3 1180 	str.w	r1, [r3, #384]	; 0x180
     f2e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     f32:	6019      	str	r1, [r3, #0]
     f34:	601a      	str	r2, [r3, #0]
}
     f36:	2000      	movs	r0, #0
     f38:	bd38      	pop	{r3, r4, r5, pc}
     f3a:	2000      	movs	r0, #0
     f3c:	e7d7      	b.n	eee <_flash_init+0x12>
     f3e:	bf00      	nop
     f40:	41004000 	.word	0x41004000
     f44:	00001434 	.word	0x00001434
     f48:	00000bfd 	.word	0x00000bfd
     f4c:	20000038 	.word	0x20000038
     f50:	e000e100 	.word	0xe000e100

00000f54 <NVMCTRL_0_Handler>:

/**
 * \internal NVM 0 interrupt handler
 */
void NVMCTRL_0_Handler(void)
{
     f54:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
     f56:	4b02      	ldr	r3, [pc, #8]	; (f60 <NVMCTRL_0_Handler+0xc>)
     f58:	6818      	ldr	r0, [r3, #0]
     f5a:	4b02      	ldr	r3, [pc, #8]	; (f64 <NVMCTRL_0_Handler+0x10>)
     f5c:	4798      	blx	r3
     f5e:	bd08      	pop	{r3, pc}
     f60:	20000038 	.word	0x20000038
     f64:	00000eb1 	.word	0x00000eb1

00000f68 <NVMCTRL_1_Handler>:

/**
 * \internal NVM 1 interrupt handler
 */
void NVMCTRL_1_Handler(void)
{
     f68:	b508      	push	{r3, lr}
	_nvm_interrupt_handler(_nvm_dev);
     f6a:	4b02      	ldr	r3, [pc, #8]	; (f74 <NVMCTRL_1_Handler+0xc>)
     f6c:	6818      	ldr	r0, [r3, #0]
     f6e:	4b02      	ldr	r3, [pc, #8]	; (f78 <NVMCTRL_1_Handler+0x10>)
     f70:	4798      	blx	r3
     f72:	bd08      	pop	{r3, pc}
     f74:	20000038 	.word	0x20000038
     f78:	00000eb1 	.word	0x00000eb1

00000f7c <_osc32kctrl_init_sources>:
}

static inline hri_osc32kctrl_osculp32k_reg_t hri_osc32kctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint32_t tmp;
	tmp = ((Osc32kctrl *)hw)->OSCULP32K.reg;
     f7c:	4b03      	ldr	r3, [pc, #12]	; (f8c <_osc32kctrl_init_sources+0x10>)
     f7e:	69da      	ldr	r2, [r3, #28]
	calib = hri_osc32kctrl_read_OSCULP32K_CALIB_bf(hw);
	hri_osc32kctrl_write_OSCULP32K_reg(hw,
#if CONF_OSCULP32K_CALIB_ENABLE == 1
	                                   OSC32KCTRL_OSCULP32K_CALIB(CONF_OSCULP32K_CALIB)
#else
	                                   OSC32KCTRL_OSCULP32K_CALIB(calib)
     f80:	f402 527c 	and.w	r2, r2, #16128	; 0x3f00
}

static inline void hri_osc32kctrl_write_OSCULP32K_reg(const void *const hw, hri_osc32kctrl_osculp32k_reg_t data)
{
	OSC32KCTRL_CRITICAL_SECTION_ENTER();
	((Osc32kctrl *)hw)->OSCULP32K.reg = data;
     f84:	61da      	str	r2, [r3, #28]
	((Osc32kctrl *)hw)->RTCCTRL.reg = data;
     f86:	2201      	movs	r2, #1
     f88:	741a      	strb	r2, [r3, #16]
     f8a:	4770      	bx	lr
     f8c:	40001400 	.word	0x40001400

00000f90 <_oscctrl_init_sources>:
}

static inline void hri_oscctrl_write_XOSCCTRL_reg(const void *const hw, uint8_t index, hri_oscctrl_xoscctrl_reg_t data)
{
	OSCCTRL_CRITICAL_SECTION_ENTER();
	((Oscctrl *)hw)->XOSCCTRL[index].reg = data;
     f90:	4a04      	ldr	r2, [pc, #16]	; (fa4 <_oscctrl_init_sources+0x14>)
     f92:	4b05      	ldr	r3, [pc, #20]	; (fa8 <_oscctrl_init_sources+0x18>)
     f94:	619a      	str	r2, [r3, #24]
	return (((Oscctrl *)hw)->STATUS.reg & OSCCTRL_STATUS_XOSCRDY1) >> OSCCTRL_STATUS_XOSCRDY1_Pos;
     f96:	461a      	mov	r2, r3
     f98:	6913      	ldr	r3, [r2, #16]
	        | (CONF_XOSC1_XTALEN << OSCCTRL_XOSCCTRL_XTALEN_Pos) | (CONF_XOSC1_ENABLE << OSCCTRL_XOSCCTRL_ENABLE_Pos));
#endif

#if CONF_XOSC1_CONFIG == 1
#if CONF_XOSC1_ENABLE == 1
	while (!hri_oscctrl_get_STATUS_XOSCRDY1_bit(hw))
     f9a:	f013 0f02 	tst.w	r3, #2
     f9e:	d0fb      	beq.n	f98 <_oscctrl_init_sources+0x8>
	hri_oscctrl_set_XOSCCTRL_ONDEMAND_bit(hw, 1);
#endif
#endif

	(void)hw;
}
     fa0:	4770      	bx	lr
     fa2:	bf00      	nop
     fa4:	03002606 	.word	0x03002606
     fa8:	40001000 	.word	0x40001000

00000fac <_oscctrl_init_referenced_generators>:

void _oscctrl_init_referenced_generators(void)
{
     fac:	4770      	bx	lr
	...

00000fb0 <_qspi_sync_init>:
{
	hri_qspi_write_CTRLA_reg(hw, QSPI_CTRLA_ENABLE | QSPI_CTRLA_LASTXFER);
}

int32_t _qspi_sync_init(struct _qspi_sync_dev *dev, void *const hw)
{
     fb0:	b538      	push	{r3, r4, r5, lr}
     fb2:	460c      	mov	r4, r1
	ASSERT(dev && hw);
     fb4:	4605      	mov	r5, r0
     fb6:	b180      	cbz	r0, fda <_qspi_sync_init+0x2a>
     fb8:	1c08      	adds	r0, r1, #0
     fba:	bf18      	it	ne
     fbc:	2001      	movne	r0, #1
     fbe:	2240      	movs	r2, #64	; 0x40
     fc0:	4907      	ldr	r1, [pc, #28]	; (fe0 <_qspi_sync_init+0x30>)
     fc2:	4b08      	ldr	r3, [pc, #32]	; (fe4 <_qspi_sync_init+0x34>)
     fc4:	4798      	blx	r3
	dev->prvt = hw;
     fc6:	602c      	str	r4, [r5, #0]
}

static inline void hri_qspi_write_CTRLA_reg(const void *const hw, hri_qspi_ctrla_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLA.reg = data;
     fc8:	2301      	movs	r3, #1
     fca:	6023      	str	r3, [r4, #0]
}

static inline void hri_qspi_write_CTRLB_reg(const void *const hw, hri_qspi_ctrlb_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->CTRLB.reg = data;
     fcc:	2311      	movs	r3, #17
     fce:	6063      	str	r3, [r4, #4]
}

static inline void hri_qspi_write_BAUD_reg(const void *const hw, hri_qspi_baud_reg_t data)
{
	QSPI_CRITICAL_SECTION_ENTER();
	((Qspi *)hw)->BAUD.reg = data;
     fd0:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
     fd4:	60a3      	str	r3, [r4, #8]

	hri_qspi_write_BAUD_reg(hw,
	                        CONF_QSPI_CPOL << QSPI_BAUD_CPOL_Pos | CONF_QSPI_CPHA << QSPI_BAUD_CPHA_Pos
	                            | QSPI_BAUD_BAUD(CONF_QSPI_BAUD_RATE) | QSPI_BAUD_DLYBS(CONF_QSPI_DLYBS));
	return ERR_NONE;
}
     fd6:	2000      	movs	r0, #0
     fd8:	bd38      	pop	{r3, r4, r5, pc}
     fda:	2000      	movs	r0, #0
     fdc:	e7ef      	b.n	fbe <_qspi_sync_init+0xe>
     fde:	bf00      	nop
     fe0:	00001454 	.word	0x00001454
     fe4:	00000bfd 	.word	0x00000bfd

00000fe8 <RAMECC_Handler>:

/**
 * \internal RAMECC interrupt handler
 */
void RAMECC_Handler(void)
{
     fe8:	b500      	push	{lr}
     fea:	b083      	sub	sp, #12
	return tmp;
}

static inline hri_ramecc_intflag_reg_t hri_ramecc_read_INTFLAG_reg(const void *const hw)
{
	return ((Ramecc *)hw)->INTFLAG.reg;
     fec:	4b0d      	ldr	r3, [pc, #52]	; (1024 <RAMECC_Handler+0x3c>)
     fee:	789b      	ldrb	r3, [r3, #2]
     ff0:	b2db      	uxtb	r3, r3
	struct _ramecc_device *dev      = (struct _ramecc_device *)&device;
	volatile uint32_t      int_mask = hri_ramecc_read_INTFLAG_reg(RAMECC);
     ff2:	9301      	str	r3, [sp, #4]

	if (int_mask & RAMECC_INTFLAG_DUALE && dev->ramecc_cb.dual_bit_err) {
     ff4:	9b01      	ldr	r3, [sp, #4]
     ff6:	f013 0f02 	tst.w	r3, #2
     ffa:	d006      	beq.n	100a <RAMECC_Handler+0x22>
     ffc:	4b0a      	ldr	r3, [pc, #40]	; (1028 <RAMECC_Handler+0x40>)
     ffe:	681b      	ldr	r3, [r3, #0]
    1000:	b11b      	cbz	r3, 100a <RAMECC_Handler+0x22>
	return tmp;
}

static inline hri_ramecc_erraddr_reg_t hri_ramecc_read_ERRADDR_reg(const void *const hw)
{
	return ((Ramecc *)hw)->ERRADDR.reg;
    1002:	4a08      	ldr	r2, [pc, #32]	; (1024 <RAMECC_Handler+0x3c>)
    1004:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.dual_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    1006:	4798      	blx	r3
    1008:	e009      	b.n	101e <RAMECC_Handler+0x36>
	} else if (int_mask & RAMECC_INTFLAG_SINGLEE && dev->ramecc_cb.single_bit_err) {
    100a:	9b01      	ldr	r3, [sp, #4]
    100c:	f013 0f01 	tst.w	r3, #1
    1010:	d005      	beq.n	101e <RAMECC_Handler+0x36>
    1012:	4b05      	ldr	r3, [pc, #20]	; (1028 <RAMECC_Handler+0x40>)
    1014:	685b      	ldr	r3, [r3, #4]
    1016:	b113      	cbz	r3, 101e <RAMECC_Handler+0x36>
    1018:	4a02      	ldr	r2, [pc, #8]	; (1024 <RAMECC_Handler+0x3c>)
    101a:	6850      	ldr	r0, [r2, #4]
		dev->ramecc_cb.single_bit_err((uint32_t)hri_ramecc_read_ERRADDR_reg(RAMECC));
    101c:	4798      	blx	r3
	} else {
		return;
	}
}
    101e:	b003      	add	sp, #12
    1020:	f85d fb04 	ldr.w	pc, [sp], #4
    1024:	41020000 	.word	0x41020000
    1028:	2000008c 	.word	0x2000008c

0000102c <_timer_init>:

/**
 * \brief Initialize Timer
 */
int32_t _timer_init(struct _timer_device *const dev, void *const hw)
{
    102c:	b538      	push	{r3, r4, r5, lr}
    102e:	460c      	mov	r4, r1
	ASSERT(dev);
    1030:	4605      	mov	r5, r0
    1032:	2230      	movs	r2, #48	; 0x30
    1034:	4914      	ldr	r1, [pc, #80]	; (1088 <_timer_init+0x5c>)
    1036:	3000      	adds	r0, #0
    1038:	bf18      	it	ne
    103a:	2001      	movne	r0, #1
    103c:	4b13      	ldr	r3, [pc, #76]	; (108c <_timer_init+0x60>)
    103e:	4798      	blx	r3

	dev->hw = hw;
    1040:	60ec      	str	r4, [r5, #12]
}

static inline void hri_rtcmode0_write_CTRLA_reg(const void *const hw, hri_rtcmode0_ctrla_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    1042:	2301      	movs	r3, #1
    1044:	8023      	strh	r3, [r4, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1046:	f248 0203 	movw	r2, #32771	; 0x8003
    104a:	6923      	ldr	r3, [r4, #16]
    104c:	4213      	tst	r3, r2
    104e:	d1fc      	bne.n	104a <_timer_init+0x1e>

	hri_rtcmode0_write_CTRLA_reg(dev->hw, RTC_MODE0_CTRLA_SWRST);
	hri_rtcmode0_wait_for_sync(dev->hw, RTC_MODE0_SYNCBUSY_SWRST);
    1050:	68eb      	ldr	r3, [r5, #12]
    1052:	691a      	ldr	r2, [r3, #16]
    1054:	f012 0f01 	tst.w	r2, #1
    1058:	d1fb      	bne.n	1052 <_timer_init+0x26>
	((Rtc *)hw)->MODE0.CTRLA.reg = data;
    105a:	f248 0280 	movw	r2, #32896	; 0x8080
    105e:	801a      	strh	r2, [r3, #0]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1060:	f248 0103 	movw	r1, #32771	; 0x8003
    1064:	691a      	ldr	r2, [r3, #16]
    1066:	420a      	tst	r2, r1
    1068:	d1fc      	bne.n	1064 <_timer_init+0x38>
	        | (CONF_RTC_TAMPEVEI << RTC_MODE0_EVCTRL_TAMPEVEI_Pos) | (CONF_RTC_OVFEO << RTC_MODE0_EVCTRL_OVFEO_Pos));
#endif

	hri_rtcmode0_write_CTRLA_reg(
	    dev->hw, RTC_MODE0_CTRLA_PRESCALER(CONF_RTC_PRESCALER) | RTC_MODE0_CTRLA_COUNTSYNC | RTC_MODE0_CTRLA_MATCHCLR);
	hri_rtcmode0_write_COMP_reg(dev->hw, 0, CONF_RTC_COMP_VAL);
    106a:	68ea      	ldr	r2, [r5, #12]
}

static inline void hri_rtcmode0_write_COMP_reg(const void *const hw, uint8_t index, hri_rtcmode0_comp_reg_t data)
{
	RTC_CRITICAL_SECTION_ENTER();
	((Rtc *)hw)->MODE0.COMP[index].reg = data;
    106c:	2320      	movs	r3, #32
    106e:	6213      	str	r3, [r2, #32]
	while (((Rtc *)hw)->MODE0.SYNCBUSY.reg & reg) {
    1070:	6913      	ldr	r3, [r2, #16]
    1072:	f013 0f60 	tst.w	r3, #96	; 0x60
    1076:	d1fb      	bne.n	1070 <_timer_init+0x44>
	hri_rtcmode0_set_INTEN_CMP0_bit(dev->hw);
    1078:	68eb      	ldr	r3, [r5, #12]
	((Rtc *)hw)->MODE0.INTENSET.reg = RTC_MODE0_INTENSET_CMP0;
    107a:	f44f 7280 	mov.w	r2, #256	; 0x100
    107e:	815a      	strh	r2, [r3, #10]

	_rtc_dev = dev;
    1080:	4b03      	ldr	r3, [pc, #12]	; (1090 <_timer_init+0x64>)
    1082:	601d      	str	r5, [r3, #0]

	return ERR_NONE;
}
    1084:	2000      	movs	r0, #0
    1086:	bd38      	pop	{r3, r4, r5, pc}
    1088:	0000146c 	.word	0x0000146c
    108c:	00000bfd 	.word	0x00000bfd
    1090:	2000003c 	.word	0x2000003c

00001094 <_rtc_get_timer>:
 * \brief Retrieve timer helper functions
 */
struct _timer_hpl_interface *_rtc_get_timer(void)
{
	return NULL;
}
    1094:	2000      	movs	r0, #0
    1096:	4770      	bx	lr

00001098 <RTC_Handler>:

/**
 * \brief Rtc interrupt handler
 */
void RTC_Handler(void)
{
    1098:	b510      	push	{r4, lr}
	_rtc_timer_interrupt_handler(_rtc_dev);
    109a:	4b08      	ldr	r3, [pc, #32]	; (10bc <RTC_Handler+0x24>)
    109c:	681c      	ldr	r4, [r3, #0]
	uint16_t flag = hri_rtcmode0_read_INTFLAG_reg(dev->hw);
    109e:	68e3      	ldr	r3, [r4, #12]
	return ((Rtc *)hw)->MODE0.INTFLAG.reg;
    10a0:	899b      	ldrh	r3, [r3, #12]
	if (flag & RTC_MODE0_INTFLAG_CMP0) {
    10a2:	f413 7f80 	tst.w	r3, #256	; 0x100
    10a6:	d007      	beq.n	10b8 <RTC_Handler+0x20>
		if (dev->timer_cb.period_expired) {
    10a8:	6823      	ldr	r3, [r4, #0]
    10aa:	b10b      	cbz	r3, 10b0 <RTC_Handler+0x18>
			dev->timer_cb.period_expired(dev);
    10ac:	4620      	mov	r0, r4
    10ae:	4798      	blx	r3
		hri_rtcmode0_clear_interrupt_CMP0_bit(dev->hw);
    10b0:	68e3      	ldr	r3, [r4, #12]
	((Rtc *)hw)->MODE0.INTFLAG.reg = RTC_MODE0_INTFLAG_CMP0;
    10b2:	f44f 7280 	mov.w	r2, #256	; 0x100
    10b6:	819a      	strh	r2, [r3, #12]
    10b8:	bd10      	pop	{r4, pc}
    10ba:	bf00      	nop
    10bc:	2000003c 	.word	0x2000003c

000010c0 <_sercom_get_hardware_index>:

/**
 * \brief Retrieve ordinal number of the given sercom hardware instance
 */
static uint8_t _sercom_get_hardware_index(const void *const hw)
{
    10c0:	b470      	push	{r4, r5, r6}
    10c2:	b087      	sub	sp, #28
    10c4:	4606      	mov	r6, r0
	Sercom *const sercom_modules[] = SERCOM_INSTS;
    10c6:	466c      	mov	r4, sp
    10c8:	4d0c      	ldr	r5, [pc, #48]	; (10fc <_sercom_get_hardware_index+0x3c>)
    10ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    10cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    10ce:	e895 0003 	ldmia.w	r5, {r0, r1}
    10d2:	e884 0003 	stmia.w	r4, {r0, r1}
	/* Find index for SERCOM instance. */
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
		if ((uint32_t)hw == (uint32_t)sercom_modules[i]) {
    10d6:	9b00      	ldr	r3, [sp, #0]
    10d8:	42b3      	cmp	r3, r6
    10da:	d00c      	beq.n	10f6 <_sercom_get_hardware_index+0x36>
    10dc:	4632      	mov	r2, r6
    10de:	2001      	movs	r0, #1
    10e0:	f85d 3020 	ldr.w	r3, [sp, r0, lsl #2]
    10e4:	4293      	cmp	r3, r2
    10e6:	d007      	beq.n	10f8 <_sercom_get_hardware_index+0x38>
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    10e8:	3001      	adds	r0, #1
    10ea:	2806      	cmp	r0, #6
    10ec:	d1f8      	bne.n	10e0 <_sercom_get_hardware_index+0x20>
			return i;
		}
	}
	return 0;
    10ee:	2000      	movs	r0, #0
}
    10f0:	b007      	add	sp, #28
    10f2:	bc70      	pop	{r4, r5, r6}
    10f4:	4770      	bx	lr
	for (uint32_t i = 0; i < SERCOM_INST_NUM; i++) {
    10f6:	2000      	movs	r0, #0
			return i;
    10f8:	b2c0      	uxtb	r0, r0
    10fa:	e7f9      	b.n	10f0 <_sercom_get_hardware_index+0x30>
    10fc:	00001484 	.word	0x00001484

00001100 <_i2c_s_init>:
 * \param[in] p The pointer to hardware instance
 *
 *\ return status of initialization
 */
static int32_t _i2c_s_init(void *const hw)
{
    1100:	b510      	push	{r4, lr}
    1102:	4604      	mov	r4, r0
 *
 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2c_s_index(const void *const hw)
{
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
    1104:	4b1d      	ldr	r3, [pc, #116]	; (117c <_i2c_s_init+0x7c>)
    1106:	4798      	blx	r3
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2css); i++) {
		if (_i2css[i].number == sercom_offset) {
    1108:	2803      	cmp	r0, #3
    110a:	d008      	beq.n	111e <_i2c_s_init+0x1e>
			return i;
		}
	}

	ASSERT(false);
    110c:	f240 72b7 	movw	r2, #1975	; 0x7b7
    1110:	491b      	ldr	r1, [pc, #108]	; (1180 <_i2c_s_init+0x80>)
    1112:	2000      	movs	r0, #0
    1114:	4b1b      	ldr	r3, [pc, #108]	; (1184 <_i2c_s_init+0x84>)
    1116:	4798      	blx	r3
		return ERR_INVALID_ARG;
    1118:	f06f 000c 	mvn.w	r0, #12
}
    111c:	bd10      	pop	{r4, pc}
	};
}

static inline bool hri_sercomi2cs_is_syncing(const void *const hw, hri_sercomi2cs_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg;
    111e:	69e3      	ldr	r3, [r4, #28]
	if (!hri_sercomi2cs_is_syncing(hw, SERCOM_I2CS_CTRLA_SWRST)) {
    1120:	f013 0f01 	tst.w	r3, #1
    1124:	d119      	bne.n	115a <_i2c_s_init+0x5a>
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    1126:	69e3      	ldr	r3, [r4, #28]
    1128:	f013 0f03 	tst.w	r3, #3
    112c:	d1fb      	bne.n	1126 <_i2c_s_init+0x26>
static inline hri_sercomi2cs_ctrla_reg_t hri_sercomi2cs_get_CTRLA_reg(const void *const          hw,
                                                                      hri_sercomi2cs_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomi2cs_wait_for_sync(hw, SERCOM_I2CS_SYNCBUSY_SWRST | SERCOM_I2CS_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->I2CS.CTRLA.reg;
    112e:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cs_get_CTRLA_reg(hw, SERCOM_I2CS_CTRLA_ENABLE)) {
    1130:	f013 0f02 	tst.w	r3, #2
    1134:	d00b      	beq.n	114e <_i2c_s_init+0x4e>
	((Sercom *)hw)->I2CS.CTRLA.reg &= ~SERCOM_I2CS_CTRLA_ENABLE;
    1136:	6823      	ldr	r3, [r4, #0]
    1138:	f023 0302 	bic.w	r3, r3, #2
    113c:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    113e:	69e3      	ldr	r3, [r4, #28]
    1140:	f013 0f03 	tst.w	r3, #3
    1144:	d1fb      	bne.n	113e <_i2c_s_init+0x3e>
    1146:	69e3      	ldr	r3, [r4, #28]
    1148:	f013 0f02 	tst.w	r3, #2
    114c:	d1fb      	bne.n	1146 <_i2c_s_init+0x46>
}

static inline void hri_sercomi2cs_write_CTRLA_reg(const void *const hw, hri_sercomi2cs_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.CTRLA.reg = data;
    114e:	2311      	movs	r3, #17
    1150:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    1152:	69e3      	ldr	r3, [r4, #28]
    1154:	f013 0f03 	tst.w	r3, #3
    1158:	d1fb      	bne.n	1152 <_i2c_s_init+0x52>
    115a:	69e3      	ldr	r3, [r4, #28]
    115c:	f013 0f01 	tst.w	r3, #1
    1160:	d1fb      	bne.n	115a <_i2c_s_init+0x5a>
	((Sercom *)hw)->I2CS.CTRLA.reg = data;
    1162:	4b09      	ldr	r3, [pc, #36]	; (1188 <_i2c_s_init+0x88>)
    1164:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    1166:	69e3      	ldr	r3, [r4, #28]
    1168:	f013 0f03 	tst.w	r3, #3
    116c:	d1fb      	bne.n	1166 <_i2c_s_init+0x66>
}

static inline void hri_sercomi2cs_write_CTRLB_reg(const void *const hw, hri_sercomi2cs_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.CTRLB.reg = data;
    116e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
    1172:	6063      	str	r3, [r4, #4]
}

static inline void hri_sercomi2cs_write_ADDR_reg(const void *const hw, hri_sercomi2cs_addr_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.ADDR.reg = data;
    1174:	2320      	movs	r3, #32
    1176:	6263      	str	r3, [r4, #36]	; 0x24
	return ERR_NONE;
    1178:	2000      	movs	r0, #0
    117a:	bd10      	pop	{r4, pc}
    117c:	000010c1 	.word	0x000010c1
    1180:	000014b4 	.word	0x000014b4
    1184:	00000bfd 	.word	0x00000bfd
    1188:	00200010 	.word	0x00200010

0000118c <_i2c_s_set_address>:
 *
 * \param[in] hw The pointer to hardware instance
 * \param[in] address Address to set
 */
static int32_t _i2c_s_set_address(void *const hw, const uint16_t address)
{
    118c:	b570      	push	{r4, r5, r6, lr}
    118e:	b082      	sub	sp, #8
    1190:	4604      	mov	r4, r0
    1192:	460e      	mov	r6, r1
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    1194:	69e3      	ldr	r3, [r4, #28]
    1196:	f013 0f03 	tst.w	r3, #3
    119a:	d1fb      	bne.n	1194 <_i2c_s_set_address+0x8>
	tmp = ((Sercom *)hw)->I2CS.CTRLA.reg;
    119c:	6825      	ldr	r5, [r4, #0]
	tmp = (tmp & SERCOM_I2CS_CTRLA_ENABLE) >> SERCOM_I2CS_CTRLA_ENABLE_Pos;
    119e:	f3c5 0540 	ubfx	r5, r5, #1, #1
	bool enabled;

	enabled = hri_sercomi2cs_get_CTRLA_ENABLE_bit(hw);

	CRITICAL_SECTION_ENTER()
    11a2:	a801      	add	r0, sp, #4
    11a4:	4b11      	ldr	r3, [pc, #68]	; (11ec <_i2c_s_set_address+0x60>)
    11a6:	4798      	blx	r3
	((Sercom *)hw)->I2CS.CTRLA.reg &= ~SERCOM_I2CS_CTRLA_ENABLE;
    11a8:	6823      	ldr	r3, [r4, #0]
    11aa:	f023 0302 	bic.w	r3, r3, #2
    11ae:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    11b0:	69e3      	ldr	r3, [r4, #28]
    11b2:	f013 0f03 	tst.w	r3, #3
    11b6:	d1fb      	bne.n	11b0 <_i2c_s_set_address+0x24>
	tmp = ((Sercom *)hw)->I2CS.ADDR.reg;
    11b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CS_ADDR_ADDR_Msk;
    11ba:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
    11be:	f023 0306 	bic.w	r3, r3, #6
	tmp |= SERCOM_I2CS_ADDR_ADDR(data);
    11c2:	f240 71fe 	movw	r1, #2046	; 0x7fe
    11c6:	ea01 0146 	and.w	r1, r1, r6, lsl #1
    11ca:	4319      	orrs	r1, r3
	((Sercom *)hw)->I2CS.ADDR.reg = tmp;
    11cc:	6261      	str	r1, [r4, #36]	; 0x24
	hri_sercomi2cs_clear_CTRLA_ENABLE_bit(hw);
	hri_sercomi2cs_write_ADDR_ADDR_bf(hw, address);
	CRITICAL_SECTION_LEAVE()
    11ce:	a801      	add	r0, sp, #4
    11d0:	4b07      	ldr	r3, [pc, #28]	; (11f0 <_i2c_s_set_address+0x64>)
    11d2:	4798      	blx	r3

	if (enabled) {
    11d4:	b13d      	cbz	r5, 11e6 <_i2c_s_set_address+0x5a>
	((Sercom *)hw)->I2CS.CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
    11d6:	6823      	ldr	r3, [r4, #0]
    11d8:	f043 0302 	orr.w	r3, r3, #2
    11dc:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    11de:	69e3      	ldr	r3, [r4, #28]
    11e0:	f013 0f03 	tst.w	r3, #3
    11e4:	d1fb      	bne.n	11de <_i2c_s_set_address+0x52>
		hri_sercomi2cs_set_CTRLA_ENABLE_bit(hw);
	}

	return ERR_NONE;
}
    11e6:	2000      	movs	r0, #0
    11e8:	b002      	add	sp, #8
    11ea:	bd70      	pop	{r4, r5, r6, pc}
    11ec:	000007e1 	.word	0x000007e1
    11f0:	000007ef 	.word	0x000007ef

000011f4 <_i2c_s_sync_init>:
{
    11f4:	b538      	push	{r3, r4, r5, lr}
    11f6:	460c      	mov	r4, r1
	ASSERT(device);
    11f8:	4605      	mov	r5, r0
    11fa:	f240 62a6 	movw	r2, #1702	; 0x6a6
    11fe:	4907      	ldr	r1, [pc, #28]	; (121c <_i2c_s_sync_init+0x28>)
    1200:	3000      	adds	r0, #0
    1202:	bf18      	it	ne
    1204:	2001      	movne	r0, #1
    1206:	4b06      	ldr	r3, [pc, #24]	; (1220 <_i2c_s_sync_init+0x2c>)
    1208:	4798      	blx	r3
	status = _i2c_s_init(hw);
    120a:	4620      	mov	r0, r4
    120c:	4b05      	ldr	r3, [pc, #20]	; (1224 <_i2c_s_sync_init+0x30>)
    120e:	4798      	blx	r3
	if (status) {
    1210:	4603      	mov	r3, r0
    1212:	b900      	cbnz	r0, 1216 <_i2c_s_sync_init+0x22>
	device->hw = hw;
    1214:	602c      	str	r4, [r5, #0]
}
    1216:	4618      	mov	r0, r3
    1218:	bd38      	pop	{r3, r4, r5, pc}
    121a:	bf00      	nop
    121c:	000014b4 	.word	0x000014b4
    1220:	00000bfd 	.word	0x00000bfd
    1224:	00001101 	.word	0x00001101

00001228 <_i2c_s_sync_enable>:
	hri_sercomi2cs_set_CTRLA_ENABLE_bit(device->hw);
    1228:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->I2CS.CTRLA.reg |= SERCOM_I2CS_CTRLA_ENABLE;
    122a:	6813      	ldr	r3, [r2, #0]
    122c:	f043 0302 	orr.w	r3, r3, #2
    1230:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->I2CS.SYNCBUSY.reg & reg) {
    1232:	69d3      	ldr	r3, [r2, #28]
    1234:	f013 0f03 	tst.w	r3, #3
    1238:	d1fb      	bne.n	1232 <_i2c_s_sync_enable+0xa>
}
    123a:	2000      	movs	r0, #0
    123c:	4770      	bx	lr

0000123e <_i2c_s_sync_is_10bit_addressing_on>:
	return hri_sercomi2cs_get_ADDR_TENBITEN_bit(device->hw);
    123e:	6803      	ldr	r3, [r0, #0]
	tmp = ((Sercom *)hw)->I2CS.ADDR.reg;
    1240:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    1242:	f3c0 30c0 	ubfx	r0, r0, #15, #1
    1246:	4770      	bx	lr

00001248 <_i2c_s_sync_set_address>:
{
    1248:	b508      	push	{r3, lr}
	return _i2c_s_set_address(device->hw, address);
    124a:	6800      	ldr	r0, [r0, #0]
    124c:	4b01      	ldr	r3, [pc, #4]	; (1254 <_i2c_s_sync_set_address+0xc>)
    124e:	4798      	blx	r3
}
    1250:	bd08      	pop	{r3, pc}
    1252:	bf00      	nop
    1254:	0000118d 	.word	0x0000118d

00001258 <_i2c_s_sync_write_byte>:
	hri_sercomi2cs_write_DATA_reg(device->hw, data);
    1258:	6803      	ldr	r3, [r0, #0]
}

static inline void hri_sercomi2cs_write_DATA_reg(const void *const hw, hri_sercomi2cs_data_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CS.DATA.reg = data;
    125a:	6299      	str	r1, [r3, #40]	; 0x28
    125c:	4770      	bx	lr

0000125e <_i2c_s_sync_read_byte>:
	return hri_sercomi2cs_read_DATA_reg(device->hw);
    125e:	6803      	ldr	r3, [r0, #0]
	SERCOM_CRITICAL_SECTION_LEAVE();
}

static inline hri_sercomi2cs_data_reg_t hri_sercomi2cs_read_DATA_reg(const void *const hw)
{
	return ((Sercom *)hw)->I2CS.DATA.reg;
    1260:	6a98      	ldr	r0, [r3, #40]	; 0x28
}
    1262:	b2c0      	uxtb	r0, r0
    1264:	4770      	bx	lr

00001266 <_i2c_s_sync_is_byte_sent>:
	return hri_sercomi2cs_get_interrupt_DRDY_bit(device->hw);
    1266:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->I2CS.INTFLAG.reg & SERCOM_I2CS_INTFLAG_DRDY) >> SERCOM_I2CS_INTFLAG_DRDY_Pos;
    1268:	7e18      	ldrb	r0, [r3, #24]
}
    126a:	f3c0 0080 	ubfx	r0, r0, #2, #1
    126e:	4770      	bx	lr

00001270 <_i2c_s_sync_is_byte_received>:
	return hri_sercomi2cs_get_interrupt_DRDY_bit(device->hw);
    1270:	6803      	ldr	r3, [r0, #0]
    1272:	7e18      	ldrb	r0, [r3, #24]
}
    1274:	f3c0 0080 	ubfx	r0, r0, #2, #1
    1278:	4770      	bx	lr

0000127a <_i2c_s_sync_clear_data_ready_flag>:
	hri_sercomi2cs_clear_INTFLAG_DRDY_bit(device->hw);
    127a:	6803      	ldr	r3, [r0, #0]
	((Sercom *)hw)->I2CS.INTFLAG.reg = SERCOM_I2CS_INTFLAG_DRDY;
    127c:	2204      	movs	r2, #4
    127e:	761a      	strb	r2, [r3, #24]
}
    1280:	2000      	movs	r0, #0
    1282:	4770      	bx	lr

00001284 <_wdt_init>:

/**
 * \brief WDT initialization function
 */
int32_t _wdt_init(struct wdt_dev *const dev)
{
    1284:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	ASSERT(dev && dev->hw);
    1286:	4604      	mov	r4, r0
    1288:	b330      	cbz	r0, 12d8 <_wdt_init+0x54>
    128a:	6800      	ldr	r0, [r0, #0]
    128c:	3000      	adds	r0, #0
    128e:	bf18      	it	ne
    1290:	2001      	movne	r0, #1
    1292:	2250      	movs	r2, #80	; 0x50
    1294:	4914      	ldr	r1, [pc, #80]	; (12e8 <_wdt_init+0x64>)
    1296:	4b15      	ldr	r3, [pc, #84]	; (12ec <_wdt_init+0x68>)
    1298:	4798      	blx	r3

	if (hri_wdt_get_CTRLA_ALWAYSON_bit(dev->hw) || hri_wdt_get_CTRLA_ENABLE_bit(dev->hw)) {
    129a:	6823      	ldr	r3, [r4, #0]
typedef uint8_t  hri_wdt_intenset_reg_t;
typedef uint8_t  hri_wdt_intflag_reg_t;

static inline void hri_wdt_wait_for_sync(const void *const hw, hri_wdt_syncbusy_reg_t reg)
{
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    129c:	689a      	ldr	r2, [r3, #8]
    129e:	f012 0f0e 	tst.w	r2, #14
    12a2:	d1fb      	bne.n	129c <_wdt_init+0x18>

static inline bool hri_wdt_get_CTRLA_ALWAYSON_bit(const void *const hw)
{
	uint8_t tmp;
	hri_wdt_wait_for_sync(hw, WDT_SYNCBUSY_ENABLE | WDT_SYNCBUSY_WEN | WDT_SYNCBUSY_ALWAYSON);
	tmp = ((Wdt *)hw)->CTRLA.reg;
    12a4:	781a      	ldrb	r2, [r3, #0]
    12a6:	09d2      	lsrs	r2, r2, #7
    12a8:	d118      	bne.n	12dc <_wdt_init+0x58>
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    12aa:	689a      	ldr	r2, [r3, #8]
    12ac:	f012 0f0e 	tst.w	r2, #14
    12b0:	d1fb      	bne.n	12aa <_wdt_init+0x26>
	tmp = ((Wdt *)hw)->CTRLA.reg;
    12b2:	781a      	ldrb	r2, [r3, #0]
    12b4:	f012 0f02 	tst.w	r2, #2
    12b8:	d113      	bne.n	12e2 <_wdt_init+0x5e>
	((Wdt *)hw)->CTRLA.reg &= ~WDT_CTRLA_WEN;
    12ba:	781a      	ldrb	r2, [r3, #0]
    12bc:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    12c0:	701a      	strb	r2, [r3, #0]
	while (((Wdt *)hw)->SYNCBUSY.reg & reg) {
    12c2:	689a      	ldr	r2, [r3, #8]
    12c4:	f012 0f0e 	tst.w	r2, #14
    12c8:	d1fb      	bne.n	12c2 <_wdt_init+0x3e>
			hri_wdt_write_CONFIG_WINDOW_bf(dev->hw, CONF_WDT_WINDOW);
		} else {
			hri_wdt_clear_CTRLA_WEN_bit(dev->hw);
		}

		hri_wdt_write_CONFIG_PER_bf(dev->hw, CONF_WDT_PER);
    12ca:	6822      	ldr	r2, [r4, #0]

static inline void hri_wdt_write_CONFIG_PER_bf(const void *const hw, hri_wdt_config_reg_t data)
{
	uint8_t tmp;
	WDT_CRITICAL_SECTION_ENTER();
	tmp = ((Wdt *)hw)->CONFIG.reg;
    12cc:	7853      	ldrb	r3, [r2, #1]
	tmp &= ~WDT_CONFIG_PER_Msk;
    12ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
	tmp |= WDT_CONFIG_PER(data);
	((Wdt *)hw)->CONFIG.reg = tmp;
    12d2:	7053      	strb	r3, [r2, #1]
	}

	return ERR_NONE;
    12d4:	2000      	movs	r0, #0
    12d6:	bd10      	pop	{r4, pc}
    12d8:	2000      	movs	r0, #0
    12da:	e7da      	b.n	1292 <_wdt_init+0xe>
		return ERR_DENIED;
    12dc:	f06f 0010 	mvn.w	r0, #16
    12e0:	bd10      	pop	{r4, pc}
    12e2:	f06f 0010 	mvn.w	r0, #16
}
    12e6:	bd10      	pop	{r4, pc}
    12e8:	000014d0 	.word	0x000014d0
    12ec:	00000bfd 	.word	0x00000bfd

000012f0 <main>:
#include <atmel_start.h>
#include "driver_examples.h"

int main(void)
{
    12f0:	b508      	push	{r3, lr}
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
    12f2:	4b02      	ldr	r3, [pc, #8]	; (12fc <main+0xc>)
    12f4:	4798      	blx	r3

	/* Replace with your application code */
	while (1) 
	{
		I2C_0_example();
    12f6:	4c02      	ldr	r4, [pc, #8]	; (1300 <main+0x10>)
    12f8:	47a0      	blx	r4
    12fa:	e7fd      	b.n	12f8 <main+0x8>
    12fc:	000002d1 	.word	0x000002d1
    1300:	000007a1 	.word	0x000007a1

00001304 <__libc_init_array>:
    1304:	b570      	push	{r4, r5, r6, lr}
    1306:	4e0d      	ldr	r6, [pc, #52]	; (133c <__libc_init_array+0x38>)
    1308:	4c0d      	ldr	r4, [pc, #52]	; (1340 <__libc_init_array+0x3c>)
    130a:	1ba4      	subs	r4, r4, r6
    130c:	10a4      	asrs	r4, r4, #2
    130e:	2500      	movs	r5, #0
    1310:	42a5      	cmp	r5, r4
    1312:	d109      	bne.n	1328 <__libc_init_array+0x24>
    1314:	4e0b      	ldr	r6, [pc, #44]	; (1344 <__libc_init_array+0x40>)
    1316:	4c0c      	ldr	r4, [pc, #48]	; (1348 <__libc_init_array+0x44>)
    1318:	f000 f8e6 	bl	14e8 <_init>
    131c:	1ba4      	subs	r4, r4, r6
    131e:	10a4      	asrs	r4, r4, #2
    1320:	2500      	movs	r5, #0
    1322:	42a5      	cmp	r5, r4
    1324:	d105      	bne.n	1332 <__libc_init_array+0x2e>
    1326:	bd70      	pop	{r4, r5, r6, pc}
    1328:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    132c:	4798      	blx	r3
    132e:	3501      	adds	r5, #1
    1330:	e7ee      	b.n	1310 <__libc_init_array+0xc>
    1332:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    1336:	4798      	blx	r3
    1338:	3501      	adds	r5, #1
    133a:	e7f2      	b.n	1322 <__libc_init_array+0x1e>
    133c:	000014f4 	.word	0x000014f4
    1340:	000014f4 	.word	0x000014f4
    1344:	000014f4 	.word	0x000014f4
    1348:	000014f8 	.word	0x000014f8
    134c:	682f2e2e 	.word	0x682f2e2e
    1350:	692f6c61 	.word	0x692f6c61
    1354:	756c636e 	.word	0x756c636e
    1358:	682f6564 	.word	0x682f6564
    135c:	775f6c61 	.word	0x775f6c61
    1360:	682e7464 	.word	0x682e7464
    1364:	00000000 	.word	0x00000000
    1368:	682f2e2e 	.word	0x682f2e2e
    136c:	732f6c61 	.word	0x732f6c61
    1370:	682f6372 	.word	0x682f6372
    1374:	665f6c61 	.word	0x665f6c61
    1378:	6873616c 	.word	0x6873616c
    137c:	0000632e 	.word	0x0000632e
    1380:	682f2e2e 	.word	0x682f2e2e
    1384:	732f6c61 	.word	0x732f6c61
    1388:	682f6372 	.word	0x682f6372
    138c:	695f6c61 	.word	0x695f6c61
    1390:	735f6332 	.word	0x735f6332
    1394:	6e79735f 	.word	0x6e79735f
    1398:	00632e63 	.word	0x00632e63
    139c:	682f2e2e 	.word	0x682f2e2e
    13a0:	732f6c61 	.word	0x732f6c61
    13a4:	682f6372 	.word	0x682f6372
    13a8:	695f6c61 	.word	0x695f6c61
    13ac:	00632e6f 	.word	0x00632e6f
    13b0:	682f2e2e 	.word	0x682f2e2e
    13b4:	732f6c61 	.word	0x732f6c61
    13b8:	682f6372 	.word	0x682f6372
    13bc:	715f6c61 	.word	0x715f6c61
    13c0:	5f697073 	.word	0x5f697073
    13c4:	636e7973 	.word	0x636e7973
    13c8:	0000632e 	.word	0x0000632e
    13cc:	682f2e2e 	.word	0x682f2e2e
    13d0:	732f6c61 	.word	0x732f6c61
    13d4:	682f6372 	.word	0x682f6372
    13d8:	745f6c61 	.word	0x745f6c61
    13dc:	72656d69 	.word	0x72656d69
    13e0:	0000632e 	.word	0x0000632e
    13e4:	682f2e2e 	.word	0x682f2e2e
    13e8:	752f6c61 	.word	0x752f6c61
    13ec:	736c6974 	.word	0x736c6974
    13f0:	6372732f 	.word	0x6372732f
    13f4:	6974752f 	.word	0x6974752f
    13f8:	6c5f736c 	.word	0x6c5f736c
    13fc:	2e747369 	.word	0x2e747369
    1400:	00000063 	.word	0x00000063

00001404 <_map>:
    1404:	00000005 00000005 00000006 00000006     ................
    1414:	00000007 00000007 682f2e2e 652f6c70     ........../hpl/e
    1424:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....
    1434:	682f2e2e 6e2f6c70 74636d76 682f6c72     ../hpl/nvmctrl/h
    1444:	6e5f6c70 74636d76 632e6c72 00000000     pl_nvmctrl.c....
    1454:	682f2e2e 712f6c70 2f697073 5f6c7068     ../hpl/qspi/hpl_
    1464:	69707371 0000632e 682f2e2e 722f6c70     qspi.c..../hpl/r
    1474:	682f6374 725f6c70 632e6374 00000000     tc/hpl_rtc.c....
    1484:	40003000 40003400 41012000 41014000     .0.@.4.@. .A.@.A
    1494:	43000000 43000400                       ...C...C

0000149c <_i2cms>:
	...
    14b4:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    14c4:	65735f6c 6d6f6372 0000632e 682f2e2e     l_sercom.c..../h
    14d4:	772f6c70 682f7464 775f6c70 632e7464     pl/wdt/hpl_wdt.c
    14e4:	00000000                                ....

000014e8 <_init>:
    14e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14ea:	bf00      	nop
    14ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
    14ee:	bc08      	pop	{r3}
    14f0:	469e      	mov	lr, r3
    14f2:	4770      	bx	lr

000014f4 <__init_array_start>:
    14f4:	00000289 	.word	0x00000289

000014f8 <_fini>:
    14f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    14fa:	bf00      	nop
    14fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    14fe:	bc08      	pop	{r3}
    1500:	469e      	mov	lr, r3
    1502:	4770      	bx	lr

00001504 <__fini_array_start>:
    1504:	00000265 	.word	0x00000265
